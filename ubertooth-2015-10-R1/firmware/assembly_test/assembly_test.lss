
assembly_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034b0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00030000  2**0
                  ALLOC
  2 .data         000004e2  10000020  000034b0  00020020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002180  10000504  00003992  00020504  2**2
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020502  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  0002052b  2**0
                  CONTENTS, READONLY
  6 .debug_info   000047d4  00000000  00000000  0002059b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000158c  00000000  00000000  00024d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000434  00000000  00000000  000262fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000528  00000000  00000000  00026730  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000418  00000000  00000000  00026c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001cea  00000000  00000000  00027070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001ef8  00000000  00000000  00028d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001170  00000000  00000000  0002ac54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_NVIC_Handler_Functions>:
       0:	e0 3f 00 10 fd 1b 00 00 69 1c 00 00 69 1c 00 00     .?......i...i...
      10:	69 1c 00 00 69 1c 00 00 69 1c 00 00 00 00 00 00     i...i...i.......
      20:	00 00 00 00 00 00 00 00 00 00 00 00 69 1c 00 00     ............i...
      30:	69 1c 00 00 00 00 00 00 69 1c 00 00 69 1c 00 00     i.......i...i...
      40:	69 1c 00 00 4d 0a 00 00 69 1c 00 00 69 1c 00 00     i...M...i...i...
      50:	69 1c 00 00 69 1c 00 00 69 1c 00 00 69 1c 00 00     i...i...i...i...
      60:	69 1c 00 00 69 1c 00 00 69 1c 00 00 69 1c 00 00     i...i...i...i...
      70:	69 1c 00 00 69 1c 00 00 69 1c 00 00 69 1c 00 00     i...i...i...i...
      80:	69 1c 00 00 69 1c 00 00 69 1c 00 00 69 1c 00 00     i...i...i...i...
      90:	69 1c 00 00 69 1c 00 00 69 1c 00 00 69 1c 00 00     i...i...i...i...
      a0:	f1 1b 00 00 69 1c 00 00 c5 0b 00 00 69 1c 00 00     ....i.......i...
      b0:	69 1c 00 00 69 1c 00 00 69 1c 00 00 69 1c 00 00     i...i...i...i...
      c0:	69 1c 00 00 69 1c 00 00 69 1c 00 00                 i...i...i...

000000cc <deregister_tm_clones>:
      cc:	4b04      	ldr	r3, [pc, #16]	; (e0 <deregister_tm_clones+0x14>)
      ce:	4805      	ldr	r0, [pc, #20]	; (e4 <deregister_tm_clones+0x18>)
      d0:	1a1b      	subs	r3, r3, r0
      d2:	2b06      	cmp	r3, #6
      d4:	d902      	bls.n	dc <deregister_tm_clones+0x10>
      d6:	4b04      	ldr	r3, [pc, #16]	; (e8 <deregister_tm_clones+0x1c>)
      d8:	b103      	cbz	r3, dc <deregister_tm_clones+0x10>
      da:	4718      	bx	r3
      dc:	4770      	bx	lr
      de:	bf00      	nop
      e0:	10000507 	.word	0x10000507
      e4:	10000504 	.word	0x10000504
      e8:	00000000 	.word	0x00000000

000000ec <register_tm_clones>:
      ec:	4905      	ldr	r1, [pc, #20]	; (104 <register_tm_clones+0x18>)
      ee:	4806      	ldr	r0, [pc, #24]	; (108 <register_tm_clones+0x1c>)
      f0:	1a09      	subs	r1, r1, r0
      f2:	1089      	asrs	r1, r1, #2
      f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
      f8:	1049      	asrs	r1, r1, #1
      fa:	d002      	beq.n	102 <register_tm_clones+0x16>
      fc:	4b03      	ldr	r3, [pc, #12]	; (10c <register_tm_clones+0x20>)
      fe:	b103      	cbz	r3, 102 <register_tm_clones+0x16>
     100:	4718      	bx	r3
     102:	4770      	bx	lr
     104:	10000504 	.word	0x10000504
     108:	10000504 	.word	0x10000504
     10c:	00000000 	.word	0x00000000

00000110 <__do_global_dtors_aux>:
     110:	b510      	push	{r4, lr}
     112:	4c06      	ldr	r4, [pc, #24]	; (12c <__do_global_dtors_aux+0x1c>)
     114:	7823      	ldrb	r3, [r4, #0]
     116:	b943      	cbnz	r3, 12a <__do_global_dtors_aux+0x1a>
     118:	f7ff ffd8 	bl	cc <deregister_tm_clones>
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <__do_global_dtors_aux+0x20>)
     11e:	b113      	cbz	r3, 126 <__do_global_dtors_aux+0x16>
     120:	4804      	ldr	r0, [pc, #16]	; (134 <__do_global_dtors_aux+0x24>)
     122:	f3af 8000 	nop.w
     126:	2301      	movs	r3, #1
     128:	7023      	strb	r3, [r4, #0]
     12a:	bd10      	pop	{r4, pc}
     12c:	10000504 	.word	0x10000504
     130:	00000000 	.word	0x00000000
     134:	00003488 	.word	0x00003488

00000138 <frame_dummy>:
     138:	b508      	push	{r3, lr}
     13a:	4b08      	ldr	r3, [pc, #32]	; (15c <frame_dummy+0x24>)
     13c:	b11b      	cbz	r3, 146 <frame_dummy+0xe>
     13e:	4808      	ldr	r0, [pc, #32]	; (160 <frame_dummy+0x28>)
     140:	4908      	ldr	r1, [pc, #32]	; (164 <frame_dummy+0x2c>)
     142:	f3af 8000 	nop.w
     146:	4808      	ldr	r0, [pc, #32]	; (168 <frame_dummy+0x30>)
     148:	6803      	ldr	r3, [r0, #0]
     14a:	b913      	cbnz	r3, 152 <frame_dummy+0x1a>
     14c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     150:	e7cc      	b.n	ec <register_tm_clones>
     152:	4b06      	ldr	r3, [pc, #24]	; (16c <frame_dummy+0x34>)
     154:	2b00      	cmp	r3, #0
     156:	d0f9      	beq.n	14c <frame_dummy+0x14>
     158:	4798      	blx	r3
     15a:	e7f7      	b.n	14c <frame_dummy+0x14>
     15c:	00000000 	.word	0x00000000
     160:	00003488 	.word	0x00003488
     164:	10000508 	.word	0x10000508
     168:	10000504 	.word	0x10000504
     16c:	00000000 	.word	0x00000000

00000170 <atexit>:
     170:	4601      	mov	r1, r0
     172:	2000      	movs	r0, #0
     174:	4602      	mov	r2, r0
     176:	4603      	mov	r3, r0
     178:	f000 b83e 	b.w	1f8 <__register_exitproc>

0000017c <__libc_fini_array>:
     17c:	b538      	push	{r3, r4, r5, lr}
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <__libc_fini_array+0x24>)
     180:	4d08      	ldr	r5, [pc, #32]	; (1a4 <__libc_fini_array+0x28>)
     182:	1aed      	subs	r5, r5, r3
     184:	10ac      	asrs	r4, r5, #2
     186:	bf18      	it	ne
     188:	18ed      	addne	r5, r5, r3
     18a:	d005      	beq.n	198 <__libc_fini_array+0x1c>
     18c:	3c01      	subs	r4, #1
     18e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
     192:	4798      	blx	r3
     194:	2c00      	cmp	r4, #0
     196:	d1f9      	bne.n	18c <__libc_fini_array+0x10>
     198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     19c:	f003 b97e 	b.w	349c <_fini>
     1a0:	000034a8 	.word	0x000034a8
     1a4:	000034ac 	.word	0x000034ac

000001a8 <__libc_init_array>:
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	4e0f      	ldr	r6, [pc, #60]	; (1e8 <__libc_init_array+0x40>)
     1ac:	4d0f      	ldr	r5, [pc, #60]	; (1ec <__libc_init_array+0x44>)
     1ae:	1b76      	subs	r6, r6, r5
     1b0:	10b6      	asrs	r6, r6, #2
     1b2:	bf18      	it	ne
     1b4:	2400      	movne	r4, #0
     1b6:	d005      	beq.n	1c4 <__libc_init_array+0x1c>
     1b8:	3401      	adds	r4, #1
     1ba:	f855 3b04 	ldr.w	r3, [r5], #4
     1be:	4798      	blx	r3
     1c0:	42a6      	cmp	r6, r4
     1c2:	d1f9      	bne.n	1b8 <__libc_init_array+0x10>
     1c4:	4e0a      	ldr	r6, [pc, #40]	; (1f0 <__libc_init_array+0x48>)
     1c6:	4d0b      	ldr	r5, [pc, #44]	; (1f4 <__libc_init_array+0x4c>)
     1c8:	f003 f95e 	bl	3488 <_init>
     1cc:	1b76      	subs	r6, r6, r5
     1ce:	10b6      	asrs	r6, r6, #2
     1d0:	bf18      	it	ne
     1d2:	2400      	movne	r4, #0
     1d4:	d006      	beq.n	1e4 <__libc_init_array+0x3c>
     1d6:	3401      	adds	r4, #1
     1d8:	f855 3b04 	ldr.w	r3, [r5], #4
     1dc:	4798      	blx	r3
     1de:	42a6      	cmp	r6, r4
     1e0:	d1f9      	bne.n	1d6 <__libc_init_array+0x2e>
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	bd70      	pop	{r4, r5, r6, pc}
     1e6:	bf00      	nop
     1e8:	00003494 	.word	0x00003494
     1ec:	00003494 	.word	0x00003494
     1f0:	0000349c 	.word	0x0000349c
     1f4:	00003494 	.word	0x00003494

000001f8 <__register_exitproc>:
     1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1fc:	4c25      	ldr	r4, [pc, #148]	; (294 <__register_exitproc+0x9c>)
     1fe:	4606      	mov	r6, r0
     200:	6825      	ldr	r5, [r4, #0]
     202:	4688      	mov	r8, r1
     204:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
     208:	4692      	mov	sl, r2
     20a:	4699      	mov	r9, r3
     20c:	b3c4      	cbz	r4, 280 <__register_exitproc+0x88>
     20e:	6860      	ldr	r0, [r4, #4]
     210:	281f      	cmp	r0, #31
     212:	dc17      	bgt.n	244 <__register_exitproc+0x4c>
     214:	1c41      	adds	r1, r0, #1
     216:	b176      	cbz	r6, 236 <__register_exitproc+0x3e>
     218:	eb04 0380 	add.w	r3, r4, r0, lsl #2
     21c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
     220:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
     224:	2201      	movs	r2, #1
     226:	4082      	lsls	r2, r0
     228:	4315      	orrs	r5, r2
     22a:	2e02      	cmp	r6, #2
     22c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
     230:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
     234:	d01e      	beq.n	274 <__register_exitproc+0x7c>
     236:	1c83      	adds	r3, r0, #2
     238:	6061      	str	r1, [r4, #4]
     23a:	2000      	movs	r0, #0
     23c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
     240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     244:	4b14      	ldr	r3, [pc, #80]	; (298 <__register_exitproc+0xa0>)
     246:	b303      	cbz	r3, 28a <__register_exitproc+0x92>
     248:	f44f 70c8 	mov.w	r0, #400	; 0x190
     24c:	f3af 8000 	nop.w
     250:	4604      	mov	r4, r0
     252:	b1d0      	cbz	r0, 28a <__register_exitproc+0x92>
     254:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
     258:	2700      	movs	r7, #0
     25a:	e884 0088 	stmia.w	r4, {r3, r7}
     25e:	4638      	mov	r0, r7
     260:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
     264:	2101      	movs	r1, #1
     266:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
     26a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
     26e:	2e00      	cmp	r6, #0
     270:	d0e1      	beq.n	236 <__register_exitproc+0x3e>
     272:	e7d1      	b.n	218 <__register_exitproc+0x20>
     274:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
     278:	431a      	orrs	r2, r3
     27a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
     27e:	e7da      	b.n	236 <__register_exitproc+0x3e>
     280:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
     284:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
     288:	e7c1      	b.n	20e <__register_exitproc+0x16>
     28a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     292:	bf00      	nop
     294:	00003358 	.word	0x00003358
     298:	00000000 	.word	0x00000000

0000029c <register_fini>:
     29c:	4b02      	ldr	r3, [pc, #8]	; (2a8 <register_fini+0xc>)
     29e:	b113      	cbz	r3, 2a6 <register_fini+0xa>
     2a0:	4802      	ldr	r0, [pc, #8]	; (2ac <register_fini+0x10>)
     2a2:	f7ff bf65 	b.w	170 <atexit>
     2a6:	4770      	bx	lr
     2a8:	00000000 	.word	0x00000000
     2ac:	0000017d 	.word	0x0000017d

000002b0 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
     2b0:	b480      	push	{r7}
     2b2:	af00      	add	r7, sp, #0
	head = 0;
     2b4:	4b04      	ldr	r3, [pc, #16]	; (2c8 <queue_init+0x18>)
     2b6:	2200      	movs	r2, #0
     2b8:	601a      	str	r2, [r3, #0]
	tail = 0;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <queue_init+0x1c>)
     2bc:	2200      	movs	r2, #0
     2be:	601a      	str	r2, [r3, #0]
}
     2c0:	46bd      	mov	sp, r7
     2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c6:	4770      	bx	lr
     2c8:	10000534 	.word	0x10000534
     2cc:	10000538 	.word	0x10000538

000002d0 <enqueue>:

int enqueue(u8 *buf)
{
     2d0:	b480      	push	{r7}
     2d2:	b085      	sub	sp, #20
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
	int i;
	u8 h = head & 0x7F;
     2d8:	4b2c      	ldr	r3, [pc, #176]	; (38c <enqueue+0xbc>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	b2db      	uxtb	r3, r3
     2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     2e2:	72fb      	strb	r3, [r7, #11]
	u8 t = tail & 0x7F;
     2e4:	4b2a      	ldr	r3, [pc, #168]	; (390 <enqueue+0xc0>)
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	b2db      	uxtb	r3, r3
     2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     2ee:	72bb      	strb	r3, [r7, #10]
	u8 n = (t + 1) & 0x7F;
     2f0:	7abb      	ldrb	r3, [r7, #10]
     2f2:	3301      	adds	r3, #1
     2f4:	b2db      	uxtb	r3, r3
     2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     2fa:	727b      	strb	r3, [r7, #9]

	/* fail if queue is full */
	if (h == n)
     2fc:	7afa      	ldrb	r2, [r7, #11]
     2fe:	7a7b      	ldrb	r3, [r7, #9]
     300:	429a      	cmp	r2, r3
     302:	d101      	bne.n	308 <enqueue+0x38>
		return 0;
     304:	2300      	movs	r3, #0
     306:	e03a      	b.n	37e <enqueue+0xae>

	fifo[t].clkn_high = clkn_high;
     308:	7abb      	ldrb	r3, [r7, #10]
     30a:	4a22      	ldr	r2, [pc, #136]	; (394 <enqueue+0xc4>)
     30c:	7812      	ldrb	r2, [r2, #0]
     30e:	b2d1      	uxtb	r1, r2
     310:	4a21      	ldr	r2, [pc, #132]	; (398 <enqueue+0xc8>)
     312:	019b      	lsls	r3, r3, #6
     314:	4413      	add	r3, r2
     316:	460a      	mov	r2, r1
     318:	70da      	strb	r2, [r3, #3]
	fifo[t].clk100ns = CLK100NS;
     31a:	7abb      	ldrb	r3, [r7, #10]
     31c:	4a1f      	ldr	r2, [pc, #124]	; (39c <enqueue+0xcc>)
     31e:	6812      	ldr	r2, [r2, #0]
     320:	491d      	ldr	r1, [pc, #116]	; (398 <enqueue+0xc8>)
     322:	019b      	lsls	r3, r3, #6
     324:	440b      	add	r3, r1
     326:	605a      	str	r2, [r3, #4]

	USRLED_SET;
     328:	4b1d      	ldr	r3, [pc, #116]	; (3a0 <enqueue+0xd0>)
     32a:	2202      	movs	r2, #2
     32c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DMA_SIZE; i++)
     32e:	2300      	movs	r3, #0
     330:	60fb      	str	r3, [r7, #12]
     332:	e00f      	b.n	354 <enqueue+0x84>
		fifo[t].data[i] = buf[i];
     334:	7abb      	ldrb	r3, [r7, #10]
     336:	68fa      	ldr	r2, [r7, #12]
     338:	6879      	ldr	r1, [r7, #4]
     33a:	440a      	add	r2, r1
     33c:	7811      	ldrb	r1, [r2, #0]
     33e:	4a16      	ldr	r2, [pc, #88]	; (398 <enqueue+0xc8>)
     340:	019b      	lsls	r3, r3, #6
     342:	441a      	add	r2, r3
     344:	68fb      	ldr	r3, [r7, #12]
     346:	4413      	add	r3, r2
     348:	3308      	adds	r3, #8
     34a:	460a      	mov	r2, r1
     34c:	719a      	strb	r2, [r3, #6]

	fifo[t].clkn_high = clkn_high;
	fifo[t].clk100ns = CLK100NS;

	USRLED_SET;
	for (i = 0; i < DMA_SIZE; i++)
     34e:	68fb      	ldr	r3, [r7, #12]
     350:	3301      	adds	r3, #1
     352:	60fb      	str	r3, [r7, #12]
     354:	68fb      	ldr	r3, [r7, #12]
     356:	2b31      	cmp	r3, #49	; 0x31
     358:	ddec      	ble.n	334 <enqueue+0x64>
		fifo[t].data[i] = buf[i];
	fifo[t].status = status;
     35a:	7abb      	ldrb	r3, [r7, #10]
     35c:	4a11      	ldr	r2, [pc, #68]	; (3a4 <enqueue+0xd4>)
     35e:	7812      	ldrb	r2, [r2, #0]
     360:	b2d1      	uxtb	r1, r2
     362:	4a0d      	ldr	r2, [pc, #52]	; (398 <enqueue+0xc8>)
     364:	019b      	lsls	r3, r3, #6
     366:	4413      	add	r3, r2
     368:	460a      	mov	r2, r1
     36a:	705a      	strb	r2, [r3, #1]
	status = 0;
     36c:	4b0d      	ldr	r3, [pc, #52]	; (3a4 <enqueue+0xd4>)
     36e:	2200      	movs	r2, #0
     370:	701a      	strb	r2, [r3, #0]
	++tail;
     372:	4b07      	ldr	r3, [pc, #28]	; (390 <enqueue+0xc0>)
     374:	681b      	ldr	r3, [r3, #0]
     376:	3301      	adds	r3, #1
     378:	4a05      	ldr	r2, [pc, #20]	; (390 <enqueue+0xc0>)
     37a:	6013      	str	r3, [r2, #0]

	return 1;
     37c:	2301      	movs	r3, #1
}
     37e:	4618      	mov	r0, r3
     380:	3714      	adds	r7, #20
     382:	46bd      	mov	sp, r7
     384:	f85d 7b04 	ldr.w	r7, [sp], #4
     388:	4770      	bx	lr
     38a:	bf00      	nop
     38c:	10000534 	.word	0x10000534
     390:	10000538 	.word	0x10000538
     394:	100005fc 	.word	0x100005fc
     398:	10000600 	.word	0x10000600
     39c:	40004008 	.word	0x40004008
     3a0:	2009c038 	.word	0x2009c038
     3a4:	10000530 	.word	0x10000530

000003a8 <dequeue>:

int dequeue()
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
     3ae:	4b14      	ldr	r3, [pc, #80]	; (400 <dequeue+0x58>)
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	b2db      	uxtb	r3, r3
     3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3b8:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
     3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <dequeue+0x5c>)
     3bc:	681b      	ldr	r3, [r3, #0]
     3be:	b2db      	uxtb	r3, r3
     3c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3c4:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
     3c6:	79fa      	ldrb	r2, [r7, #7]
     3c8:	79bb      	ldrb	r3, [r7, #6]
     3ca:	429a      	cmp	r2, r3
     3cc:	d104      	bne.n	3d8 <dequeue+0x30>
		USRLED_CLR;
     3ce:	4b0e      	ldr	r3, [pc, #56]	; (408 <dequeue+0x60>)
     3d0:	2202      	movs	r2, #2
     3d2:	601a      	str	r2, [r3, #0]
		return 0;
     3d4:	2300      	movs	r3, #0
     3d6:	e00e      	b.n	3f6 <dequeue+0x4e>
	}

	USBHwEPWrite(BULK_IN_EP, (u8 *)&fifo[h], sizeof(usb_pkt_rx));
     3d8:	79fb      	ldrb	r3, [r7, #7]
     3da:	019b      	lsls	r3, r3, #6
     3dc:	4a0b      	ldr	r2, [pc, #44]	; (40c <dequeue+0x64>)
     3de:	4413      	add	r3, r2
     3e0:	2082      	movs	r0, #130	; 0x82
     3e2:	4619      	mov	r1, r3
     3e4:	2240      	movs	r2, #64	; 0x40
     3e6:	f002 fa65 	bl	28b4 <USBHwEPWrite>
	++head;
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <dequeue+0x58>)
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	3301      	adds	r3, #1
     3f0:	4a03      	ldr	r2, [pc, #12]	; (400 <dequeue+0x58>)
     3f2:	6013      	str	r3, [r2, #0]

	return 1;
     3f4:	2301      	movs	r3, #1
}
     3f6:	4618      	mov	r0, r3
     3f8:	3708      	adds	r7, #8
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
     3fe:	bf00      	nop
     400:	10000534 	.word	0x10000534
     404:	10000538 	.word	0x10000538
     408:	2009c03c 	.word	0x2009c03c
     40c:	10000600 	.word	0x10000600

00000410 <usb_vendor_request_handler>:
static void usb_bulk_out_handler(u8 bEP, u8 bEPStatus)
{
}

static BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
     410:	b580      	push	{r7, lr}
     412:	b090      	sub	sp, #64	; 0x40
     414:	af00      	add	r7, sp, #0
     416:	60f8      	str	r0, [r7, #12]
     418:	60b9      	str	r1, [r7, #8]
     41a:	607a      	str	r2, [r7, #4]
	u8 *pbData = *ppbData;
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	681b      	ldr	r3, [r3, #0]
     420:	63fb      	str	r3, [r7, #60]	; 0x3c
	u32 command[5];
	u32 result[5];
	u8 length; // string length

	switch (pSetup->bRequest) {
     422:	68fb      	ldr	r3, [r7, #12]
     424:	785b      	ldrb	r3, [r3, #1]
     426:	2b21      	cmp	r3, #33	; 0x21
     428:	f200 82aa 	bhi.w	980 <usb_vendor_request_handler+0x570>
     42c:	a201      	add	r2, pc, #4	; (adr r2, 434 <usb_vendor_request_handler+0x24>)
     42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     432:	bf00      	nop
     434:	000004bd 	.word	0x000004bd
     438:	000004c5 	.word	0x000004c5
     43c:	00000981 	.word	0x00000981
     440:	000004ed 	.word	0x000004ed
     444:	0000050d 	.word	0x0000050d
     448:	00000525 	.word	0x00000525
     44c:	00000545 	.word	0x00000545
     450:	0000055d 	.word	0x0000055d
     454:	0000057d 	.word	0x0000057d
     458:	00000599 	.word	0x00000599
     45c:	000005b9 	.word	0x000005b9
     460:	00000853 	.word	0x00000853
     464:	00000879 	.word	0x00000879
     468:	00000629 	.word	0x00000629
     46c:	0000062f 	.word	0x0000062f
     470:	000005d5 	.word	0x000005d5
     474:	0000070d 	.word	0x0000070d
     478:	0000072d 	.word	0x0000072d
     47c:	00000765 	.word	0x00000765
     480:	00000785 	.word	0x00000785
     484:	000007a1 	.word	0x000007a1
     488:	0000082d 	.word	0x0000082d
     48c:	00000835 	.word	0x00000835
     490:	00000847 	.word	0x00000847
     494:	000008bf 	.word	0x000008bf
     498:	000008dd 	.word	0x000008dd
     49c:	00000981 	.word	0x00000981
     4a0:	000008e9 	.word	0x000008e9
     4a4:	000007a9 	.word	0x000007a9
     4a8:	000007c5 	.word	0x000007c5
     4ac:	000007ed 	.word	0x000007ed
     4b0:	000007e5 	.word	0x000007e5
     4b4:	000007f5 	.word	0x000007f5
     4b8:	0000093f 	.word	0x0000093f

	case UBERTOOTH_PING:
		*piLen = 0;
     4bc:	68bb      	ldr	r3, [r7, #8]
     4be:	2200      	movs	r2, #0
     4c0:	601a      	str	r2, [r3, #0]
		break;
     4c2:	e25f      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_RX_SYMBOLS:
		rx_pkts += pSetup->wValue;
     4c4:	68fb      	ldr	r3, [r7, #12]
     4c6:	885b      	ldrh	r3, [r3, #2]
     4c8:	461a      	mov	r2, r3
     4ca:	4b9e      	ldr	r3, [pc, #632]	; (744 <usb_vendor_request_handler+0x334>)
     4cc:	681b      	ldr	r3, [r3, #0]
     4ce:	4413      	add	r3, r2
     4d0:	4a9c      	ldr	r2, [pc, #624]	; (744 <usb_vendor_request_handler+0x334>)
     4d2:	6013      	str	r3, [r2, #0]
		if (rx_pkts == 0)
     4d4:	4b9b      	ldr	r3, [pc, #620]	; (744 <usb_vendor_request_handler+0x334>)
     4d6:	681b      	ldr	r3, [r3, #0]
     4d8:	2b00      	cmp	r3, #0
     4da:	d103      	bne.n	4e4 <usb_vendor_request_handler+0xd4>
			rx_pkts = 0xFFFFFFFF;
     4dc:	4b99      	ldr	r3, [pc, #612]	; (744 <usb_vendor_request_handler+0x334>)
     4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     4e2:	601a      	str	r2, [r3, #0]
		*piLen = 0;
     4e4:	68bb      	ldr	r3, [r7, #8]
     4e6:	2200      	movs	r2, #0
     4e8:	601a      	str	r2, [r3, #0]
		break;
     4ea:	e24b      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_USRLED:
		pbData[0] = (USRLED) ? 1 : 0;
     4ec:	4b96      	ldr	r3, [pc, #600]	; (748 <usb_vendor_request_handler+0x338>)
     4ee:	681b      	ldr	r3, [r3, #0]
     4f0:	f003 0302 	and.w	r3, r3, #2
     4f4:	2b00      	cmp	r3, #0
     4f6:	bf14      	ite	ne
     4f8:	2301      	movne	r3, #1
     4fa:	2300      	moveq	r3, #0
     4fc:	b2db      	uxtb	r3, r3
     4fe:	461a      	mov	r2, r3
     500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     502:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     504:	68bb      	ldr	r3, [r7, #8]
     506:	2201      	movs	r2, #1
     508:	601a      	str	r2, [r3, #0]
		break;
     50a:	e23b      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_USRLED:
		if (pSetup->wValue)
     50c:	68fb      	ldr	r3, [r7, #12]
     50e:	885b      	ldrh	r3, [r3, #2]
     510:	2b00      	cmp	r3, #0
     512:	d003      	beq.n	51c <usb_vendor_request_handler+0x10c>
			USRLED_SET;
     514:	4b8d      	ldr	r3, [pc, #564]	; (74c <usb_vendor_request_handler+0x33c>)
     516:	2202      	movs	r2, #2
     518:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
     51a:	e233      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_USRLED:
		if (pSetup->wValue)
			USRLED_SET;
		else
			USRLED_CLR;
     51c:	4b8c      	ldr	r3, [pc, #560]	; (750 <usb_vendor_request_handler+0x340>)
     51e:	2202      	movs	r2, #2
     520:	601a      	str	r2, [r3, #0]
		break;
     522:	e22f      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_RXLED:
		pbData[0] = (RXLED) ? 1 : 0;
     524:	4b88      	ldr	r3, [pc, #544]	; (748 <usb_vendor_request_handler+0x338>)
     526:	681b      	ldr	r3, [r3, #0]
     528:	f003 0310 	and.w	r3, r3, #16
     52c:	2b00      	cmp	r3, #0
     52e:	bf14      	ite	ne
     530:	2301      	movne	r3, #1
     532:	2300      	moveq	r3, #0
     534:	b2db      	uxtb	r3, r3
     536:	461a      	mov	r2, r3
     538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     53a:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     53c:	68bb      	ldr	r3, [r7, #8]
     53e:	2201      	movs	r2, #1
     540:	601a      	str	r2, [r3, #0]
		break;
     542:	e21f      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_RXLED:
		if (pSetup->wValue)
     544:	68fb      	ldr	r3, [r7, #12]
     546:	885b      	ldrh	r3, [r3, #2]
     548:	2b00      	cmp	r3, #0
     54a:	d003      	beq.n	554 <usb_vendor_request_handler+0x144>
			RXLED_SET;
     54c:	4b7f      	ldr	r3, [pc, #508]	; (74c <usb_vendor_request_handler+0x33c>)
     54e:	2210      	movs	r2, #16
     550:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
     552:	e217      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_RXLED:
		if (pSetup->wValue)
			RXLED_SET;
		else
			RXLED_CLR;
     554:	4b7e      	ldr	r3, [pc, #504]	; (750 <usb_vendor_request_handler+0x340>)
     556:	2210      	movs	r2, #16
     558:	601a      	str	r2, [r3, #0]
		break;
     55a:	e213      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_TXLED:
		pbData[0] = (TXLED) ? 1 : 0;
     55c:	4b7a      	ldr	r3, [pc, #488]	; (748 <usb_vendor_request_handler+0x338>)
     55e:	681b      	ldr	r3, [r3, #0]
     560:	f403 7380 	and.w	r3, r3, #256	; 0x100
     564:	2b00      	cmp	r3, #0
     566:	bf14      	ite	ne
     568:	2301      	movne	r3, #1
     56a:	2300      	moveq	r3, #0
     56c:	b2db      	uxtb	r3, r3
     56e:	461a      	mov	r2, r3
     570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     572:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     574:	68bb      	ldr	r3, [r7, #8]
     576:	2201      	movs	r2, #1
     578:	601a      	str	r2, [r3, #0]
		break;
     57a:	e203      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_TXLED:
		if (pSetup->wValue)
     57c:	68fb      	ldr	r3, [r7, #12]
     57e:	885b      	ldrh	r3, [r3, #2]
     580:	2b00      	cmp	r3, #0
     582:	d004      	beq.n	58e <usb_vendor_request_handler+0x17e>
			TXLED_SET;
     584:	4b71      	ldr	r3, [pc, #452]	; (74c <usb_vendor_request_handler+0x33c>)
     586:	f44f 7280 	mov.w	r2, #256	; 0x100
     58a:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
     58c:	e1fa      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_TXLED:
		if (pSetup->wValue)
			TXLED_SET;
		else
			TXLED_CLR;
     58e:	4b70      	ldr	r3, [pc, #448]	; (750 <usb_vendor_request_handler+0x340>)
     590:	f44f 7280 	mov.w	r2, #256	; 0x100
     594:	601a      	str	r2, [r3, #0]
		break;
     596:	e1f5      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_1V8:
		pbData[0] = (CC1V8) ? 1 : 0;
     598:	4b6b      	ldr	r3, [pc, #428]	; (748 <usb_vendor_request_handler+0x338>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	f403 7300 	and.w	r3, r3, #512	; 0x200
     5a0:	2b00      	cmp	r3, #0
     5a2:	bf14      	ite	ne
     5a4:	2301      	movne	r3, #1
     5a6:	2300      	moveq	r3, #0
     5a8:	b2db      	uxtb	r3, r3
     5aa:	461a      	mov	r2, r3
     5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5ae:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     5b0:	68bb      	ldr	r3, [r7, #8]
     5b2:	2201      	movs	r2, #1
     5b4:	601a      	str	r2, [r3, #0]
		break;
     5b6:	e1e5      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_1V8:
		if (pSetup->wValue)
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	885b      	ldrh	r3, [r3, #2]
     5bc:	2b00      	cmp	r3, #0
     5be:	d004      	beq.n	5ca <usb_vendor_request_handler+0x1ba>
			CC1V8_SET;
     5c0:	4b62      	ldr	r3, [pc, #392]	; (74c <usb_vendor_request_handler+0x33c>)
     5c2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5c6:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
     5c8:	e1dc      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_1V8:
		if (pSetup->wValue)
			CC1V8_SET;
		else
			CC1V8_CLR;
     5ca:	4b61      	ldr	r3, [pc, #388]	; (750 <usb_vendor_request_handler+0x340>)
     5cc:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d0:	601a      	str	r2, [r3, #0]
		break;
     5d2:	e1d7      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
     5d4:	2336      	movs	r3, #54	; 0x36
     5d6:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
     5d8:	4b5e      	ldr	r3, [pc, #376]	; (754 <usb_vendor_request_handler+0x344>)
     5da:	681b      	ldr	r3, [r3, #0]
     5dc:	f107 0124 	add.w	r1, r7, #36	; 0x24
     5e0:	f107 0210 	add.w	r2, r7, #16
     5e4:	4608      	mov	r0, r1
     5e6:	4611      	mov	r1, r2
     5e8:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     5ea:	693b      	ldr	r3, [r7, #16]
     5ec:	b2da      	uxtb	r2, r3
     5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5f0:	701a      	strb	r2, [r3, #0]
		pbData[1] = result[1] & 0xFF;
     5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5f4:	3301      	adds	r3, #1
     5f6:	697a      	ldr	r2, [r7, #20]
     5f8:	b2d2      	uxtb	r2, r2
     5fa:	701a      	strb	r2, [r3, #0]
		pbData[2] = (result[1] >> 8) & 0xFF;
     5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5fe:	3302      	adds	r3, #2
     600:	697a      	ldr	r2, [r7, #20]
     602:	0a12      	lsrs	r2, r2, #8
     604:	b2d2      	uxtb	r2, r2
     606:	701a      	strb	r2, [r3, #0]
		pbData[3] = (result[1] >> 16) & 0xFF;
     608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     60a:	3303      	adds	r3, #3
     60c:	697a      	ldr	r2, [r7, #20]
     60e:	0c12      	lsrs	r2, r2, #16
     610:	b2d2      	uxtb	r2, r2
     612:	701a      	strb	r2, [r3, #0]
		pbData[4] = (result[1] >> 24) & 0xFF;
     614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     616:	3304      	adds	r3, #4
     618:	697a      	ldr	r2, [r7, #20]
     61a:	0e12      	lsrs	r2, r2, #24
     61c:	b2d2      	uxtb	r2, r2
     61e:	701a      	strb	r2, [r3, #0]
		*piLen = 5;
     620:	68bb      	ldr	r3, [r7, #8]
     622:	2205      	movs	r2, #5
     624:	601a      	str	r2, [r3, #0]
		break;
     626:	e1ad      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_RESET:
		reset();
     628:	f001 fe40 	bl	22ac <reset>
		break;
     62c:	e1aa      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
     62e:	233a      	movs	r3, #58	; 0x3a
     630:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
     632:	4b48      	ldr	r3, [pc, #288]	; (754 <usb_vendor_request_handler+0x344>)
     634:	681b      	ldr	r3, [r3, #0]
     636:	f107 0124 	add.w	r1, r7, #36	; 0x24
     63a:	f107 0210 	add.w	r2, r7, #16
     63e:	4608      	mov	r0, r1
     640:	4611      	mov	r1, r2
     642:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     644:	693b      	ldr	r3, [r7, #16]
     646:	b2da      	uxtb	r2, r3
     648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     64a:	701a      	strb	r2, [r3, #0]
		pbData[1] = result[1] & 0xFF;
     64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     64e:	3301      	adds	r3, #1
     650:	697a      	ldr	r2, [r7, #20]
     652:	b2d2      	uxtb	r2, r2
     654:	701a      	strb	r2, [r3, #0]
		pbData[2] = (result[1] >> 8) & 0xFF;
     656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     658:	3302      	adds	r3, #2
     65a:	697a      	ldr	r2, [r7, #20]
     65c:	0a12      	lsrs	r2, r2, #8
     65e:	b2d2      	uxtb	r2, r2
     660:	701a      	strb	r2, [r3, #0]
		pbData[3] = (result[1] >> 16) & 0xFF;
     662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     664:	3303      	adds	r3, #3
     666:	697a      	ldr	r2, [r7, #20]
     668:	0c12      	lsrs	r2, r2, #16
     66a:	b2d2      	uxtb	r2, r2
     66c:	701a      	strb	r2, [r3, #0]
		pbData[4] = (result[1] >> 24) & 0xFF;
     66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     670:	3304      	adds	r3, #4
     672:	697a      	ldr	r2, [r7, #20]
     674:	0e12      	lsrs	r2, r2, #24
     676:	b2d2      	uxtb	r2, r2
     678:	701a      	strb	r2, [r3, #0]
		pbData[5] = result[2] & 0xFF;
     67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     67c:	3305      	adds	r3, #5
     67e:	69ba      	ldr	r2, [r7, #24]
     680:	b2d2      	uxtb	r2, r2
     682:	701a      	strb	r2, [r3, #0]
		pbData[6] = (result[2] >> 8) & 0xFF;
     684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     686:	3306      	adds	r3, #6
     688:	69ba      	ldr	r2, [r7, #24]
     68a:	0a12      	lsrs	r2, r2, #8
     68c:	b2d2      	uxtb	r2, r2
     68e:	701a      	strb	r2, [r3, #0]
		pbData[7] = (result[2] >> 16) & 0xFF;
     690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     692:	3307      	adds	r3, #7
     694:	69ba      	ldr	r2, [r7, #24]
     696:	0c12      	lsrs	r2, r2, #16
     698:	b2d2      	uxtb	r2, r2
     69a:	701a      	strb	r2, [r3, #0]
		pbData[8] = (result[2] >> 24) & 0xFF;
     69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     69e:	3308      	adds	r3, #8
     6a0:	69ba      	ldr	r2, [r7, #24]
     6a2:	0e12      	lsrs	r2, r2, #24
     6a4:	b2d2      	uxtb	r2, r2
     6a6:	701a      	strb	r2, [r3, #0]
		pbData[9] = result[3] & 0xFF;
     6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6aa:	3309      	adds	r3, #9
     6ac:	69fa      	ldr	r2, [r7, #28]
     6ae:	b2d2      	uxtb	r2, r2
     6b0:	701a      	strb	r2, [r3, #0]
		pbData[10] = (result[3] >> 8) & 0xFF;
     6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6b4:	330a      	adds	r3, #10
     6b6:	69fa      	ldr	r2, [r7, #28]
     6b8:	0a12      	lsrs	r2, r2, #8
     6ba:	b2d2      	uxtb	r2, r2
     6bc:	701a      	strb	r2, [r3, #0]
		pbData[11] = (result[3] >> 16) & 0xFF;
     6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6c0:	330b      	adds	r3, #11
     6c2:	69fa      	ldr	r2, [r7, #28]
     6c4:	0c12      	lsrs	r2, r2, #16
     6c6:	b2d2      	uxtb	r2, r2
     6c8:	701a      	strb	r2, [r3, #0]
		pbData[12] = (result[3] >> 24) & 0xFF;
     6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6cc:	330c      	adds	r3, #12
     6ce:	69fa      	ldr	r2, [r7, #28]
     6d0:	0e12      	lsrs	r2, r2, #24
     6d2:	b2d2      	uxtb	r2, r2
     6d4:	701a      	strb	r2, [r3, #0]
		pbData[13] = result[4] & 0xFF;
     6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6d8:	330d      	adds	r3, #13
     6da:	6a3a      	ldr	r2, [r7, #32]
     6dc:	b2d2      	uxtb	r2, r2
     6de:	701a      	strb	r2, [r3, #0]
		pbData[14] = (result[4] >> 8) & 0xFF;
     6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6e2:	330e      	adds	r3, #14
     6e4:	6a3a      	ldr	r2, [r7, #32]
     6e6:	0a12      	lsrs	r2, r2, #8
     6e8:	b2d2      	uxtb	r2, r2
     6ea:	701a      	strb	r2, [r3, #0]
		pbData[15] = (result[4] >> 16) & 0xFF;
     6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6ee:	330f      	adds	r3, #15
     6f0:	6a3a      	ldr	r2, [r7, #32]
     6f2:	0c12      	lsrs	r2, r2, #16
     6f4:	b2d2      	uxtb	r2, r2
     6f6:	701a      	strb	r2, [r3, #0]
		pbData[16] = (result[4] >> 24) & 0xFF;
     6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6fa:	3310      	adds	r3, #16
     6fc:	6a3a      	ldr	r2, [r7, #32]
     6fe:	0e12      	lsrs	r2, r2, #24
     700:	b2d2      	uxtb	r2, r2
     702:	701a      	strb	r2, [r3, #0]
		*piLen = 17;
     704:	68bb      	ldr	r3, [r7, #8]
     706:	2211      	movs	r2, #17
     708:	601a      	str	r2, [r3, #0]
		break;
     70a:	e13b      	b.n	984 <usb_vendor_request_handler+0x574>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		pbData[0] = (PAEN) ? 1 : 0;
     70c:	4b12      	ldr	r3, [pc, #72]	; (758 <usb_vendor_request_handler+0x348>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	f003 0380 	and.w	r3, r3, #128	; 0x80
     714:	2b00      	cmp	r3, #0
     716:	bf14      	ite	ne
     718:	2301      	movne	r3, #1
     71a:	2300      	moveq	r3, #0
     71c:	b2db      	uxtb	r3, r3
     71e:	461a      	mov	r2, r3
     720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     722:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     724:	68bb      	ldr	r3, [r7, #8]
     726:	2201      	movs	r2, #1
     728:	601a      	str	r2, [r3, #0]
		break;
     72a:	e12b      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_PAEN:
		if (pSetup->wValue)
     72c:	68fb      	ldr	r3, [r7, #12]
     72e:	885b      	ldrh	r3, [r3, #2]
     730:	2b00      	cmp	r3, #0
     732:	d003      	beq.n	73c <usb_vendor_request_handler+0x32c>
			PAEN_SET;
     734:	4b09      	ldr	r3, [pc, #36]	; (75c <usb_vendor_request_handler+0x34c>)
     736:	2280      	movs	r2, #128	; 0x80
     738:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
     73a:	e123      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_PAEN:
		if (pSetup->wValue)
			PAEN_SET;
		else
			PAEN_CLR;
     73c:	4b08      	ldr	r3, [pc, #32]	; (760 <usb_vendor_request_handler+0x350>)
     73e:	2280      	movs	r2, #128	; 0x80
     740:	601a      	str	r2, [r3, #0]
		break;
     742:	e11f      	b.n	984 <usb_vendor_request_handler+0x574>
     744:	1000052c 	.word	0x1000052c
     748:	2009c034 	.word	0x2009c034
     74c:	2009c038 	.word	0x2009c038
     750:	2009c03c 	.word	0x2009c03c
     754:	10000448 	.word	0x10000448
     758:	2009c054 	.word	0x2009c054
     75c:	2009c058 	.word	0x2009c058
     760:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		pbData[0] = (HGM) ? 1 : 0;
     764:	4b8a      	ldr	r3, [pc, #552]	; (990 <usb_vendor_request_handler+0x580>)
     766:	681b      	ldr	r3, [r3, #0]
     768:	f403 7380 	and.w	r3, r3, #256	; 0x100
     76c:	2b00      	cmp	r3, #0
     76e:	bf14      	ite	ne
     770:	2301      	movne	r3, #1
     772:	2300      	moveq	r3, #0
     774:	b2db      	uxtb	r3, r3
     776:	461a      	mov	r2, r3
     778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     77a:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     77c:	68bb      	ldr	r3, [r7, #8]
     77e:	2201      	movs	r2, #1
     780:	601a      	str	r2, [r3, #0]
		break;
     782:	e0ff      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_HGM:
		if (pSetup->wValue)
     784:	68fb      	ldr	r3, [r7, #12]
     786:	885b      	ldrh	r3, [r3, #2]
     788:	2b00      	cmp	r3, #0
     78a:	d004      	beq.n	796 <usb_vendor_request_handler+0x386>
			HGM_SET;
     78c:	4b81      	ldr	r3, [pc, #516]	; (994 <usb_vendor_request_handler+0x584>)
     78e:	f44f 7280 	mov.w	r2, #256	; 0x100
     792:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
     794:	e0f6      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_HGM:
		if (pSetup->wValue)
			HGM_SET;
		else
			HGM_CLR;
     796:	4b80      	ldr	r3, [pc, #512]	; (998 <usb_vendor_request_handler+0x588>)
     798:	f44f 7280 	mov.w	r2, #256	; 0x100
     79c:	601a      	str	r2, [r3, #0]
		break;
     79e:	e0f1      	b.n	984 <usb_vendor_request_handler+0x574>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
     7a0:	4b7e      	ldr	r3, [pc, #504]	; (99c <usb_vendor_request_handler+0x58c>)
     7a2:	2203      	movs	r2, #3
     7a4:	601a      	str	r2, [r3, #0]
		break;
     7a6:	e0ed      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_PALEVEL:
		pbData[0] = cc2400_get(FREND) & 0x7;
     7a8:	2005      	movs	r0, #5
     7aa:	f001 fc13 	bl	1fd4 <cc2400_get>
     7ae:	4603      	mov	r3, r0
     7b0:	b2db      	uxtb	r3, r3
     7b2:	f003 0307 	and.w	r3, r3, #7
     7b6:	b2da      	uxtb	r2, r3
     7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7ba:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     7bc:	68bb      	ldr	r3, [r7, #8]
     7be:	2201      	movs	r2, #1
     7c0:	601a      	str	r2, [r3, #0]
		break;
     7c2:	e0df      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_PALEVEL:
		if( pSetup->wValue < 8 ) {
     7c4:	68fb      	ldr	r3, [r7, #12]
     7c6:	885b      	ldrh	r3, [r3, #2]
     7c8:	2b07      	cmp	r3, #7
     7ca:	d809      	bhi.n	7e0 <usb_vendor_request_handler+0x3d0>
			cc2400_set(FREND, 8 | pSetup->wValue);
     7cc:	68fb      	ldr	r3, [r7, #12]
     7ce:	885b      	ldrh	r3, [r3, #2]
     7d0:	f043 0308 	orr.w	r3, r3, #8
     7d4:	b29b      	uxth	r3, r3
     7d6:	2005      	movs	r0, #5
     7d8:	4619      	mov	r1, r3
     7da:	f001 fc11 	bl	2000 <cc2400_set>
		} else {
			return FALSE;
		}
		break;
     7de:	e0d1      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_PALEVEL:
		if( pSetup->wValue < 8 ) {
			cc2400_set(FREND, 8 | pSetup->wValue);
		} else {
			return FALSE;
     7e0:	2300      	movs	r3, #0
     7e2:	e0d0      	b.n	986 <usb_vendor_request_handler+0x576>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
     7e4:	4b6d      	ldr	r3, [pc, #436]	; (99c <usb_vendor_request_handler+0x58c>)
     7e6:	2205      	movs	r2, #5
     7e8:	601a      	str	r2, [r3, #0]
		break;
     7ea:	e0cb      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
     7ec:	4b6b      	ldr	r3, [pc, #428]	; (99c <usb_vendor_request_handler+0x58c>)
     7ee:	2206      	movs	r2, #6
     7f0:	601a      	str	r2, [r3, #0]
		break;
     7f2:	e0c7      	b.n	984 <usb_vendor_request_handler+0x574>
#endif

	case UBERTOOTH_RANGE_CHECK:
		pbData[0] = rr.valid;
     7f4:	4b6a      	ldr	r3, [pc, #424]	; (9a0 <usb_vendor_request_handler+0x590>)
     7f6:	781a      	ldrb	r2, [r3, #0]
     7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7fa:	701a      	strb	r2, [r3, #0]
		pbData[1] = rr.request_pa;
     7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7fe:	3301      	adds	r3, #1
     800:	4a67      	ldr	r2, [pc, #412]	; (9a0 <usb_vendor_request_handler+0x590>)
     802:	7852      	ldrb	r2, [r2, #1]
     804:	701a      	strb	r2, [r3, #0]
		pbData[2] = rr.request_num;
     806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     808:	3302      	adds	r3, #2
     80a:	4a65      	ldr	r2, [pc, #404]	; (9a0 <usb_vendor_request_handler+0x590>)
     80c:	7892      	ldrb	r2, [r2, #2]
     80e:	701a      	strb	r2, [r3, #0]
		pbData[3] = rr.reply_pa;
     810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     812:	3303      	adds	r3, #3
     814:	4a62      	ldr	r2, [pc, #392]	; (9a0 <usb_vendor_request_handler+0x590>)
     816:	78d2      	ldrb	r2, [r2, #3]
     818:	701a      	strb	r2, [r3, #0]
		pbData[4] = rr.reply_num;
     81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     81c:	3304      	adds	r3, #4
     81e:	4a60      	ldr	r2, [pc, #384]	; (9a0 <usb_vendor_request_handler+0x590>)
     820:	7912      	ldrb	r2, [r2, #4]
     822:	701a      	strb	r2, [r3, #0]
		*piLen = 5;
     824:	68bb      	ldr	r3, [r7, #8]
     826:	2205      	movs	r2, #5
     828:	601a      	str	r2, [r3, #0]
		break;
     82a:	e0ab      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
     82c:	4b5b      	ldr	r3, [pc, #364]	; (99c <usb_vendor_request_handler+0x58c>)
     82e:	2200      	movs	r2, #0
     830:	601a      	str	r2, [r3, #0]
		break;
     832:	e0a7      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_MOD:
		pbData[0] = modulation;
     834:	4b5b      	ldr	r3, [pc, #364]	; (9a4 <usb_vendor_request_handler+0x594>)
     836:	681b      	ldr	r3, [r3, #0]
     838:	b2da      	uxtb	r2, r3
     83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     83c:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
     83e:	68bb      	ldr	r3, [r7, #8]
     840:	2201      	movs	r2, #1
     842:	601a      	str	r2, [r3, #0]
		break;
     844:	e09e      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_MOD:
		modulation = pSetup->wValue;
     846:	68fb      	ldr	r3, [r7, #12]
     848:	885b      	ldrh	r3, [r3, #2]
     84a:	461a      	mov	r2, r3
     84c:	4b55      	ldr	r3, [pc, #340]	; (9a4 <usb_vendor_request_handler+0x594>)
     84e:	601a      	str	r2, [r3, #0]
		break;
     850:	e098      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_CHANNEL:
		pbData[0] = channel & 0xFF;
     852:	4b55      	ldr	r3, [pc, #340]	; (9a8 <usb_vendor_request_handler+0x598>)
     854:	881b      	ldrh	r3, [r3, #0]
     856:	b29b      	uxth	r3, r3
     858:	b2da      	uxtb	r2, r3
     85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     85c:	701a      	strb	r2, [r3, #0]
		pbData[1] = (channel >> 8) & 0xFF;
     85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     860:	3301      	adds	r3, #1
     862:	4a51      	ldr	r2, [pc, #324]	; (9a8 <usb_vendor_request_handler+0x598>)
     864:	8812      	ldrh	r2, [r2, #0]
     866:	b292      	uxth	r2, r2
     868:	0a12      	lsrs	r2, r2, #8
     86a:	b292      	uxth	r2, r2
     86c:	b2d2      	uxtb	r2, r2
     86e:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
     870:	68bb      	ldr	r3, [r7, #8]
     872:	2202      	movs	r2, #2
     874:	601a      	str	r2, [r3, #0]
		break;
     876:	e085      	b.n	984 <usb_vendor_request_handler+0x574>

    case UBERTOOTH_SET_CHANNEL:
		channel = pSetup->wValue;
     878:	68fb      	ldr	r3, [r7, #12]
     87a:	885a      	ldrh	r2, [r3, #2]
     87c:	4b4a      	ldr	r3, [pc, #296]	; (9a8 <usb_vendor_request_handler+0x598>)
     87e:	801a      	strh	r2, [r3, #0]
		channel = MAX(channel, MIN_FREQ);
     880:	4b49      	ldr	r3, [pc, #292]	; (9a8 <usb_vendor_request_handler+0x598>)
     882:	881b      	ldrh	r3, [r3, #0]
     884:	b29b      	uxth	r3, r3
     886:	f640 02dc 	movw	r2, #2268	; 0x8dc
     88a:	4293      	cmp	r3, r2
     88c:	d903      	bls.n	896 <usb_vendor_request_handler+0x486>
     88e:	4b46      	ldr	r3, [pc, #280]	; (9a8 <usb_vendor_request_handler+0x598>)
     890:	881b      	ldrh	r3, [r3, #0]
     892:	b29b      	uxth	r3, r3
     894:	e001      	b.n	89a <usb_vendor_request_handler+0x48a>
     896:	f640 03dc 	movw	r3, #2268	; 0x8dc
     89a:	4a43      	ldr	r2, [pc, #268]	; (9a8 <usb_vendor_request_handler+0x598>)
     89c:	8013      	strh	r3, [r2, #0]
		channel = MIN(channel, MAX_FREQ);
     89e:	4b42      	ldr	r3, [pc, #264]	; (9a8 <usb_vendor_request_handler+0x598>)
     8a0:	881b      	ldrh	r3, [r3, #0]
     8a2:	b29b      	uxth	r3, r3
     8a4:	f640 22e9 	movw	r2, #2793	; 0xae9
     8a8:	4293      	cmp	r3, r2
     8aa:	d803      	bhi.n	8b4 <usb_vendor_request_handler+0x4a4>
     8ac:	4b3e      	ldr	r3, [pc, #248]	; (9a8 <usb_vendor_request_handler+0x598>)
     8ae:	881b      	ldrh	r3, [r3, #0]
     8b0:	b29b      	uxth	r3, r3
     8b2:	e001      	b.n	8b8 <usb_vendor_request_handler+0x4a8>
     8b4:	f640 23ea 	movw	r3, #2794	; 0xaea
     8b8:	4a3b      	ldr	r2, [pc, #236]	; (9a8 <usb_vendor_request_handler+0x598>)
     8ba:	8013      	strh	r3, [r2, #0]
		break;
     8bc:	e062      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
     8be:	2339      	movs	r3, #57	; 0x39
     8c0:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
     8c2:	4b3a      	ldr	r3, [pc, #232]	; (9ac <usb_vendor_request_handler+0x59c>)
     8c4:	681b      	ldr	r3, [r3, #0]
     8c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
     8ca:	f107 0210 	add.w	r2, r7, #16
     8ce:	4608      	mov	r0, r1
     8d0:	4611      	mov	r1, r2
     8d2:	4798      	blx	r3
		*piLen = 0; /* should never return */
     8d4:	68bb      	ldr	r3, [r7, #8]
     8d6:	2200      	movs	r2, #0
     8d8:	601a      	str	r2, [r3, #0]
		break;
     8da:	e053      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
     8dc:	4b34      	ldr	r3, [pc, #208]	; (9b0 <usb_vendor_request_handler+0x5a0>)
     8de:	4a35      	ldr	r2, [pc, #212]	; (9b4 <usb_vendor_request_handler+0x5a4>)
     8e0:	601a      	str	r2, [r3, #0]
		reset();
     8e2:	f001 fce3 	bl	22ac <reset>
		break;
     8e6:	e04d      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_SPECAN:
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     8e8:	68fb      	ldr	r3, [r7, #12]
     8ea:	885b      	ldrh	r3, [r3, #2]
     8ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     8f0:	d914      	bls.n	91c <usb_vendor_request_handler+0x50c>
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	885b      	ldrh	r3, [r3, #2]
     8f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     8fa:	d80f      	bhi.n	91c <usb_vendor_request_handler+0x50c>
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     8fc:	68fb      	ldr	r3, [r7, #12]
     8fe:	889b      	ldrh	r3, [r3, #4]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     904:	d90a      	bls.n	91c <usb_vendor_request_handler+0x50c>
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     906:	68fb      	ldr	r3, [r7, #12]
     908:	889b      	ldrh	r3, [r3, #4]
     90a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
     90e:	d805      	bhi.n	91c <usb_vendor_request_handler+0x50c>
				pSetup->wIndex < pSetup->wValue)
     910:	68fb      	ldr	r3, [r7, #12]
     912:	889a      	ldrh	r2, [r3, #4]
     914:	68fb      	ldr	r3, [r7, #12]
     916:	885b      	ldrh	r3, [r3, #2]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     918:	429a      	cmp	r2, r3
     91a:	d201      	bcs.n	920 <usb_vendor_request_handler+0x510>
				pSetup->wIndex < pSetup->wValue)
			return FALSE;
     91c:	2300      	movs	r3, #0
     91e:	e032      	b.n	986 <usb_vendor_request_handler+0x576>
		low_freq = pSetup->wValue;
     920:	68fb      	ldr	r3, [r7, #12]
     922:	885a      	ldrh	r2, [r3, #2]
     924:	4b24      	ldr	r3, [pc, #144]	; (9b8 <usb_vendor_request_handler+0x5a8>)
     926:	801a      	strh	r2, [r3, #0]
		high_freq = pSetup->wIndex;
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	889a      	ldrh	r2, [r3, #4]
     92c:	4b23      	ldr	r3, [pc, #140]	; (9bc <usb_vendor_request_handler+0x5ac>)
     92e:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
     930:	4b1a      	ldr	r3, [pc, #104]	; (99c <usb_vendor_request_handler+0x58c>)
     932:	2204      	movs	r2, #4
     934:	601a      	str	r2, [r3, #0]
		*piLen = 0;
     936:	68bb      	ldr	r3, [r7, #8]
     938:	2200      	movs	r2, #0
     93a:	601a      	str	r2, [r3, #0]
		break;
     93c:	e022      	b.n	984 <usb_vendor_request_handler+0x574>

	case UBERTOOTH_GET_REV_NUM:
		pbData[0] = 0x00;
     93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     940:	2200      	movs	r2, #0
     942:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0x00;
     944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     946:	3301      	adds	r3, #1
     948:	2200      	movs	r2, #0
     94a:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
     94c:	481c      	ldr	r0, [pc, #112]	; (9c0 <usb_vendor_request_handler+0x5b0>)
     94e:	f002 fcd3 	bl	32f8 <strlen>
     952:	4603      	mov	r3, r0
     954:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		pbData[2] = length;
     958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     95a:	3302      	adds	r3, #2
     95c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
     960:	701a      	strb	r2, [r3, #0]

		memcpy(&pbData[3], GIT_REVISION, length);
     962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     964:	1cda      	adds	r2, r3, #3
     966:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
     96a:	4610      	mov	r0, r2
     96c:	4914      	ldr	r1, [pc, #80]	; (9c0 <usb_vendor_request_handler+0x5b0>)
     96e:	461a      	mov	r2, r3
     970:	f002 fc4c 	bl	320c <memcpy>

		*piLen = 2 + 1 + length;
     974:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
     978:	1cda      	adds	r2, r3, #3
     97a:	68bb      	ldr	r3, [r7, #8]
     97c:	601a      	str	r2, [r3, #0]
		break;
     97e:	e001      	b.n	984 <usb_vendor_request_handler+0x574>

	default:
		return FALSE;
     980:	2300      	movs	r3, #0
     982:	e000      	b.n	986 <usb_vendor_request_handler+0x576>
	}
	return TRUE;
     984:	2301      	movs	r3, #1
}
     986:	4618      	mov	r0, r3
     988:	3740      	adds	r7, #64	; 0x40
     98a:	46bd      	mov	sp, r7
     98c:	bd80      	pop	{r7, pc}
     98e:	bf00      	nop
     990:	2009c054 	.word	0x2009c054
     994:	2009c058 	.word	0x2009c058
     998:	2009c05c 	.word	0x2009c05c
     99c:	10000524 	.word	0x10000524
     9a0:	10002644 	.word	0x10002644
     9a4:	10000528 	.word	0x10000528
     9a8:	10000454 	.word	0x10000454
     9ac:	10000448 	.word	0x10000448
     9b0:	1000001c 	.word	0x1000001c
     9b4:	4305bb21 	.word	0x4305bb21
     9b8:	10000456 	.word	0x10000456
     9bc:	10000458 	.word	0x10000458
     9c0:	0000341c 	.word	0x0000341c

000009c4 <ubertooth_usb_init>:

int ubertooth_usb_init()
{
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0
	// initialise stack
	USBInit();
     9c8:	f001 fdd6 	bl	2578 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
     9cc:	4806      	ldr	r0, [pc, #24]	; (9e8 <ubertooth_usb_init+0x24>)
     9ce:	f002 f9f9 	bl	2dc4 <USBRegisterDescriptors>

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
     9d2:	2002      	movs	r0, #2
     9d4:	4905      	ldr	r1, [pc, #20]	; (9ec <ubertooth_usb_init+0x28>)
     9d6:	4a06      	ldr	r2, [pc, #24]	; (9f0 <ubertooth_usb_init+0x2c>)
     9d8:	f001 fdaa 	bl	2530 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 |= ISER0_ISE_USB;
	
	// connect to bus
	USBHwConnect(TRUE);
     9dc:	2001      	movs	r0, #1
     9de:	f001 ff0d 	bl	27fc <USBHwConnect>

	return 0;
     9e2:	2300      	movs	r3, #0
}
     9e4:	4618      	mov	r0, r3
     9e6:	bd80      	pop	{r7, pc}
     9e8:	0000335c 	.word	0x0000335c
     9ec:	00000411 	.word	0x00000411
     9f0:	1000053c 	.word	0x1000053c

000009f4 <clkn_init>:

static void clkn_init()
{
     9f4:	b480      	push	{r7}
     9f6:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set to
	 * cclk/2 (50 MHz) by clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
     9f8:	4b0d      	ldr	r3, [pc, #52]	; (a30 <clkn_init+0x3c>)
     9fa:	2202      	movs	r2, #2
     9fc:	601a      	str	r2, [r3, #0]
	clkn_high = 0;
     9fe:	4b0d      	ldr	r3, [pc, #52]	; (a34 <clkn_init+0x40>)
     a00:	2200      	movs	r2, #0
     a02:	701a      	strb	r2, [r3, #0]
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods makes one
	 * CLK100NS period (100ns).  CLK100NS resets every 2^15 * 10^5 (3276800000)
	 * steps, roughly 5.5 minutes.
	 */
	T0PR = 4;
     a04:	4b0c      	ldr	r3, [pc, #48]	; (a38 <clkn_init+0x44>)
     a06:	2204      	movs	r2, #4
     a08:	601a      	str	r2, [r3, #0]
	T0MR0 = 3276799999;
     a0a:	4b0c      	ldr	r3, [pc, #48]	; (a3c <clkn_init+0x48>)
     a0c:	4a0c      	ldr	r2, [pc, #48]	; (a40 <clkn_init+0x4c>)
     a0e:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
     a10:	4b0c      	ldr	r3, [pc, #48]	; (a44 <clkn_init+0x50>)
     a12:	2203      	movs	r2, #3
     a14:	601a      	str	r2, [r3, #0]
	ISER0 |= ISER0_ISE_TIMER0;
     a16:	4a0c      	ldr	r2, [pc, #48]	; (a48 <clkn_init+0x54>)
     a18:	4b0b      	ldr	r3, [pc, #44]	; (a48 <clkn_init+0x54>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	f043 0302 	orr.w	r3, r3, #2
     a20:	6013      	str	r3, [r2, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
     a22:	4b03      	ldr	r3, [pc, #12]	; (a30 <clkn_init+0x3c>)
     a24:	2201      	movs	r2, #1
     a26:	601a      	str	r2, [r3, #0]
}
     a28:	46bd      	mov	sp, r7
     a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
     a2e:	4770      	bx	lr
     a30:	40004004 	.word	0x40004004
     a34:	100005fc 	.word	0x100005fc
     a38:	4000400c 	.word	0x4000400c
     a3c:	40004018 	.word	0x40004018
     a40:	c34fffff 	.word	0xc34fffff
     a44:	40004014 	.word	0x40004014
     a48:	e000e100 	.word	0xe000e100

00000a4c <TIMER0_IRQHandler>:

/* clkn_high is incremented each time CLK100NS rolls over */
void TIMER0_IRQHandler()
{
     a4c:	b480      	push	{r7}
     a4e:	af00      	add	r7, sp, #0
	if (T0IR & TIR_MR0_Interrupt) {
     a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	f003 0301 	and.w	r3, r3, #1
     a5a:	2b00      	cmp	r3, #0
     a5c:	d00e      	beq.n	a7c <TIMER0_IRQHandler+0x30>
		++clkn_high;
     a5e:	4b09      	ldr	r3, [pc, #36]	; (a84 <TIMER0_IRQHandler+0x38>)
     a60:	781b      	ldrb	r3, [r3, #0]
     a62:	b2db      	uxtb	r3, r3
     a64:	3301      	adds	r3, #1
     a66:	b2da      	uxtb	r2, r3
     a68:	4b06      	ldr	r3, [pc, #24]	; (a84 <TIMER0_IRQHandler+0x38>)
     a6a:	701a      	strb	r2, [r3, #0]
		T0IR |= TIR_MR0_Interrupt;
     a6c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	f043 0301 	orr.w	r3, r3, #1
     a7a:	6013      	str	r3, [r2, #0]
	}
}
     a7c:	46bd      	mov	sp, r7
     a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
     a82:	4770      	bx	lr
     a84:	100005fc 	.word	0x100005fc

00000a88 <dma_init>:

static void dma_init()
{
     a88:	b480      	push	{r7}
     a8a:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     a8c:	4a34      	ldr	r2, [pc, #208]	; (b60 <dma_init+0xd8>)
     a8e:	4b34      	ldr	r3, [pc, #208]	; (b60 <dma_init+0xd8>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     a96:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
     a98:	4b32      	ldr	r3, [pc, #200]	; (b64 <dma_init+0xdc>)
     a9a:	2200      	movs	r2, #0
     a9c:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
     a9e:	4b32      	ldr	r3, [pc, #200]	; (b68 <dma_init+0xe0>)
     aa0:	2200      	movs	r2, #0
     aa2:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
     aa4:	4b31      	ldr	r3, [pc, #196]	; (b6c <dma_init+0xe4>)
     aa6:	2200      	movs	r2, #0
     aa8:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
     aaa:	4b31      	ldr	r3, [pc, #196]	; (b70 <dma_init+0xe8>)
     aac:	2200      	movs	r2, #0
     aae:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
     ab0:	4b30      	ldr	r3, [pc, #192]	; (b74 <dma_init+0xec>)
     ab2:	2200      	movs	r2, #0
     ab4:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
     ab6:	4b30      	ldr	r3, [pc, #192]	; (b78 <dma_init+0xf0>)
     ab8:	2200      	movs	r2, #0
     aba:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
     abc:	4b2f      	ldr	r3, [pc, #188]	; (b7c <dma_init+0xf4>)
     abe:	2200      	movs	r2, #0
     ac0:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
     ac2:	4b2f      	ldr	r3, [pc, #188]	; (b80 <dma_init+0xf8>)
     ac4:	2200      	movs	r2, #0
     ac6:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
     ac8:	4b2e      	ldr	r3, [pc, #184]	; (b84 <dma_init+0xfc>)
     aca:	22ff      	movs	r2, #255	; 0xff
     acc:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
     ace:	4b2e      	ldr	r3, [pc, #184]	; (b88 <dma_init+0x100>)
     ad0:	22ff      	movs	r2, #255	; 0xff
     ad2:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     ad4:	4b2d      	ldr	r3, [pc, #180]	; (b8c <dma_init+0x104>)
     ad6:	4a2e      	ldr	r2, [pc, #184]	; (b90 <dma_init+0x108>)
     ad8:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
     ada:	4a2e      	ldr	r2, [pc, #184]	; (b94 <dma_init+0x10c>)
     adc:	4b2b      	ldr	r3, [pc, #172]	; (b8c <dma_init+0x104>)
     ade:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
     ae0:	4a2d      	ldr	r2, [pc, #180]	; (b98 <dma_init+0x110>)
     ae2:	4b2a      	ldr	r3, [pc, #168]	; (b8c <dma_init+0x104>)
     ae4:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
     ae6:	4b29      	ldr	r3, [pc, #164]	; (b8c <dma_init+0x104>)
     ae8:	4a2c      	ldr	r2, [pc, #176]	; (b9c <dma_init+0x114>)
     aea:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
     aec:	4b2a      	ldr	r3, [pc, #168]	; (b98 <dma_init+0x110>)
     aee:	4a28      	ldr	r2, [pc, #160]	; (b90 <dma_init+0x108>)
     af0:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
     af2:	4a2b      	ldr	r2, [pc, #172]	; (ba0 <dma_init+0x118>)
     af4:	4b28      	ldr	r3, [pc, #160]	; (b98 <dma_init+0x110>)
     af6:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
     af8:	4a24      	ldr	r2, [pc, #144]	; (b8c <dma_init+0x104>)
     afa:	4b27      	ldr	r3, [pc, #156]	; (b98 <dma_init+0x110>)
     afc:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
     afe:	4b26      	ldr	r3, [pc, #152]	; (b98 <dma_init+0x110>)
     b00:	4a26      	ldr	r2, [pc, #152]	; (b9c <dma_init+0x114>)
     b02:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ISER0 &= ~ISER0_ISE_DMA;
     b04:	4a27      	ldr	r2, [pc, #156]	; (ba4 <dma_init+0x11c>)
     b06:	4b27      	ldr	r3, [pc, #156]	; (ba4 <dma_init+0x11c>)
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
     b0e:	6013      	str	r3, [r2, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
     b10:	4b25      	ldr	r3, [pc, #148]	; (ba8 <dma_init+0x120>)
     b12:	2201      	movs	r2, #1
     b14:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
     b16:	bf00      	nop
     b18:	4b23      	ldr	r3, [pc, #140]	; (ba8 <dma_init+0x120>)
     b1a:	681b      	ldr	r3, [r3, #0]
     b1c:	f003 0301 	and.w	r3, r3, #1
     b20:	2b00      	cmp	r3, #0
     b22:	d0f9      	beq.n	b18 <dma_init+0x90>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
     b24:	4a21      	ldr	r2, [pc, #132]	; (bac <dma_init+0x124>)
     b26:	4b19      	ldr	r3, [pc, #100]	; (b8c <dma_init+0x104>)
     b28:	681b      	ldr	r3, [r3, #0]
     b2a:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
     b2c:	4a20      	ldr	r2, [pc, #128]	; (bb0 <dma_init+0x128>)
     b2e:	4b17      	ldr	r3, [pc, #92]	; (b8c <dma_init+0x104>)
     b30:	685b      	ldr	r3, [r3, #4]
     b32:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
     b34:	4a1f      	ldr	r2, [pc, #124]	; (bb4 <dma_init+0x12c>)
     b36:	4b15      	ldr	r3, [pc, #84]	; (b8c <dma_init+0x104>)
     b38:	689b      	ldr	r3, [r3, #8]
     b3a:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
     b3c:	4a1e      	ldr	r2, [pc, #120]	; (bb8 <dma_init+0x130>)
     b3e:	4b13      	ldr	r3, [pc, #76]	; (b8c <dma_init+0x104>)
     b40:	68db      	ldr	r3, [r3, #12]
     b42:	6013      	str	r3, [r2, #0]
	DMACC0Config =
     b44:	4b07      	ldr	r3, [pc, #28]	; (b64 <dma_init+0xdc>)
     b46:	f24d 0206 	movw	r2, #53254	; 0xd006
     b4a:	601a      	str	r2, [r3, #0]
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	/* reset interrupt counters */
	rx_tc = 0;
     b4c:	4b1b      	ldr	r3, [pc, #108]	; (bbc <dma_init+0x134>)
     b4e:	2200      	movs	r2, #0
     b50:	601a      	str	r2, [r3, #0]
	rx_err = 0;
     b52:	4b1b      	ldr	r3, [pc, #108]	; (bc0 <dma_init+0x138>)
     b54:	2200      	movs	r2, #0
     b56:	601a      	str	r2, [r3, #0]
}
     b58:	46bd      	mov	sp, r7
     b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     b5e:	4770      	bx	lr
     b60:	400fc0c4 	.word	0x400fc0c4
     b64:	50004110 	.word	0x50004110
     b68:	50004130 	.word	0x50004130
     b6c:	50004150 	.word	0x50004150
     b70:	50004170 	.word	0x50004170
     b74:	50004190 	.word	0x50004190
     b78:	500041b0 	.word	0x500041b0
     b7c:	500041d0 	.word	0x500041d0
     b80:	500041f0 	.word	0x500041f0
     b84:	50004008 	.word	0x50004008
     b88:	50004010 	.word	0x50004010
     b8c:	10002634 	.word	0x10002634
     b90:	40030008 	.word	0x40030008
     b94:	1000264c 	.word	0x1000264c
     b98:	100005ec 	.word	0x100005ec
     b9c:	88009032 	.word	0x88009032
     ba0:	10002600 	.word	0x10002600
     ba4:	e000e100 	.word	0xe000e100
     ba8:	50004030 	.word	0x50004030
     bac:	50004100 	.word	0x50004100
     bb0:	50004104 	.word	0x50004104
     bb4:	50004108 	.word	0x50004108
     bb8:	5000410c 	.word	0x5000410c
     bbc:	100005e8 	.word	0x100005e8
     bc0:	10002680 	.word	0x10002680

00000bc4 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
     bc4:	b480      	push	{r7}
     bc6:	af00      	add	r7, sp, #0
	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
     bc8:	4b15      	ldr	r3, [pc, #84]	; (c20 <DMA_IRQHandler+0x5c>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	f003 0301 	and.w	r3, r3, #1
     bd0:	2b00      	cmp	r3, #0
     bd2:	d021      	beq.n	c18 <DMA_IRQHandler+0x54>
		if (DMACIntTCStat & (1 << 0)) {
     bd4:	4b13      	ldr	r3, [pc, #76]	; (c24 <DMA_IRQHandler+0x60>)
     bd6:	681b      	ldr	r3, [r3, #0]
     bd8:	f003 0301 	and.w	r3, r3, #1
     bdc:	2b00      	cmp	r3, #0
     bde:	d00a      	beq.n	bf6 <DMA_IRQHandler+0x32>
			DMACIntTCClear |= (1 << 0);
     be0:	4a11      	ldr	r2, [pc, #68]	; (c28 <DMA_IRQHandler+0x64>)
     be2:	4b11      	ldr	r3, [pc, #68]	; (c28 <DMA_IRQHandler+0x64>)
     be4:	681b      	ldr	r3, [r3, #0]
     be6:	f043 0301 	orr.w	r3, r3, #1
     bea:	6013      	str	r3, [r2, #0]
			++rx_tc;
     bec:	4b0f      	ldr	r3, [pc, #60]	; (c2c <DMA_IRQHandler+0x68>)
     bee:	681b      	ldr	r3, [r3, #0]
     bf0:	3301      	adds	r3, #1
     bf2:	4a0e      	ldr	r2, [pc, #56]	; (c2c <DMA_IRQHandler+0x68>)
     bf4:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <DMA_IRQHandler+0x6c>)
     bf8:	681b      	ldr	r3, [r3, #0]
     bfa:	f003 0301 	and.w	r3, r3, #1
     bfe:	2b00      	cmp	r3, #0
     c00:	d00a      	beq.n	c18 <DMA_IRQHandler+0x54>
			DMACIntErrClr |= (1 << 0);
     c02:	4a0c      	ldr	r2, [pc, #48]	; (c34 <DMA_IRQHandler+0x70>)
     c04:	4b0b      	ldr	r3, [pc, #44]	; (c34 <DMA_IRQHandler+0x70>)
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	f043 0301 	orr.w	r3, r3, #1
     c0c:	6013      	str	r3, [r2, #0]
			++rx_err;
     c0e:	4b0a      	ldr	r3, [pc, #40]	; (c38 <DMA_IRQHandler+0x74>)
     c10:	681b      	ldr	r3, [r3, #0]
     c12:	3301      	adds	r3, #1
     c14:	4a08      	ldr	r2, [pc, #32]	; (c38 <DMA_IRQHandler+0x74>)
     c16:	6013      	str	r3, [r2, #0]
		}
	}
}
     c18:	46bd      	mov	sp, r7
     c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c1e:	4770      	bx	lr
     c20:	50004000 	.word	0x50004000
     c24:	50004004 	.word	0x50004004
     c28:	50004008 	.word	0x50004008
     c2c:	100005e8 	.word	0x100005e8
     c30:	5000400c 	.word	0x5000400c
     c34:	50004010 	.word	0x50004010
     c38:	10002680 	.word	0x10002680

00000c3c <dio_ssp_start>:

static void dio_ssp_start()
{
     c3c:	b480      	push	{r7}
     c3e:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
     c40:	4b11      	ldr	r3, [pc, #68]	; (c88 <dio_ssp_start+0x4c>)
     c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     c46:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
     c48:	4a10      	ldr	r2, [pc, #64]	; (c8c <dio_ssp_start+0x50>)
     c4a:	4b10      	ldr	r3, [pc, #64]	; (c8c <dio_ssp_start+0x50>)
     c4c:	681b      	ldr	r3, [r3, #0]
     c4e:	f043 0301 	orr.w	r3, r3, #1
     c52:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
     c54:	4a0e      	ldr	r2, [pc, #56]	; (c90 <dio_ssp_start+0x54>)
     c56:	4b0e      	ldr	r3, [pc, #56]	; (c90 <dio_ssp_start+0x54>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	f043 0302 	orr.w	r3, r3, #2
     c5e:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
     c60:	4a0c      	ldr	r2, [pc, #48]	; (c94 <dio_ssp_start+0x58>)
     c62:	4b0c      	ldr	r3, [pc, #48]	; (c94 <dio_ssp_start+0x58>)
     c64:	681b      	ldr	r3, [r3, #0]
     c66:	f043 0301 	orr.w	r3, r3, #1
     c6a:	6013      	str	r3, [r2, #0]
	ISER0 |= ISER0_ISE_DMA;
     c6c:	4a0a      	ldr	r2, [pc, #40]	; (c98 <dio_ssp_start+0x5c>)
     c6e:	4b0a      	ldr	r3, [pc, #40]	; (c98 <dio_ssp_start+0x5c>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     c76:	6013      	str	r3, [r2, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
     c78:	4b08      	ldr	r3, [pc, #32]	; (c9c <dio_ssp_start+0x60>)
     c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     c7e:	601a      	str	r2, [r3, #0]
}
     c80:	46bd      	mov	sp, r7
     c82:	f85d 7b04 	ldr.w	r7, [sp], #4
     c86:	4770      	bx	lr
     c88:	2009c098 	.word	0x2009c098
     c8c:	40030024 	.word	0x40030024
     c90:	40030004 	.word	0x40030004
     c94:	50004110 	.word	0x50004110
     c98:	e000e100 	.word	0xe000e100
     c9c:	2009c09c 	.word	0x2009c09c

00000ca0 <cc2400_rx>:

/* start un-buffered rx */
void cc2400_rx()
{
     ca0:	b580      	push	{r7, lr}
     ca2:	af00      	add	r7, sp, #0
	if (modulation == MOD_BT_BASIC_RATE) {
     ca4:	4b35      	ldr	r3, [pc, #212]	; (d7c <cc2400_rx+0xdc>)
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	2b00      	cmp	r3, #0
     caa:	d121      	bne.n	cf0 <cc2400_rx+0x50>
		cc2400_set(MANAND,  0x7fff);
     cac:	200d      	movs	r0, #13
     cae:	f647 71ff 	movw	r1, #32767	; 0x7fff
     cb2:	f001 f9a5 	bl	2000 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     cb6:	2012      	movs	r0, #18
     cb8:	f642 3122 	movw	r1, #11042	; 0x2b22
     cbc:	f001 f9a0 	bl	2000 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     cc0:	2014      	movs	r0, #20
     cc2:	f241 314b 	movw	r1, #4939	; 0x134b
     cc6:	f001 f99b 	bl	2000 <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     cca:	2020      	movs	r0, #32
     ccc:	f240 1101 	movw	r1, #257	; 0x101
     cd0:	f001 f996 	bl	2000 <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     cd4:	4b2a      	ldr	r3, [pc, #168]	; (d80 <cc2400_rx+0xe0>)
     cd6:	881b      	ldrh	r3, [r3, #0]
     cd8:	b29b      	uxth	r3, r3
     cda:	3b01      	subs	r3, #1
     cdc:	b29b      	uxth	r3, r3
     cde:	2002      	movs	r0, #2
     ce0:	4619      	mov	r1, r3
     ce2:	f001 f98d 	bl	2000 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     ce6:	2003      	movs	r0, #3
     ce8:	2129      	movs	r1, #41	; 0x29
     cea:	f001 f989 	bl	2000 <cc2400_set>
     cee:	e026      	b.n	d3e <cc2400_rx+0x9e>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     cf0:	4b22      	ldr	r3, [pc, #136]	; (d7c <cc2400_rx+0xdc>)
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	2b01      	cmp	r3, #1
     cf6:	d121      	bne.n	d3c <cc2400_rx+0x9c>
		cc2400_set(MANAND,  0x7fff);
     cf8:	200d      	movs	r0, #13
     cfa:	f647 71ff 	movw	r1, #32767	; 0x7fff
     cfe:	f001 f97f 	bl	2000 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     d02:	2012      	movs	r0, #18
     d04:	f642 3122 	movw	r1, #11042	; 0x2b22
     d08:	f001 f97a 	bl	2000 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     d0c:	2014      	movs	r0, #20
     d0e:	f241 314b 	movw	r1, #4939	; 0x134b
     d12:	f001 f975 	bl	2000 <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     d16:	2020      	movs	r0, #32
     d18:	f240 1101 	movw	r1, #257	; 0x101
     d1c:	f001 f970 	bl	2000 <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     d20:	4b17      	ldr	r3, [pc, #92]	; (d80 <cc2400_rx+0xe0>)
     d22:	881b      	ldrh	r3, [r3, #0]
     d24:	b29b      	uxth	r3, r3
     d26:	3b01      	subs	r3, #1
     d28:	b29b      	uxth	r3, r3
     d2a:	2002      	movs	r0, #2
     d2c:	4619      	mov	r1, r3
     d2e:	f001 f967 	bl	2000 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     d32:	2003      	movs	r0, #3
     d34:	2140      	movs	r1, #64	; 0x40
     d36:	f001 f963 	bl	2000 <cc2400_set>
     d3a:	e000      	b.n	d3e <cc2400_rx+0x9e>
	} else {
		/* oops */
		return;
     d3c:	e01c      	b.n	d78 <cc2400_rx+0xd8>
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     d3e:	bf00      	nop
     d40:	f001 f9a0 	bl	2084 <cc2400_status>
     d44:	4603      	mov	r3, r0
     d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
     d4a:	2b00      	cmp	r3, #0
     d4c:	d0f8      	beq.n	d40 <cc2400_rx+0xa0>
	cc2400_strobe(SFSON);
     d4e:	2061      	movs	r0, #97	; 0x61
     d50:	f001 f9a2 	bl	2098 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     d54:	bf00      	nop
     d56:	f001 f995 	bl	2084 <cc2400_status>
     d5a:	4603      	mov	r3, r0
     d5c:	f003 0304 	and.w	r3, r3, #4
     d60:	2b00      	cmp	r3, #0
     d62:	d0f8      	beq.n	d56 <cc2400_rx+0xb6>
	cc2400_strobe(SRX);
     d64:	2062      	movs	r0, #98	; 0x62
     d66:	f001 f997 	bl	2098 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     d6a:	4b06      	ldr	r3, [pc, #24]	; (d84 <cc2400_rx+0xe4>)
     d6c:	2280      	movs	r2, #128	; 0x80
     d6e:	601a      	str	r2, [r3, #0]
	HGM_SET;
     d70:	4b04      	ldr	r3, [pc, #16]	; (d84 <cc2400_rx+0xe4>)
     d72:	f44f 7280 	mov.w	r2, #256	; 0x100
     d76:	601a      	str	r2, [r3, #0]
#endif
}
     d78:	bd80      	pop	{r7, pc}
     d7a:	bf00      	nop
     d7c:	10000528 	.word	0x10000528
     d80:	10000454 	.word	0x10000454
     d84:	2009c058 	.word	0x2009c058

00000d88 <cc2400_txtest>:

void cc2400_txtest()
{
     d88:	b580      	push	{r7, lr}
     d8a:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	if (modulation == MOD_BT_BASIC_RATE) {
     d8c:	4b2f      	ldr	r3, [pc, #188]	; (e4c <cc2400_txtest+0xc4>)
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	2b00      	cmp	r3, #0
     d92:	d11a      	bne.n	dca <cc2400_txtest+0x42>
		cc2400_set(MANAND,  0x7fff);
     d94:	200d      	movs	r0, #13
     d96:	f647 71ff 	movw	r1, #32767	; 0x7fff
     d9a:	f001 f931 	bl	2000 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     d9e:	2012      	movs	r0, #18
     da0:	f642 3122 	movw	r1, #11042	; 0x2b22
     da4:	f001 f92c 	bl	2000 <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     da8:	2014      	movs	r0, #20
     daa:	f243 314b 	movw	r1, #13131	; 0x334b
     dae:	f001 f927 	bl	2000 <cc2400_set>
		cc2400_set(FSDIV,   channel);
     db2:	4b27      	ldr	r3, [pc, #156]	; (e50 <cc2400_txtest+0xc8>)
     db4:	881b      	ldrh	r3, [r3, #0]
     db6:	b29b      	uxth	r3, r3
     db8:	2002      	movs	r0, #2
     dba:	4619      	mov	r1, r3
     dbc:	f001 f920 	bl	2000 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     dc0:	2003      	movs	r0, #3
     dc2:	2129      	movs	r1, #41	; 0x29
     dc4:	f001 f91c 	bl	2000 <cc2400_set>
     dc8:	e01f      	b.n	e0a <cc2400_txtest+0x82>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     dca:	4b20      	ldr	r3, [pc, #128]	; (e4c <cc2400_txtest+0xc4>)
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	2b01      	cmp	r3, #1
     dd0:	d11a      	bne.n	e08 <cc2400_txtest+0x80>
		cc2400_set(MANAND,  0x7fff);
     dd2:	200d      	movs	r0, #13
     dd4:	f647 71ff 	movw	r1, #32767	; 0x7fff
     dd8:	f001 f912 	bl	2000 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     ddc:	2012      	movs	r0, #18
     dde:	f642 3122 	movw	r1, #11042	; 0x2b22
     de2:	f001 f90d 	bl	2000 <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     de6:	2014      	movs	r0, #20
     de8:	f243 314b 	movw	r1, #13131	; 0x334b
     dec:	f001 f908 	bl	2000 <cc2400_set>
		cc2400_set(FSDIV,   channel);
     df0:	4b17      	ldr	r3, [pc, #92]	; (e50 <cc2400_txtest+0xc8>)
     df2:	881b      	ldrh	r3, [r3, #0]
     df4:	b29b      	uxth	r3, r3
     df6:	2002      	movs	r0, #2
     df8:	4619      	mov	r1, r3
     dfa:	f001 f901 	bl	2000 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     dfe:	2003      	movs	r0, #3
     e00:	2140      	movs	r1, #64	; 0x40
     e02:	f001 f8fd 	bl	2000 <cc2400_set>
     e06:	e000      	b.n	e0a <cc2400_txtest+0x82>
	} else {
		/* oops */
		return;
     e08:	e01f      	b.n	e4a <cc2400_txtest+0xc2>
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     e0a:	bf00      	nop
     e0c:	f001 f93a 	bl	2084 <cc2400_status>
     e10:	4603      	mov	r3, r0
     e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
     e16:	2b00      	cmp	r3, #0
     e18:	d0f8      	beq.n	e0c <cc2400_txtest+0x84>
	cc2400_strobe(SFSON);
     e1a:	2061      	movs	r0, #97	; 0x61
     e1c:	f001 f93c 	bl	2098 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     e20:	bf00      	nop
     e22:	f001 f92f 	bl	2084 <cc2400_status>
     e26:	4603      	mov	r3, r0
     e28:	f003 0304 	and.w	r3, r3, #4
     e2c:	2b00      	cmp	r3, #0
     e2e:	d0f8      	beq.n	e22 <cc2400_txtest+0x9a>
	TXLED_SET;
     e30:	4b08      	ldr	r3, [pc, #32]	; (e54 <cc2400_txtest+0xcc>)
     e32:	f44f 7280 	mov.w	r2, #256	; 0x100
     e36:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
     e38:	2063      	movs	r0, #99	; 0x63
     e3a:	f001 f92d 	bl	2098 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     e3e:	4b06      	ldr	r3, [pc, #24]	; (e58 <cc2400_txtest+0xd0>)
     e40:	2280      	movs	r2, #128	; 0x80
     e42:	601a      	str	r2, [r3, #0]
#endif
	mode = MODE_TX_TEST;
     e44:	4b05      	ldr	r3, [pc, #20]	; (e5c <cc2400_txtest+0xd4>)
     e46:	2203      	movs	r2, #3
     e48:	601a      	str	r2, [r3, #0]
#endif
}
     e4a:	bd80      	pop	{r7, pc}
     e4c:	10000528 	.word	0x10000528
     e50:	10000454 	.word	0x10000454
     e54:	2009c038 	.word	0x2009c038
     e58:	2009c058 	.word	0x2009c058
     e5c:	10000520 	.word	0x10000520

00000e60 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest()
{
     e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e64:	b095      	sub	sp, #84	; 0x54
     e66:	af00      	add	r7, sp, #0
     e68:	466e      	mov	r6, sp
     e6a:	607e      	str	r6, [r7, #4]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
     e6c:	2616      	movs	r6, #22
     e6e:	f887 6046 	strb.w	r6, [r7, #70]	; 0x46
	u8 pa = 0;
     e72:	2600      	movs	r6, #0
     e74:	f887 6047 	strb.w	r6, [r7, #71]	; 0x47
	u8 txbuf[len];
     e78:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
     e7c:	46b6      	mov	lr, r6
     e7e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
     e82:	f8c7 e040 	str.w	lr, [r7, #64]	; 0x40
     e86:	fa5f fa86 	uxtb.w	sl, r6
     e8a:	f04f 0b00 	mov.w	fp, #0
     e8e:	ea4f 09cb 	mov.w	r9, fp, lsl #3
     e92:	ea49 795a 	orr.w	r9, r9, sl, lsr #29
     e96:	ea4f 08ca 	mov.w	r8, sl, lsl #3
     e9a:	fa5f f886 	uxtb.w	r8, r6
     e9e:	f04f 0900 	mov.w	r9, #0
     ea2:	ea4f 05c9 	mov.w	r5, r9, lsl #3
     ea6:	ea45 7558 	orr.w	r5, r5, r8, lsr #29
     eaa:	ea4f 04c8 	mov.w	r4, r8, lsl #3
     eae:	4634      	mov	r4, r6
     eb0:	3407      	adds	r4, #7
     eb2:	08e4      	lsrs	r4, r4, #3
     eb4:	00e4      	lsls	r4, r4, #3
     eb6:	ebad 0d04 	sub.w	sp, sp, r4
     eba:	466c      	mov	r4, sp
     ebc:	3400      	adds	r4, #0
     ebe:	63fc      	str	r4, [r7, #60]	; 0x3c
	u8 rxbuf[len];
     ec0:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
     ec4:	4634      	mov	r4, r6
     ec6:	3c01      	subs	r4, #1
     ec8:	63bc      	str	r4, [r7, #56]	; 0x38
     eca:	b2f4      	uxtb	r4, r6
     ecc:	f04f 0500 	mov.w	r5, #0
     ed0:	00e9      	lsls	r1, r5, #3
     ed2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
     ed6:	00e0      	lsls	r0, r4, #3
     ed8:	b2f0      	uxtb	r0, r6
     eda:	f04f 0100 	mov.w	r1, #0
     ede:	00cb      	lsls	r3, r1, #3
     ee0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     ee4:	00c2      	lsls	r2, r0, #3
     ee6:	4633      	mov	r3, r6
     ee8:	3307      	adds	r3, #7
     eea:	08db      	lsrs	r3, r3, #3
     eec:	00db      	lsls	r3, r3, #3
     eee:	ebad 0d03 	sub.w	sp, sp, r3
     ef2:	466b      	mov	r3, sp
     ef4:	3300      	adds	r3, #0
     ef6:	637b      	str	r3, [r7, #52]	; 0x34

	mode = MODE_RANGE_TEST;
     ef8:	4bba      	ldr	r3, [pc, #744]	; (11e4 <cc2400_rangetest+0x384>)
     efa:	2205      	movs	r2, #5
     efc:	601a      	str	r2, [r3, #0]

	txbuf[0] = len - 1; // length of data (rest of payload)
     efe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
     f02:	3b01      	subs	r3, #1
     f04:	b2da      	uxtb	r2, r3
     f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f08:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
     f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f0c:	2200      	movs	r2, #0
     f0e:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
     f10:	233a      	movs	r3, #58	; 0x3a
     f12:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
     f14:	4bb4      	ldr	r3, [pc, #720]	; (11e8 <cc2400_rangetest+0x388>)
     f16:	681b      	ldr	r3, [r3, #0]
     f18:	f107 0120 	add.w	r1, r7, #32
     f1c:	f107 020c 	add.w	r2, r7, #12
     f20:	4608      	mov	r0, r1
     f22:	4611      	mov	r1, r2
     f24:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
     f26:	68fb      	ldr	r3, [r7, #12]
     f28:	b2db      	uxtb	r3, r3
     f2a:	2b00      	cmp	r3, #0
     f2c:	d001      	beq.n	f32 <cc2400_rangetest+0xd2>
     f2e:	2300      	movs	r3, #0
		return;
     f30:	e1b7      	b.n	12a2 <cc2400_rangetest+0x442>
	txbuf[2] = (result[1] >> 24) & 0xFF;
     f32:	693b      	ldr	r3, [r7, #16]
     f34:	0e1b      	lsrs	r3, r3, #24
     f36:	b2da      	uxtb	r2, r3
     f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f3a:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
     f3c:	693b      	ldr	r3, [r7, #16]
     f3e:	0c1b      	lsrs	r3, r3, #16
     f40:	b2da      	uxtb	r2, r3
     f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f44:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
     f46:	693b      	ldr	r3, [r7, #16]
     f48:	0a1b      	lsrs	r3, r3, #8
     f4a:	b2da      	uxtb	r2, r3
     f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f4e:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
     f50:	693b      	ldr	r3, [r7, #16]
     f52:	b2da      	uxtb	r2, r3
     f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f56:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
     f58:	697b      	ldr	r3, [r7, #20]
     f5a:	0e1b      	lsrs	r3, r3, #24
     f5c:	b2da      	uxtb	r2, r3
     f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f60:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
     f62:	697b      	ldr	r3, [r7, #20]
     f64:	0c1b      	lsrs	r3, r3, #16
     f66:	b2da      	uxtb	r2, r3
     f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f6a:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
     f6c:	697b      	ldr	r3, [r7, #20]
     f6e:	0a1b      	lsrs	r3, r3, #8
     f70:	b2da      	uxtb	r2, r3
     f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f74:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
     f76:	697b      	ldr	r3, [r7, #20]
     f78:	b2da      	uxtb	r2, r3
     f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f7c:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
     f7e:	69bb      	ldr	r3, [r7, #24]
     f80:	0e1b      	lsrs	r3, r3, #24
     f82:	b2da      	uxtb	r2, r3
     f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f86:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
     f88:	69bb      	ldr	r3, [r7, #24]
     f8a:	0c1b      	lsrs	r3, r3, #16
     f8c:	b2da      	uxtb	r2, r3
     f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f90:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
     f92:	69bb      	ldr	r3, [r7, #24]
     f94:	0a1b      	lsrs	r3, r3, #8
     f96:	b2da      	uxtb	r2, r3
     f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f9a:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
     f9c:	69bb      	ldr	r3, [r7, #24]
     f9e:	b2da      	uxtb	r2, r3
     fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fa2:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
     fa4:	69fb      	ldr	r3, [r7, #28]
     fa6:	0e1b      	lsrs	r3, r3, #24
     fa8:	b2da      	uxtb	r2, r3
     faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fac:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
     fae:	69fb      	ldr	r3, [r7, #28]
     fb0:	0c1b      	lsrs	r3, r3, #16
     fb2:	b2da      	uxtb	r2, r3
     fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fb6:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
     fb8:	69fb      	ldr	r3, [r7, #28]
     fba:	0a1b      	lsrs	r3, r3, #8
     fbc:	b2da      	uxtb	r2, r3
     fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fc0:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
     fc2:	69fb      	ldr	r3, [r7, #28]
     fc4:	b2da      	uxtb	r2, r3
     fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fc8:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
     fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fcc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
     fd0:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
     fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fd4:	2200      	movs	r2, #0
     fd6:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
     fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fda:	22ff      	movs	r2, #255	; 0xff
     fdc:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
     fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fe0:	22ff      	movs	r2, #255	; 0xff
     fe2:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     fe4:	200d      	movs	r0, #13
     fe6:	f647 71ff 	movw	r1, #32767	; 0x7fff
     fea:	f001 f809 	bl	2000 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
     fee:	2012      	movs	r0, #18
     ff0:	f642 3122 	movw	r1, #11042	; 0x2b22
     ff4:	f001 f804 	bl	2000 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
     ff8:	2014      	movs	r0, #20
     ffa:	f241 314b 	movw	r1, #4939	; 0x134b
     ffe:	f000 ffff 	bl	2000 <cc2400_set>
	cc2400_set(FSDIV,   channel);
    1002:	4b7a      	ldr	r3, [pc, #488]	; (11ec <cc2400_rangetest+0x38c>)
    1004:	881b      	ldrh	r3, [r3, #0]
    1006:	b29b      	uxth	r3, r3
    1008:	2002      	movs	r0, #2
    100a:	4619      	mov	r1, r3
    100c:	f000 fff8 	bl	2000 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    1010:	202d      	movs	r0, #45	; 0x2d
    1012:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    1016:	f000 fff3 	bl	2000 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    101a:	202c      	movs	r0, #44	; 0x2c
    101c:	f241 5184 	movw	r1, #5508	; 0x1584
    1020:	f000 ffee 	bl	2000 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    1024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    1028:	f043 0308 	orr.w	r3, r3, #8
    102c:	b2db      	uxtb	r3, r3
    102e:	b29b      	uxth	r3, r3
    1030:	2005      	movs	r0, #5
    1032:	4619      	mov	r1, r3
    1034:	f000 ffe4 	bl	2000 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    1038:	2003      	movs	r0, #3
    103a:	2129      	movs	r1, #41	; 0x29
    103c:	f000 ffe0 	bl	2000 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    1040:	bf00      	nop
    1042:	f001 f81f 	bl	2084 <cc2400_status>
    1046:	4603      	mov	r3, r0
    1048:	f003 0340 	and.w	r3, r3, #64	; 0x40
    104c:	2b00      	cmp	r3, #0
    104e:	d0f8      	beq.n	1042 <cc2400_rangetest+0x1e2>
	cc2400_strobe(SFSON);
    1050:	2061      	movs	r0, #97	; 0x61
    1052:	f001 f821 	bl	2098 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    1056:	bf00      	nop
    1058:	f001 f814 	bl	2084 <cc2400_status>
    105c:	4603      	mov	r3, r0
    105e:	f003 0304 	and.w	r3, r3, #4
    1062:	2b00      	cmp	r3, #0
    1064:	d0f8      	beq.n	1058 <cc2400_rangetest+0x1f8>
	TXLED_SET;
    1066:	4b62      	ldr	r3, [pc, #392]	; (11f0 <cc2400_rangetest+0x390>)
    1068:	f44f 7280 	mov.w	r2, #256	; 0x100
    106c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    106e:	4b61      	ldr	r3, [pc, #388]	; (11f4 <cc2400_rangetest+0x394>)
    1070:	2280      	movs	r2, #128	; 0x80
    1072:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    1074:	2300      	movs	r3, #0
    1076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    107a:	e03e      	b.n	10fa <cc2400_rangetest+0x29a>
		cc2400_set(FREND, 8 | pa);
    107c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    1080:	f043 0308 	orr.w	r3, r3, #8
    1084:	b2db      	uxtb	r3, r3
    1086:	b29b      	uxth	r3, r3
    1088:	2005      	movs	r0, #5
    108a:	4619      	mov	r1, r3
    108c:	f000 ffb8 	bl	2000 <cc2400_set>
		txbuf[18] = pa;
    1090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1092:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    1096:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    1098:	2300      	movs	r3, #0
    109a:	64fb      	str	r3, [r7, #76]	; 0x4c
    109c:	e025      	b.n	10ea <cc2400_rangetest+0x28a>
			txbuf[19] = i;
    109e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10a0:	b2da      	uxtb	r2, r3
    10a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10a4:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    10a6:	bf00      	nop
    10a8:	200e      	movs	r0, #14
    10aa:	f000 ff93 	bl	1fd4 <cc2400_get>
    10ae:	4603      	mov	r3, r0
    10b0:	f003 031f 	and.w	r3, r3, #31
    10b4:	2b0f      	cmp	r3, #15
    10b6:	d1f7      	bne.n	10a8 <cc2400_rangetest+0x248>
			// transmit a packet
			for (j = 0; j < len; j++)
    10b8:	2300      	movs	r3, #0
    10ba:	64bb      	str	r3, [r7, #72]	; 0x48
    10bc:	e00a      	b.n	10d4 <cc2400_rangetest+0x274>
				cc2400_set8(FIFOREG, txbuf[j]);
    10be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    10c2:	4413      	add	r3, r2
    10c4:	781b      	ldrb	r3, [r3, #0]
    10c6:	2070      	movs	r0, #112	; 0x70
    10c8:	4619      	mov	r1, r3
    10ca:	f000 ffc7 	bl	205c <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    10ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    10d0:	3301      	adds	r3, #1
    10d2:	64bb      	str	r3, [r7, #72]	; 0x48
    10d4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    10d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    10da:	429a      	cmp	r2, r3
    10dc:	dcef      	bgt.n	10be <cc2400_rangetest+0x25e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    10de:	2063      	movs	r0, #99	; 0x63
    10e0:	f000 ffda 	bl	2098 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    10e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10e6:	3301      	adds	r3, #1
    10e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    10ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10ec:	2b0f      	cmp	r3, #15
    10ee:	ddd6      	ble.n	109e <cc2400_rangetest+0x23e>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    10f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    10f4:	3301      	adds	r3, #1
    10f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    10fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    10fe:	2b07      	cmp	r3, #7
    1100:	d9bc      	bls.n	107c <cc2400_rangetest+0x21c>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    1102:	bf00      	nop
    1104:	200e      	movs	r0, #14
    1106:	f000 ff65 	bl	1fd4 <cc2400_get>
    110a:	4603      	mov	r3, r0
    110c:	f003 031f 	and.w	r3, r3, #31
    1110:	2b0f      	cmp	r3, #15
    1112:	d1f7      	bne.n	1104 <cc2400_rangetest+0x2a4>
	TXLED_CLR;
    1114:	4b38      	ldr	r3, [pc, #224]	; (11f8 <cc2400_rangetest+0x398>)
    1116:	f44f 7280 	mov.w	r2, #256	; 0x100
    111a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    111c:	2064      	movs	r0, #100	; 0x64
    111e:	f000 ffbb 	bl	2098 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    1122:	bf00      	nop
    1124:	f000 ffae 	bl	2084 <cc2400_status>
    1128:	4603      	mov	r3, r0
    112a:	f003 0304 	and.w	r3, r3, #4
    112e:	2b00      	cmp	r3, #0
    1130:	d1f8      	bne.n	1124 <cc2400_rangetest+0x2c4>
	cc2400_set(FSDIV, channel - 1);
    1132:	4b2e      	ldr	r3, [pc, #184]	; (11ec <cc2400_rangetest+0x38c>)
    1134:	881b      	ldrh	r3, [r3, #0]
    1136:	b29b      	uxth	r3, r3
    1138:	3b01      	subs	r3, #1
    113a:	b29b      	uxth	r3, r3
    113c:	2002      	movs	r0, #2
    113e:	4619      	mov	r1, r3
    1140:	f000 ff5e 	bl	2000 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    1144:	bf00      	nop
    1146:	f000 ff9d 	bl	2084 <cc2400_status>
    114a:	4603      	mov	r3, r0
    114c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1150:	2b00      	cmp	r3, #0
    1152:	d0f8      	beq.n	1146 <cc2400_rangetest+0x2e6>
	cc2400_strobe(SFSON);
    1154:	2061      	movs	r0, #97	; 0x61
    1156:	f000 ff9f 	bl	2098 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    115a:	bf00      	nop
    115c:	f000 ff92 	bl	2084 <cc2400_status>
    1160:	4603      	mov	r3, r0
    1162:	f003 0304 	and.w	r3, r3, #4
    1166:	2b00      	cmp	r3, #0
    1168:	d0f8      	beq.n	115c <cc2400_rangetest+0x2fc>
	RXLED_SET;
    116a:	4b21      	ldr	r3, [pc, #132]	; (11f0 <cc2400_rangetest+0x390>)
    116c:	2210      	movs	r2, #16
    116e:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    1170:	bf00      	nop
    1172:	200e      	movs	r0, #14
    1174:	f000 ff2e 	bl	1fd4 <cc2400_get>
    1178:	4603      	mov	r3, r0
    117a:	f003 031f 	and.w	r3, r3, #31
    117e:	2b0f      	cmp	r3, #15
    1180:	d1f7      	bne.n	1172 <cc2400_rangetest+0x312>
		cc2400_strobe(SRX);
    1182:	2062      	movs	r0, #98	; 0x62
    1184:	f000 ff88 	bl	2098 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    1188:	bf00      	nop
    118a:	f000 ff7b 	bl	2084 <cc2400_status>
    118e:	4603      	mov	r3, r0
    1190:	f003 0310 	and.w	r3, r3, #16
    1194:	2b00      	cmp	r3, #0
    1196:	d0f8      	beq.n	118a <cc2400_rangetest+0x32a>
		USRLED_SET;
    1198:	4b15      	ldr	r3, [pc, #84]	; (11f0 <cc2400_rangetest+0x390>)
    119a:	2202      	movs	r2, #2
    119c:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    119e:	2300      	movs	r3, #0
    11a0:	64bb      	str	r3, [r7, #72]	; 0x48
    11a2:	e00c      	b.n	11be <cc2400_rangetest+0x35e>
			rxbuf[j] = cc2400_get8(FIFOREG);
    11a4:	2070      	movs	r0, #112	; 0x70
    11a6:	f000 ff3f 	bl	2028 <cc2400_get8>
    11aa:	4603      	mov	r3, r0
    11ac:	4619      	mov	r1, r3
    11ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    11b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11b2:	4413      	add	r3, r2
    11b4:	460a      	mov	r2, r1
    11b6:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    11b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11ba:	3301      	adds	r3, #1
    11bc:	64bb      	str	r3, [r7, #72]	; 0x48
    11be:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    11c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11c4:	429a      	cmp	r2, r3
    11c6:	dced      	bgt.n	11a4 <cc2400_rangetest+0x344>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    11c8:	f000 ff5c 	bl	2084 <cc2400_status>
    11cc:	4603      	mov	r3, r0
    11ce:	f003 0308 	and.w	r3, r3, #8
    11d2:	2b00      	cmp	r3, #0
    11d4:	d001      	beq.n	11da <cc2400_rangetest+0x37a>
			break;
    11d6:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    11d8:	e010      	b.n	11fc <cc2400_rangetest+0x39c>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    11da:	4b07      	ldr	r3, [pc, #28]	; (11f8 <cc2400_rangetest+0x398>)
    11dc:	2202      	movs	r2, #2
    11de:	601a      	str	r2, [r3, #0]
	}
    11e0:	e7c6      	b.n	1170 <cc2400_rangetest+0x310>
    11e2:	bf00      	nop
    11e4:	10000520 	.word	0x10000520
    11e8:	10000448 	.word	0x10000448
    11ec:	10000454 	.word	0x10000454
    11f0:	2009c038 	.word	0x2009c038
    11f4:	2009c058 	.word	0x2009c058
    11f8:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    11fc:	200e      	movs	r0, #14
    11fe:	f000 fee9 	bl	1fd4 <cc2400_get>
    1202:	4603      	mov	r3, r0
    1204:	f003 031f 	and.w	r3, r3, #31
    1208:	2b0f      	cmp	r3, #15
    120a:	d1f7      	bne.n	11fc <cc2400_rangetest+0x39c>
	cc2400_strobe(SRFOFF);
    120c:	2064      	movs	r0, #100	; 0x64
    120e:	f000 ff43 	bl	2098 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    1212:	bf00      	nop
    1214:	f000 ff36 	bl	2084 <cc2400_status>
    1218:	4603      	mov	r3, r0
    121a:	f003 0304 	and.w	r3, r3, #4
    121e:	2b00      	cmp	r3, #0
    1220:	d1f8      	bne.n	1214 <cc2400_rangetest+0x3b4>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    1222:	4b23      	ldr	r3, [pc, #140]	; (12b0 <cc2400_rangetest+0x450>)
    1224:	2280      	movs	r2, #128	; 0x80
    1226:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    1228:	4b22      	ldr	r3, [pc, #136]	; (12b4 <cc2400_rangetest+0x454>)
    122a:	2210      	movs	r2, #16
    122c:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    122e:	4b22      	ldr	r3, [pc, #136]	; (12b8 <cc2400_rangetest+0x458>)
    1230:	2201      	movs	r2, #1
    1232:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    1234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1236:	7c9a      	ldrb	r2, [r3, #18]
    1238:	4b1f      	ldr	r3, [pc, #124]	; (12b8 <cc2400_rangetest+0x458>)
    123a:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    123e:	7cda      	ldrb	r2, [r3, #19]
    1240:	4b1d      	ldr	r3, [pc, #116]	; (12b8 <cc2400_rangetest+0x458>)
    1242:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    1244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1246:	7d1a      	ldrb	r2, [r3, #20]
    1248:	4b1b      	ldr	r3, [pc, #108]	; (12b8 <cc2400_rangetest+0x458>)
    124a:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    124e:	7d5a      	ldrb	r2, [r3, #21]
    1250:	4b19      	ldr	r3, [pc, #100]	; (12b8 <cc2400_rangetest+0x458>)
    1252:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    1254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1256:	2201      	movs	r2, #1
    1258:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    125a:	2300      	movs	r3, #0
    125c:	64fb      	str	r3, [r7, #76]	; 0x4c
    125e:	e00f      	b.n	1280 <cc2400_rangetest+0x420>
		if (rxbuf[i] != txbuf[i])
    1260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1264:	4413      	add	r3, r2
    1266:	781a      	ldrb	r2, [r3, #0]
    1268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    126a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    126c:	440b      	add	r3, r1
    126e:	781b      	ldrb	r3, [r3, #0]
    1270:	429a      	cmp	r2, r3
    1272:	d002      	beq.n	127a <cc2400_rangetest+0x41a>
			rr.valid = 0;
    1274:	4b10      	ldr	r3, [pc, #64]	; (12b8 <cc2400_rangetest+0x458>)
    1276:	2200      	movs	r2, #0
    1278:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    127a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    127c:	3301      	adds	r3, #1
    127e:	64fb      	str	r3, [r7, #76]	; 0x4c
    1280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1282:	2b11      	cmp	r3, #17
    1284:	ddec      	ble.n	1260 <cc2400_rangetest+0x400>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 0;

	USRLED_CLR;
    1286:	4b0b      	ldr	r3, [pc, #44]	; (12b4 <cc2400_rangetest+0x454>)
    1288:	2202      	movs	r2, #2
    128a:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    128c:	4b0b      	ldr	r3, [pc, #44]	; (12bc <cc2400_rangetest+0x45c>)
    128e:	2200      	movs	r2, #0
    1290:	601a      	str	r2, [r3, #0]
	if (requested_mode == MODE_RANGE_TEST)
    1292:	4b0b      	ldr	r3, [pc, #44]	; (12c0 <cc2400_rangetest+0x460>)
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	2b05      	cmp	r3, #5
    1298:	d102      	bne.n	12a0 <cc2400_rangetest+0x440>
		requested_mode = MODE_IDLE;
    129a:	4b09      	ldr	r3, [pc, #36]	; (12c0 <cc2400_rangetest+0x460>)
    129c:	2200      	movs	r2, #0
    129e:	601a      	str	r2, [r3, #0]
    12a0:	2301      	movs	r3, #1
    12a2:	f8d7 d004 	ldr.w	sp, [r7, #4]
    12a6:	2b01      	cmp	r3, #1
#endif
}
    12a8:	3754      	adds	r7, #84	; 0x54
    12aa:	46bd      	mov	sp, r7
    12ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12b0:	2009c05c 	.word	0x2009c05c
    12b4:	2009c03c 	.word	0x2009c03c
    12b8:	10002644 	.word	0x10002644
    12bc:	10000520 	.word	0x10000520
    12c0:	10000524 	.word	0x10000524

000012c4 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater()
{
    12c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c6:	b087      	sub	sp, #28
    12c8:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    12ca:	2416      	movs	r4, #22
    12cc:	73bc      	strb	r4, [r7, #14]
	u8 pa = 0;
    12ce:	2400      	movs	r4, #0
    12d0:	73fc      	strb	r4, [r7, #15]
	u8 buf[len];
    12d2:	7bbe      	ldrb	r6, [r7, #14]
    12d4:	4634      	mov	r4, r6
    12d6:	3c01      	subs	r4, #1
    12d8:	60bc      	str	r4, [r7, #8]
    12da:	b2f4      	uxtb	r4, r6
    12dc:	f04f 0500 	mov.w	r5, #0
    12e0:	00e9      	lsls	r1, r5, #3
    12e2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
    12e6:	00e0      	lsls	r0, r4, #3
    12e8:	b2f0      	uxtb	r0, r6
    12ea:	f04f 0100 	mov.w	r1, #0
    12ee:	00cb      	lsls	r3, r1, #3
    12f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    12f4:	00c2      	lsls	r2, r0, #3
    12f6:	4633      	mov	r3, r6
    12f8:	3307      	adds	r3, #7
    12fa:	08db      	lsrs	r3, r3, #3
    12fc:	00db      	lsls	r3, r3, #3
    12fe:	ebad 0d03 	sub.w	sp, sp, r3
    1302:	466b      	mov	r3, sp
    1304:	3300      	adds	r3, #0
    1306:	607b      	str	r3, [r7, #4]

	mode = MODE_REPEATER;
    1308:	4b89      	ldr	r3, [pc, #548]	; (1530 <cc2400_repeater+0x26c>)
    130a:	2206      	movs	r2, #6
    130c:	601a      	str	r2, [r3, #0]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(MANAND,  0x7fff);
    130e:	200d      	movs	r0, #13
    1310:	f647 71ff 	movw	r1, #32767	; 0x7fff
    1314:	f000 fe74 	bl	2000 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    1318:	2012      	movs	r0, #18
    131a:	f642 3122 	movw	r1, #11042	; 0x2b22
    131e:	f000 fe6f 	bl	2000 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    1322:	2014      	movs	r0, #20
    1324:	f241 314b 	movw	r1, #4939	; 0x134b
    1328:	f000 fe6a 	bl	2000 <cc2400_set>
		cc2400_set(FSDIV,   channel - 1);
    132c:	4b81      	ldr	r3, [pc, #516]	; (1534 <cc2400_repeater+0x270>)
    132e:	881b      	ldrh	r3, [r3, #0]
    1330:	b29b      	uxth	r3, r3
    1332:	3b01      	subs	r3, #1
    1334:	b29b      	uxth	r3, r3
    1336:	2002      	movs	r0, #2
    1338:	4619      	mov	r1, r3
    133a:	f000 fe61 	bl	2000 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    133e:	202d      	movs	r0, #45	; 0x2d
    1340:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    1344:	f000 fe5c 	bl	2000 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    1348:	202c      	movs	r0, #44	; 0x2c
    134a:	f241 5184 	movw	r1, #5508	; 0x1584
    134e:	f000 fe57 	bl	2000 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    1352:	2005      	movs	r0, #5
    1354:	2108      	movs	r1, #8
    1356:	f000 fe53 	bl	2000 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    135a:	2003      	movs	r0, #3
    135c:	2129      	movs	r1, #41	; 0x29
    135e:	f000 fe4f 	bl	2000 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    1362:	bf00      	nop
    1364:	f000 fe8e 	bl	2084 <cc2400_status>
    1368:	4603      	mov	r3, r0
    136a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    136e:	2b00      	cmp	r3, #0
    1370:	d0f8      	beq.n	1364 <cc2400_repeater+0xa0>
		cc2400_strobe(SFSON);
    1372:	2061      	movs	r0, #97	; 0x61
    1374:	f000 fe90 	bl	2098 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    1378:	bf00      	nop
    137a:	f000 fe83 	bl	2084 <cc2400_status>
    137e:	4603      	mov	r3, r0
    1380:	f003 0304 	and.w	r3, r3, #4
    1384:	2b00      	cmp	r3, #0
    1386:	d0f8      	beq.n	137a <cc2400_repeater+0xb6>
		RXLED_SET;
    1388:	4b6b      	ldr	r3, [pc, #428]	; (1538 <cc2400_repeater+0x274>)
    138a:	2210      	movs	r2, #16
    138c:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    138e:	4b6b      	ldr	r3, [pc, #428]	; (153c <cc2400_repeater+0x278>)
    1390:	f44f 7280 	mov.w	r2, #256	; 0x100
    1394:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    1396:	4b69      	ldr	r3, [pc, #420]	; (153c <cc2400_repeater+0x278>)
    1398:	2202      	movs	r2, #2
    139a:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    139c:	4b68      	ldr	r3, [pc, #416]	; (1540 <cc2400_repeater+0x27c>)
    139e:	2280      	movs	r2, #128	; 0x80
    13a0:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    13a2:	bf00      	nop
    13a4:	200e      	movs	r0, #14
    13a6:	f000 fe15 	bl	1fd4 <cc2400_get>
    13aa:	4603      	mov	r3, r0
    13ac:	f003 031f 	and.w	r3, r3, #31
    13b0:	2b0f      	cmp	r3, #15
    13b2:	d1f7      	bne.n	13a4 <cc2400_repeater+0xe0>
			USRLED_CLR;
    13b4:	4b61      	ldr	r3, [pc, #388]	; (153c <cc2400_repeater+0x278>)
    13b6:	2202      	movs	r2, #2
    13b8:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    13ba:	2062      	movs	r0, #98	; 0x62
    13bc:	f000 fe6c 	bl	2098 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    13c0:	bf00      	nop
    13c2:	f000 fe5f 	bl	2084 <cc2400_status>
    13c6:	4603      	mov	r3, r0
    13c8:	f003 0310 	and.w	r3, r3, #16
    13cc:	2b00      	cmp	r3, #0
    13ce:	d0f8      	beq.n	13c2 <cc2400_repeater+0xfe>
			USRLED_SET;
    13d0:	4b59      	ldr	r3, [pc, #356]	; (1538 <cc2400_repeater+0x274>)
    13d2:	2202      	movs	r2, #2
    13d4:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    13d6:	2300      	movs	r3, #0
    13d8:	617b      	str	r3, [r7, #20]
    13da:	e00c      	b.n	13f6 <cc2400_repeater+0x132>
				buf[i] = cc2400_get8(FIFOREG);
    13dc:	2070      	movs	r0, #112	; 0x70
    13de:	f000 fe23 	bl	2028 <cc2400_get8>
    13e2:	4603      	mov	r3, r0
    13e4:	4619      	mov	r1, r3
    13e6:	687a      	ldr	r2, [r7, #4]
    13e8:	697b      	ldr	r3, [r7, #20]
    13ea:	4413      	add	r3, r2
    13ec:	460a      	mov	r2, r1
    13ee:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    13f0:	697b      	ldr	r3, [r7, #20]
    13f2:	3301      	adds	r3, #1
    13f4:	617b      	str	r3, [r7, #20]
    13f6:	7bba      	ldrb	r2, [r7, #14]
    13f8:	697b      	ldr	r3, [r7, #20]
    13fa:	429a      	cmp	r2, r3
    13fc:	dcee      	bgt.n	13dc <cc2400_repeater+0x118>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    13fe:	f000 fe41 	bl	2084 <cc2400_status>
    1402:	4603      	mov	r3, r0
    1404:	f003 0308 	and.w	r3, r3, #8
    1408:	2b00      	cmp	r3, #0
    140a:	d003      	beq.n	1414 <cc2400_repeater+0x150>
				break;
    140c:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    140e:	4b4d      	ldr	r3, [pc, #308]	; (1544 <cc2400_repeater+0x280>)
    1410:	617b      	str	r3, [r7, #20]
    1412:	e000      	b.n	1416 <cc2400_repeater+0x152>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    1414:	e7c5      	b.n	13a2 <cc2400_repeater+0xde>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    1416:	697b      	ldr	r3, [r7, #20]
    1418:	3b01      	subs	r3, #1
    141a:	617b      	str	r3, [r7, #20]
    141c:	697b      	ldr	r3, [r7, #20]
    141e:	2b00      	cmp	r3, #0
    1420:	d1f9      	bne.n	1416 <cc2400_repeater+0x152>
		USRLED_CLR;
    1422:	4b46      	ldr	r3, [pc, #280]	; (153c <cc2400_repeater+0x278>)
    1424:	2202      	movs	r2, #2
    1426:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    1428:	4b44      	ldr	r3, [pc, #272]	; (153c <cc2400_repeater+0x278>)
    142a:	2210      	movs	r2, #16
    142c:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    142e:	2064      	movs	r0, #100	; 0x64
    1430:	f000 fe32 	bl	2098 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    1434:	bf00      	nop
    1436:	f000 fe25 	bl	2084 <cc2400_status>
    143a:	4603      	mov	r3, r0
    143c:	f003 0304 	and.w	r3, r3, #4
    1440:	2b00      	cmp	r3, #0
    1442:	d1f8      	bne.n	1436 <cc2400_repeater+0x172>
		while (!(cc2400_status() & XOSC16M_STABLE));
    1444:	bf00      	nop
    1446:	f000 fe1d 	bl	2084 <cc2400_status>
    144a:	4603      	mov	r3, r0
    144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1450:	2b00      	cmp	r3, #0
    1452:	d0f8      	beq.n	1446 <cc2400_repeater+0x182>
		cc2400_set(FSDIV, channel);
    1454:	4b37      	ldr	r3, [pc, #220]	; (1534 <cc2400_repeater+0x270>)
    1456:	881b      	ldrh	r3, [r3, #0]
    1458:	b29b      	uxth	r3, r3
    145a:	2002      	movs	r0, #2
    145c:	4619      	mov	r1, r3
    145e:	f000 fdcf 	bl	2000 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    1462:	bf00      	nop
    1464:	f000 fe0e 	bl	2084 <cc2400_status>
    1468:	4603      	mov	r3, r0
    146a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    146e:	2b00      	cmp	r3, #0
    1470:	d0f8      	beq.n	1464 <cc2400_repeater+0x1a0>
		cc2400_strobe(SFSON);
    1472:	2061      	movs	r0, #97	; 0x61
    1474:	f000 fe10 	bl	2098 <cc2400_strobe>
		TXLED_SET;
    1478:	4b2f      	ldr	r3, [pc, #188]	; (1538 <cc2400_repeater+0x274>)
    147a:	f44f 7280 	mov.w	r2, #256	; 0x100
    147e:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    1480:	7bbb      	ldrb	r3, [r7, #14]
    1482:	3b01      	subs	r3, #1
    1484:	b2da      	uxtb	r2, r3
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	2201      	movs	r2, #1
    148e:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    1490:	2300      	movs	r3, #0
    1492:	73fb      	strb	r3, [r7, #15]
    1494:	e039      	b.n	150a <cc2400_repeater+0x246>
			cc2400_set(FREND, 8 | pa);
    1496:	7bfb      	ldrb	r3, [r7, #15]
    1498:	f043 0308 	orr.w	r3, r3, #8
    149c:	b2db      	uxtb	r3, r3
    149e:	b29b      	uxth	r3, r3
    14a0:	2005      	movs	r0, #5
    14a2:	4619      	mov	r1, r3
    14a4:	f000 fdac 	bl	2000 <cc2400_set>
			buf[20] = pa;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	7bfa      	ldrb	r2, [r7, #15]
    14ac:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    14ae:	2300      	movs	r3, #0
    14b0:	617b      	str	r3, [r7, #20]
    14b2:	e024      	b.n	14fe <cc2400_repeater+0x23a>
				buf[21] = i;
    14b4:	697b      	ldr	r3, [r7, #20]
    14b6:	b2da      	uxtb	r2, r3
    14b8:	687b      	ldr	r3, [r7, #4]
    14ba:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    14bc:	bf00      	nop
    14be:	200e      	movs	r0, #14
    14c0:	f000 fd88 	bl	1fd4 <cc2400_get>
    14c4:	4603      	mov	r3, r0
    14c6:	f003 031f 	and.w	r3, r3, #31
    14ca:	2b0f      	cmp	r3, #15
    14cc:	d1f7      	bne.n	14be <cc2400_repeater+0x1fa>
					for (j = 0; j < len; j++)
    14ce:	2300      	movs	r3, #0
    14d0:	613b      	str	r3, [r7, #16]
    14d2:	e00a      	b.n	14ea <cc2400_repeater+0x226>
						cc2400_set8(FIFOREG, buf[j]);
    14d4:	687a      	ldr	r2, [r7, #4]
    14d6:	693b      	ldr	r3, [r7, #16]
    14d8:	4413      	add	r3, r2
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	2070      	movs	r0, #112	; 0x70
    14de:	4619      	mov	r1, r3
    14e0:	f000 fdbc 	bl	205c <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    14e4:	693b      	ldr	r3, [r7, #16]
    14e6:	3301      	adds	r3, #1
    14e8:	613b      	str	r3, [r7, #16]
    14ea:	7bba      	ldrb	r2, [r7, #14]
    14ec:	693b      	ldr	r3, [r7, #16]
    14ee:	429a      	cmp	r2, r3
    14f0:	dcf0      	bgt.n	14d4 <cc2400_repeater+0x210>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    14f2:	2063      	movs	r0, #99	; 0x63
    14f4:	f000 fdd0 	bl	2098 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    14f8:	697b      	ldr	r3, [r7, #20]
    14fa:	3301      	adds	r3, #1
    14fc:	617b      	str	r3, [r7, #20]
    14fe:	697b      	ldr	r3, [r7, #20]
    1500:	2b0f      	cmp	r3, #15
    1502:	ddd7      	ble.n	14b4 <cc2400_repeater+0x1f0>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    1504:	7bfb      	ldrb	r3, [r7, #15]
    1506:	3301      	adds	r3, #1
    1508:	73fb      	strb	r3, [r7, #15]
    150a:	7bfb      	ldrb	r3, [r7, #15]
    150c:	2b07      	cmp	r3, #7
    150e:	d9c2      	bls.n	1496 <cc2400_repeater+0x1d2>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    1510:	4b0a      	ldr	r3, [pc, #40]	; (153c <cc2400_repeater+0x278>)
    1512:	f44f 7280 	mov.w	r2, #256	; 0x100
    1516:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    1518:	2064      	movs	r0, #100	; 0x64
    151a:	f000 fdbd 	bl	2098 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    151e:	bf00      	nop
    1520:	f000 fdb0 	bl	2084 <cc2400_status>
    1524:	4603      	mov	r3, r0
    1526:	f003 0304 	and.w	r3, r3, #4
    152a:	2b00      	cmp	r3, #0
    152c:	d1f8      	bne.n	1520 <cc2400_repeater+0x25c>
	}
    152e:	e6ee      	b.n	130e <cc2400_repeater+0x4a>
    1530:	10000520 	.word	0x10000520
    1534:	10000454 	.word	0x10000454
    1538:	2009c038 	.word	0x2009c038
    153c:	2009c03c 	.word	0x2009c03c
    1540:	2009c058 	.word	0x2009c058
    1544:	001e8480 	.word	0x001e8480

00001548 <bt_stream_rx>:
#endif
}

void bt_stream_rx()
{
    1548:	b580      	push	{r7, lr}
    154a:	b082      	sub	sp, #8
    154c:	af00      	add	r7, sp, #0
	u8 *tmp = NULL;
    154e:	2300      	movs	r3, #0
    1550:	607b      	str	r3, [r7, #4]
	u8 epstat;
	int i;

	RXLED_SET;
    1552:	4b3f      	ldr	r3, [pc, #252]	; (1650 <bt_stream_rx+0x108>)
    1554:	2210      	movs	r2, #16
    1556:	601a      	str	r2, [r3, #0]

	queue_init();
    1558:	f7fe feaa 	bl	2b0 <queue_init>
	dio_ssp_init();
    155c:	f000 fc7e 	bl	1e5c <dio_ssp_init>
	dma_init();
    1560:	f7ff fa92 	bl	a88 <dma_init>
	dio_ssp_start();
    1564:	f7ff fb6a 	bl	c3c <dio_ssp_start>
	cc2400_rx();
    1568:	f7ff fb9a 	bl	ca0 <cc2400_rx>

	while (rx_pkts) {
    156c:	e065      	b.n	163a <bt_stream_rx+0xf2>
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
    156e:	bf00      	nop
    1570:	4b38      	ldr	r3, [pc, #224]	; (1654 <bt_stream_rx+0x10c>)
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	2b00      	cmp	r3, #0
    1576:	d103      	bne.n	1580 <bt_stream_rx+0x38>
    1578:	4b37      	ldr	r3, [pc, #220]	; (1658 <bt_stream_rx+0x110>)
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	2b00      	cmp	r3, #0
    157e:	d0f7      	beq.n	1570 <bt_stream_rx+0x28>
		if (rx_tc % 2) {
    1580:	4b34      	ldr	r3, [pc, #208]	; (1654 <bt_stream_rx+0x10c>)
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	f003 0301 	and.w	r3, r3, #1
    1588:	2b00      	cmp	r3, #0
    158a:	d009      	beq.n	15a0 <bt_stream_rx+0x58>
			/* swap buffers */
			tmp = active_rxbuf;
    158c:	4b33      	ldr	r3, [pc, #204]	; (165c <bt_stream_rx+0x114>)
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	607b      	str	r3, [r7, #4]
			active_rxbuf = idle_rxbuf;
    1592:	4b33      	ldr	r3, [pc, #204]	; (1660 <bt_stream_rx+0x118>)
    1594:	681b      	ldr	r3, [r3, #0]
    1596:	4a31      	ldr	r2, [pc, #196]	; (165c <bt_stream_rx+0x114>)
    1598:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    159a:	4a31      	ldr	r2, [pc, #196]	; (1660 <bt_stream_rx+0x118>)
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	6013      	str	r3, [r2, #0]
		}
		if (rx_err)
    15a0:	4b2d      	ldr	r3, [pc, #180]	; (1658 <bt_stream_rx+0x110>)
    15a2:	681b      	ldr	r3, [r3, #0]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d007      	beq.n	15b8 <bt_stream_rx+0x70>
			status |= DMA_ERROR;
    15a8:	4b2e      	ldr	r3, [pc, #184]	; (1664 <bt_stream_rx+0x11c>)
    15aa:	781b      	ldrb	r3, [r3, #0]
    15ac:	b2db      	uxtb	r3, r3
    15ae:	f043 0302 	orr.w	r3, r3, #2
    15b2:	b2da      	uxtb	r2, r3
    15b4:	4b2b      	ldr	r3, [pc, #172]	; (1664 <bt_stream_rx+0x11c>)
    15b6:	701a      	strb	r2, [r3, #0]
		if (rx_tc) {
    15b8:	4b26      	ldr	r3, [pc, #152]	; (1654 <bt_stream_rx+0x10c>)
    15ba:	681b      	ldr	r3, [r3, #0]
    15bc:	2b00      	cmp	r3, #0
    15be:	d021      	beq.n	1604 <bt_stream_rx+0xbc>
			if (rx_tc > 1)
    15c0:	4b24      	ldr	r3, [pc, #144]	; (1654 <bt_stream_rx+0x10c>)
    15c2:	681b      	ldr	r3, [r3, #0]
    15c4:	2b01      	cmp	r3, #1
    15c6:	d907      	bls.n	15d8 <bt_stream_rx+0x90>
				status |= DMA_OVERFLOW;
    15c8:	4b26      	ldr	r3, [pc, #152]	; (1664 <bt_stream_rx+0x11c>)
    15ca:	781b      	ldrb	r3, [r3, #0]
    15cc:	b2db      	uxtb	r3, r3
    15ce:	f043 0301 	orr.w	r3, r3, #1
    15d2:	b2da      	uxtb	r2, r3
    15d4:	4b23      	ldr	r3, [pc, #140]	; (1664 <bt_stream_rx+0x11c>)
    15d6:	701a      	strb	r2, [r3, #0]
			if (enqueue(idle_rxbuf))
    15d8:	4b21      	ldr	r3, [pc, #132]	; (1660 <bt_stream_rx+0x118>)
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	4618      	mov	r0, r3
    15de:	f7fe fe77 	bl	2d0 <enqueue>
    15e2:	4603      	mov	r3, r0
    15e4:	2b00      	cmp	r3, #0
    15e6:	d005      	beq.n	15f4 <bt_stream_rx+0xac>
				--rx_pkts;
    15e8:	4b1f      	ldr	r3, [pc, #124]	; (1668 <bt_stream_rx+0x120>)
    15ea:	681b      	ldr	r3, [r3, #0]
    15ec:	3b01      	subs	r3, #1
    15ee:	4a1e      	ldr	r2, [pc, #120]	; (1668 <bt_stream_rx+0x120>)
    15f0:	6013      	str	r3, [r2, #0]
    15f2:	e007      	b.n	1604 <bt_stream_rx+0xbc>
			else
				status |= FIFO_OVERFLOW;
    15f4:	4b1b      	ldr	r3, [pc, #108]	; (1664 <bt_stream_rx+0x11c>)
    15f6:	781b      	ldrb	r3, [r3, #0]
    15f8:	b2db      	uxtb	r3, r3
    15fa:	f043 0304 	orr.w	r3, r3, #4
    15fe:	b2da      	uxtb	r2, r3
    1600:	4b18      	ldr	r3, [pc, #96]	; (1664 <bt_stream_rx+0x11c>)
    1602:	701a      	strb	r2, [r3, #0]
		}

		/* send via USB */
		epstat = USBHwEPGetStatus(BULK_IN_EP);
    1604:	2082      	movs	r0, #130	; 0x82
    1606:	f001 f919 	bl	283c <USBHwEPGetStatus>
    160a:	4603      	mov	r3, r0
    160c:	70fb      	strb	r3, [r7, #3]
		if (!(epstat & EPSTAT_B1FULL))
    160e:	78fb      	ldrb	r3, [r7, #3]
    1610:	f003 0320 	and.w	r3, r3, #32
    1614:	2b00      	cmp	r3, #0
    1616:	d101      	bne.n	161c <bt_stream_rx+0xd4>
			dequeue();
    1618:	f7fe fec6 	bl	3a8 <dequeue>
		if (!(epstat & EPSTAT_B2FULL))
    161c:	78fb      	ldrb	r3, [r7, #3]
    161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1622:	2b00      	cmp	r3, #0
    1624:	d101      	bne.n	162a <bt_stream_rx+0xe2>
			dequeue();
    1626:	f7fe febf 	bl	3a8 <dequeue>
		USBHwISR();
    162a:	f001 fa09 	bl	2a40 <USBHwISR>

		rx_tc = 0;
    162e:	4b09      	ldr	r3, [pc, #36]	; (1654 <bt_stream_rx+0x10c>)
    1630:	2200      	movs	r2, #0
    1632:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    1634:	4b08      	ldr	r3, [pc, #32]	; (1658 <bt_stream_rx+0x110>)
    1636:	2200      	movs	r2, #0
    1638:	601a      	str	r2, [r3, #0]
	dio_ssp_init();
	dma_init();
	dio_ssp_start();
	cc2400_rx();

	while (rx_pkts) {
    163a:	4b0b      	ldr	r3, [pc, #44]	; (1668 <bt_stream_rx+0x120>)
    163c:	681b      	ldr	r3, [r3, #0]
    163e:	2b00      	cmp	r3, #0
    1640:	d195      	bne.n	156e <bt_stream_rx+0x26>

		rx_tc = 0;
		rx_err = 0;
	}
	//FIXME turn off rx
	RXLED_CLR;
    1642:	4b0a      	ldr	r3, [pc, #40]	; (166c <bt_stream_rx+0x124>)
    1644:	2210      	movs	r2, #16
    1646:	601a      	str	r2, [r3, #0]
}
    1648:	3708      	adds	r7, #8
    164a:	46bd      	mov	sp, r7
    164c:	bd80      	pop	{r7, pc}
    164e:	bf00      	nop
    1650:	2009c038 	.word	0x2009c038
    1654:	100005e8 	.word	0x100005e8
    1658:	10002680 	.word	0x10002680
    165c:	1000044c 	.word	0x1000044c
    1660:	10000450 	.word	0x10000450
    1664:	10000530 	.word	0x10000530
    1668:	1000052c 	.word	0x1000052c
    166c:	2009c03c 	.word	0x2009c03c

00001670 <specan>:

/* spectrum analysis */
void specan()
{
    1670:	b590      	push	{r4, r7, lr}
    1672:	b08f      	sub	sp, #60	; 0x3c
    1674:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    1676:	2300      	movs	r3, #0
    1678:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	u8 buf[DMA_SIZE];

	RXLED_SET;
    167c:	4b60      	ldr	r3, [pc, #384]	; (1800 <specan+0x190>)
    167e:	2210      	movs	r2, #16
    1680:	601a      	str	r2, [r3, #0]

	queue_init();
    1682:	f7fe fe15 	bl	2b0 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    1686:	4b5f      	ldr	r3, [pc, #380]	; (1804 <specan+0x194>)
    1688:	2280      	movs	r2, #128	; 0x80
    168a:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(MANAND,  0x7fff);
    168c:	200d      	movs	r0, #13
    168e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    1692:	f000 fcb5 	bl	2000 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    1696:	2012      	movs	r0, #18
    1698:	f642 3122 	movw	r1, #11042	; 0x2b22
    169c:	f000 fcb0 	bl	2000 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    16a0:	2014      	movs	r0, #20
    16a2:	f241 314b 	movw	r1, #4939	; 0x134b
    16a6:	f000 fcab 	bl	2000 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    16aa:	2020      	movs	r0, #32
    16ac:	f240 1101 	movw	r1, #257	; 0x101
    16b0:	f000 fca6 	bl	2000 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    16b4:	2003      	movs	r0, #3
    16b6:	2129      	movs	r1, #41	; 0x29
    16b8:	f000 fca2 	bl	2000 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    16bc:	bf00      	nop
    16be:	f000 fce1 	bl	2084 <cc2400_status>
    16c2:	4603      	mov	r3, r0
    16c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    16c8:	2b00      	cmp	r3, #0
    16ca:	d0f8      	beq.n	16be <specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    16cc:	bf00      	nop
    16ce:	f000 fcd9 	bl	2084 <cc2400_status>
    16d2:	4603      	mov	r3, r0
    16d4:	f003 0304 	and.w	r3, r3, #4
    16d8:	2b00      	cmp	r3, #0
    16da:	d1f8      	bne.n	16ce <specan+0x5e>

	while (requested_mode == MODE_SPECAN) {
    16dc:	e082      	b.n	17e4 <specan+0x174>
		for (f = low_freq; f < high_freq + 1; f++) {
    16de:	4b4a      	ldr	r3, [pc, #296]	; (1808 <specan+0x198>)
    16e0:	881b      	ldrh	r3, [r3, #0]
    16e2:	86fb      	strh	r3, [r7, #54]	; 0x36
    16e4:	e077      	b.n	17d6 <specan+0x166>
			cc2400_set(FSDIV, f - 1);
    16e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    16e8:	3b01      	subs	r3, #1
    16ea:	b29b      	uxth	r3, r3
    16ec:	2002      	movs	r0, #2
    16ee:	4619      	mov	r1, r3
    16f0:	f000 fc86 	bl	2000 <cc2400_set>
			cc2400_strobe(SFSON);
    16f4:	2061      	movs	r0, #97	; 0x61
    16f6:	f000 fccf 	bl	2098 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    16fa:	bf00      	nop
    16fc:	f000 fcc2 	bl	2084 <cc2400_status>
    1700:	4603      	mov	r3, r0
    1702:	f003 0304 	and.w	r3, r3, #4
    1706:	2b00      	cmp	r3, #0
    1708:	d0f8      	beq.n	16fc <specan+0x8c>
			cc2400_strobe(SRX);
    170a:	2062      	movs	r0, #98	; 0x62
    170c:	f000 fcc4 	bl	2098 <cc2400_strobe>

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    1710:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
    1714:	4613      	mov	r3, r2
    1716:	005b      	lsls	r3, r3, #1
    1718:	4413      	add	r3, r2
    171a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    171c:	0a12      	lsrs	r2, r2, #8
    171e:	b292      	uxth	r2, r2
    1720:	b2d2      	uxtb	r2, r2
    1722:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1726:	440b      	add	r3, r1
    1728:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    172c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
    1730:	4613      	mov	r3, r2
    1732:	005b      	lsls	r3, r3, #1
    1734:	4413      	add	r3, r2
    1736:	3301      	adds	r3, #1
    1738:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    173a:	b2d2      	uxtb	r2, r2
    173c:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1740:	440b      	add	r3, r1
    1742:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    1746:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
    174a:	4613      	mov	r3, r2
    174c:	005b      	lsls	r3, r3, #1
    174e:	4413      	add	r3, r2
    1750:	1c9c      	adds	r4, r3, #2
    1752:	2006      	movs	r0, #6
    1754:	f000 fc3e 	bl	1fd4 <cc2400_get>
    1758:	4603      	mov	r3, r0
    175a:	0a1b      	lsrs	r3, r3, #8
    175c:	b29b      	uxth	r3, r3
    175e:	b2da      	uxtb	r2, r3
    1760:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1764:	4423      	add	r3, r4
    1766:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    176a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    176e:	3301      	adds	r3, #1
    1770:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (i == 16) {
    1774:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    1778:	2b10      	cmp	r3, #16
    177a:	d11e      	bne.n	17ba <specan+0x14a>
				//FIXME ought to use different packet type
				enqueue(buf);
    177c:	463b      	mov	r3, r7
    177e:	4618      	mov	r0, r3
    1780:	f7fe fda6 	bl	2d0 <enqueue>
				i = 0;
    1784:	2300      	movs	r3, #0
    1786:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				/* send via USB */
				epstat = USBHwEPGetStatus(BULK_IN_EP);
    178a:	2082      	movs	r0, #130	; 0x82
    178c:	f001 f856 	bl	283c <USBHwEPGetStatus>
    1790:	4603      	mov	r3, r0
    1792:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if (!(epstat & EPSTAT_B1FULL))
    1796:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    179a:	f003 0320 	and.w	r3, r3, #32
    179e:	2b00      	cmp	r3, #0
    17a0:	d101      	bne.n	17a6 <specan+0x136>
					dequeue();
    17a2:	f7fe fe01 	bl	3a8 <dequeue>
				if (!(epstat & EPSTAT_B2FULL))
    17a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    17aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    17ae:	2b00      	cmp	r3, #0
    17b0:	d101      	bne.n	17b6 <specan+0x146>
					dequeue();
    17b2:	f7fe fdf9 	bl	3a8 <dequeue>
				USBHwISR();
    17b6:	f001 f943 	bl	2a40 <USBHwISR>
			}

			cc2400_strobe(SRFOFF);
    17ba:	2064      	movs	r0, #100	; 0x64
    17bc:	f000 fc6c 	bl	2098 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    17c0:	bf00      	nop
    17c2:	f000 fc5f 	bl	2084 <cc2400_status>
    17c6:	4603      	mov	r3, r0
    17c8:	f003 0304 	and.w	r3, r3, #4
    17cc:	2b00      	cmp	r3, #0
    17ce:	d1f8      	bne.n	17c2 <specan+0x152>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    17d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    17d2:	3301      	adds	r3, #1
    17d4:	86fb      	strh	r3, [r7, #54]	; 0x36
    17d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    17d8:	4b0c      	ldr	r3, [pc, #48]	; (180c <specan+0x19c>)
    17da:	881b      	ldrh	r3, [r3, #0]
    17dc:	b29b      	uxth	r3, r3
    17de:	3301      	adds	r3, #1
    17e0:	429a      	cmp	r2, r3
    17e2:	db80      	blt.n	16e6 <specan+0x76>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    17e4:	4b0a      	ldr	r3, [pc, #40]	; (1810 <specan+0x1a0>)
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	2b04      	cmp	r3, #4
    17ea:	f43f af78 	beq.w	16de <specan+0x6e>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    17ee:	4b09      	ldr	r3, [pc, #36]	; (1814 <specan+0x1a4>)
    17f0:	2200      	movs	r2, #0
    17f2:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    17f4:	4b08      	ldr	r3, [pc, #32]	; (1818 <specan+0x1a8>)
    17f6:	2210      	movs	r2, #16
    17f8:	601a      	str	r2, [r3, #0]
}
    17fa:	373c      	adds	r7, #60	; 0x3c
    17fc:	46bd      	mov	sp, r7
    17fe:	bd90      	pop	{r4, r7, pc}
    1800:	2009c038 	.word	0x2009c038
    1804:	2009c058 	.word	0x2009c058
    1808:	10000456 	.word	0x10000456
    180c:	10000458 	.word	0x10000458
    1810:	10000524 	.word	0x10000524
    1814:	10000520 	.word	0x10000520
    1818:	2009c03c 	.word	0x2009c03c

0000181c <find_giac>:

/* an ugly but effective way to identify a GIAC (inquiry packet) */
int find_giac(u8 *buf)
{
    181c:	b5f0      	push	{r4, r5, r6, r7, lr}
    181e:	b093      	sub	sp, #76	; 0x4c
    1820:	af00      	add	r7, sp, #0
    1822:	6078      	str	r0, [r7, #4]
	int i, j;
	const uint8_t giac[8][7] = {
    1824:	4b4f      	ldr	r3, [pc, #316]	; (1964 <find_giac+0x148>)
    1826:	461c      	mov	r4, r3
    1828:	f107 0608 	add.w	r6, r7, #8
    182c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
    1830:	4635      	mov	r5, r6
    1832:	4623      	mov	r3, r4
    1834:	6818      	ldr	r0, [r3, #0]
    1836:	6859      	ldr	r1, [r3, #4]
    1838:	689a      	ldr	r2, [r3, #8]
    183a:	68db      	ldr	r3, [r3, #12]
    183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    183e:	3410      	adds	r4, #16
    1840:	3610      	adds	r6, #16
    1842:	4574      	cmp	r4, lr
    1844:	d1f4      	bne.n	1830 <find_giac+0x14>
    1846:	4633      	mov	r3, r6
    1848:	4622      	mov	r2, r4
    184a:	6810      	ldr	r0, [r2, #0]
    184c:	6851      	ldr	r1, [r2, #4]
    184e:	c303      	stmia	r3!, {r0, r1}
			{0x75, 0xc5, 0x8c, 0xc7, 0x33, 0x45, 0xe7},
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
    1850:	2300      	movs	r3, #0
    1852:	647b      	str	r3, [r7, #68]	; 0x44
    1854:	e07c      	b.n	1950 <find_giac+0x134>
			for (j = 0; j < 8; j++)
    1856:	2300      	movs	r3, #0
    1858:	643b      	str	r3, [r7, #64]	; 0x40
    185a:	e073      	b.n	1944 <find_giac+0x128>
	        	if (buf[i] == giac[j][0]
    185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    185e:	687a      	ldr	r2, [r7, #4]
    1860:	4413      	add	r3, r2
    1862:	7819      	ldrb	r1, [r3, #0]
    1864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1866:	4613      	mov	r3, r2
    1868:	00db      	lsls	r3, r3, #3
    186a:	1a9b      	subs	r3, r3, r2
    186c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    1870:	4413      	add	r3, r2
    1872:	3b40      	subs	r3, #64	; 0x40
    1874:	781b      	ldrb	r3, [r3, #0]
    1876:	4299      	cmp	r1, r3
    1878:	d161      	bne.n	193e <find_giac+0x122>
						&& buf[i + 1] == giac[j][1]
    187a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    187c:	3301      	adds	r3, #1
    187e:	687a      	ldr	r2, [r7, #4]
    1880:	4413      	add	r3, r2
    1882:	7819      	ldrb	r1, [r3, #0]
    1884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1886:	4613      	mov	r3, r2
    1888:	00db      	lsls	r3, r3, #3
    188a:	1a9b      	subs	r3, r3, r2
    188c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    1890:	4413      	add	r3, r2
    1892:	3b3f      	subs	r3, #63	; 0x3f
    1894:	781b      	ldrb	r3, [r3, #0]
    1896:	4299      	cmp	r1, r3
    1898:	d151      	bne.n	193e <find_giac+0x122>
						&& buf[i + 2] == giac[j][2]
    189a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    189c:	3302      	adds	r3, #2
    189e:	687a      	ldr	r2, [r7, #4]
    18a0:	4413      	add	r3, r2
    18a2:	7819      	ldrb	r1, [r3, #0]
    18a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    18a6:	4613      	mov	r3, r2
    18a8:	00db      	lsls	r3, r3, #3
    18aa:	1a9b      	subs	r3, r3, r2
    18ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
    18b0:	4413      	add	r3, r2
    18b2:	3b3e      	subs	r3, #62	; 0x3e
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	4299      	cmp	r1, r3
    18b8:	d141      	bne.n	193e <find_giac+0x122>
						&& buf[i + 3] == giac[j][3]
    18ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    18bc:	3303      	adds	r3, #3
    18be:	687a      	ldr	r2, [r7, #4]
    18c0:	4413      	add	r3, r2
    18c2:	7819      	ldrb	r1, [r3, #0]
    18c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    18c6:	4613      	mov	r3, r2
    18c8:	00db      	lsls	r3, r3, #3
    18ca:	1a9b      	subs	r3, r3, r2
    18cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
    18d0:	4413      	add	r3, r2
    18d2:	3b3d      	subs	r3, #61	; 0x3d
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	4299      	cmp	r1, r3
    18d8:	d131      	bne.n	193e <find_giac+0x122>
						&& buf[i + 4] == giac[j][4]
    18da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    18dc:	3304      	adds	r3, #4
    18de:	687a      	ldr	r2, [r7, #4]
    18e0:	4413      	add	r3, r2
    18e2:	7819      	ldrb	r1, [r3, #0]
    18e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    18e6:	4613      	mov	r3, r2
    18e8:	00db      	lsls	r3, r3, #3
    18ea:	1a9b      	subs	r3, r3, r2
    18ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
    18f0:	4413      	add	r3, r2
    18f2:	3b3c      	subs	r3, #60	; 0x3c
    18f4:	781b      	ldrb	r3, [r3, #0]
    18f6:	4299      	cmp	r1, r3
    18f8:	d121      	bne.n	193e <find_giac+0x122>
						&& buf[i + 5] == giac[j][5]
    18fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    18fc:	3305      	adds	r3, #5
    18fe:	687a      	ldr	r2, [r7, #4]
    1900:	4413      	add	r3, r2
    1902:	7819      	ldrb	r1, [r3, #0]
    1904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1906:	4613      	mov	r3, r2
    1908:	00db      	lsls	r3, r3, #3
    190a:	1a9b      	subs	r3, r3, r2
    190c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    1910:	4413      	add	r3, r2
    1912:	3b3b      	subs	r3, #59	; 0x3b
    1914:	781b      	ldrb	r3, [r3, #0]
    1916:	4299      	cmp	r1, r3
    1918:	d111      	bne.n	193e <find_giac+0x122>
						&& buf[i + 6] == giac[j][6])
    191a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    191c:	3306      	adds	r3, #6
    191e:	687a      	ldr	r2, [r7, #4]
    1920:	4413      	add	r3, r2
    1922:	7819      	ldrb	r1, [r3, #0]
    1924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1926:	4613      	mov	r3, r2
    1928:	00db      	lsls	r3, r3, #3
    192a:	1a9b      	subs	r3, r3, r2
    192c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    1930:	4413      	add	r3, r2
    1932:	3b3a      	subs	r3, #58	; 0x3a
    1934:	781b      	ldrb	r3, [r3, #0]
    1936:	4299      	cmp	r1, r3
    1938:	d101      	bne.n	193e <find_giac+0x122>
					return 1;
    193a:	2301      	movs	r3, #1
    193c:	e00d      	b.n	195a <find_giac+0x13e>
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
			for (j = 0; j < 8; j++)
    193e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1940:	3301      	adds	r3, #1
    1942:	643b      	str	r3, [r7, #64]	; 0x40
    1944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1946:	2b07      	cmp	r3, #7
    1948:	dd88      	ble.n	185c <find_giac+0x40>
			{0x75, 0xc5, 0x8c, 0xc7, 0x33, 0x45, 0xe7},
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
    194a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    194c:	3301      	adds	r3, #1
    194e:	647b      	str	r3, [r7, #68]	; 0x44
    1950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1952:	2b2b      	cmp	r3, #43	; 0x2b
    1954:	f77f af7f 	ble.w	1856 <find_giac+0x3a>
						&& buf[i + 4] == giac[j][4]
						&& buf[i + 5] == giac[j][5]
						&& buf[i + 6] == giac[j][6])
					return 1;

	return 0;
    1958:	2300      	movs	r3, #0
}
    195a:	4618      	mov	r0, r3
    195c:	374c      	adds	r7, #76	; 0x4c
    195e:	46bd      	mov	sp, r7
    1960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1962:	bf00      	nop
    1964:	00003428 	.word	0x00003428

00001968 <bt_test_rx>:

void bt_test_rx()
{
    1968:	b580      	push	{r7, lr}
    196a:	b084      	sub	sp, #16
    196c:	af00      	add	r7, sp, #0
	u8 *tmp = NULL;
    196e:	2300      	movs	r3, #0
    1970:	607b      	str	r3, [r7, #4]
	int i;
	int countdown = 0;
    1972:	2300      	movs	r3, #0
    1974:	60fb      	str	r3, [r7, #12]
	int num_giacs = 0;
    1976:	2300      	movs	r3, #0
    1978:	60bb      	str	r3, [r7, #8]

	dio_ssp_init();
    197a:	f000 fa6f 	bl	1e5c <dio_ssp_init>
	dma_init();
    197e:	f7ff f883 	bl	a88 <dma_init>
	dio_ssp_start();
    1982:	f7ff f95b 	bl	c3c <dio_ssp_start>
	cc2400_rx();
    1986:	f7ff f98b 	bl	ca0 <cc2400_rx>

	while (num_giacs < 20) {
    198a:	e04e      	b.n	1a2a <bt_test_rx+0xc2>
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
    198c:	bf00      	nop
    198e:	4b2a      	ldr	r3, [pc, #168]	; (1a38 <bt_test_rx+0xd0>)
    1990:	681b      	ldr	r3, [r3, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	d103      	bne.n	199e <bt_test_rx+0x36>
    1996:	4b29      	ldr	r3, [pc, #164]	; (1a3c <bt_test_rx+0xd4>)
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	2b00      	cmp	r3, #0
    199c:	d0f7      	beq.n	198e <bt_test_rx+0x26>
		if (rx_tc % 2) {
    199e:	4b26      	ldr	r3, [pc, #152]	; (1a38 <bt_test_rx+0xd0>)
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	f003 0301 	and.w	r3, r3, #1
    19a6:	2b00      	cmp	r3, #0
    19a8:	d009      	beq.n	19be <bt_test_rx+0x56>
			/* swap buffers */
			tmp = active_rxbuf;
    19aa:	4b25      	ldr	r3, [pc, #148]	; (1a40 <bt_test_rx+0xd8>)
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	607b      	str	r3, [r7, #4]
			active_rxbuf = idle_rxbuf;
    19b0:	4b24      	ldr	r3, [pc, #144]	; (1a44 <bt_test_rx+0xdc>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	4a22      	ldr	r2, [pc, #136]	; (1a40 <bt_test_rx+0xd8>)
    19b6:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    19b8:	4a22      	ldr	r2, [pc, #136]	; (1a44 <bt_test_rx+0xdc>)
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	6013      	str	r3, [r2, #0]
		}
		if (rx_err)
    19be:	4b1f      	ldr	r3, [pc, #124]	; (1a3c <bt_test_rx+0xd4>)
    19c0:	681b      	ldr	r3, [r3, #0]
    19c2:	2b00      	cmp	r3, #0
    19c4:	d002      	beq.n	19cc <bt_test_rx+0x64>
			RXLED_CLR;
    19c6:	4b20      	ldr	r3, [pc, #128]	; (1a48 <bt_test_rx+0xe0>)
    19c8:	2210      	movs	r2, #16
    19ca:	601a      	str	r2, [r3, #0]
		if (rx_tc) {
    19cc:	4b1a      	ldr	r3, [pc, #104]	; (1a38 <bt_test_rx+0xd0>)
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d024      	beq.n	1a1e <bt_test_rx+0xb6>
			if (rx_tc > 1)
    19d4:	4b18      	ldr	r3, [pc, #96]	; (1a38 <bt_test_rx+0xd0>)
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	2b01      	cmp	r3, #1
    19da:	d903      	bls.n	19e4 <bt_test_rx+0x7c>
				TXLED_CLR;
    19dc:	4b1a      	ldr	r3, [pc, #104]	; (1a48 <bt_test_rx+0xe0>)
    19de:	f44f 7280 	mov.w	r2, #256	; 0x100
    19e2:	601a      	str	r2, [r3, #0]
			if (find_giac(idle_rxbuf)) {
    19e4:	4b17      	ldr	r3, [pc, #92]	; (1a44 <bt_test_rx+0xdc>)
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	4618      	mov	r0, r3
    19ea:	f7ff ff17 	bl	181c <find_giac>
    19ee:	4603      	mov	r3, r0
    19f0:	2b00      	cmp	r3, #0
    19f2:	d008      	beq.n	1a06 <bt_test_rx+0x9e>
				USRLED_SET;
    19f4:	4b15      	ldr	r3, [pc, #84]	; (1a4c <bt_test_rx+0xe4>)
    19f6:	2202      	movs	r2, #2
    19f8:	601a      	str	r2, [r3, #0]
				countdown = 100;
    19fa:	2364      	movs	r3, #100	; 0x64
    19fc:	60fb      	str	r3, [r7, #12]
				num_giacs++;
    19fe:	68bb      	ldr	r3, [r7, #8]
    1a00:	3301      	adds	r3, #1
    1a02:	60bb      	str	r3, [r7, #8]
    1a04:	e00b      	b.n	1a1e <bt_test_rx+0xb6>
			} else {
				if (countdown == 0) {
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d105      	bne.n	1a18 <bt_test_rx+0xb0>
					/* win if more than 32 GIACs seen during this countdown */
					//if (num_giacs > 32)
						//break;
					USRLED_CLR;
    1a0c:	4b0e      	ldr	r3, [pc, #56]	; (1a48 <bt_test_rx+0xe0>)
    1a0e:	2202      	movs	r2, #2
    1a10:	601a      	str	r2, [r3, #0]
					num_giacs = 0;
    1a12:	2300      	movs	r3, #0
    1a14:	60bb      	str	r3, [r7, #8]
    1a16:	e002      	b.n	1a1e <bt_test_rx+0xb6>
				} else {
					--countdown;
    1a18:	68fb      	ldr	r3, [r7, #12]
    1a1a:	3b01      	subs	r3, #1
    1a1c:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		rx_tc = 0;
    1a1e:	4b06      	ldr	r3, [pc, #24]	; (1a38 <bt_test_rx+0xd0>)
    1a20:	2200      	movs	r2, #0
    1a22:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    1a24:	4b05      	ldr	r3, [pc, #20]	; (1a3c <bt_test_rx+0xd4>)
    1a26:	2200      	movs	r2, #0
    1a28:	601a      	str	r2, [r3, #0]
	dio_ssp_init();
	dma_init();
	dio_ssp_start();
	cc2400_rx();

	while (num_giacs < 20) {
    1a2a:	68bb      	ldr	r3, [r7, #8]
    1a2c:	2b13      	cmp	r3, #19
    1a2e:	ddad      	ble.n	198c <bt_test_rx+0x24>

		rx_tc = 0;
		rx_err = 0;
	}
	//FIXME turn off rx
}
    1a30:	3710      	adds	r7, #16
    1a32:	46bd      	mov	sp, r7
    1a34:	bd80      	pop	{r7, pc}
    1a36:	bf00      	nop
    1a38:	100005e8 	.word	0x100005e8
    1a3c:	10002680 	.word	0x10002680
    1a40:	1000044c 	.word	0x1000044c
    1a44:	10000450 	.word	0x10000450
    1a48:	2009c03c 	.word	0x2009c03c
    1a4c:	2009c038 	.word	0x2009c038

00001a50 <waitms>:

/* delay a number of milliseconds while on internal oscillator (4 MHz) */
void waitms(u8 ms)
{
    1a50:	b480      	push	{r7}
    1a52:	b085      	sub	sp, #20
    1a54:	af00      	add	r7, sp, #0
    1a56:	4603      	mov	r3, r0
    1a58:	71fb      	strb	r3, [r7, #7]
	u32 i = 400 * ms;
    1a5a:	79fb      	ldrb	r3, [r7, #7]
    1a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
    1a60:	fb02 f303 	mul.w	r3, r2, r3
    1a64:	60fb      	str	r3, [r7, #12]
	while (--i);
    1a66:	68fb      	ldr	r3, [r7, #12]
    1a68:	3b01      	subs	r3, #1
    1a6a:	60fb      	str	r3, [r7, #12]
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d1f9      	bne.n	1a66 <waitms+0x16>
}
    1a72:	3714      	adds	r7, #20
    1a74:	46bd      	mov	sp, r7
    1a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a7a:	4770      	bx	lr

00001a7c <main>:

int main()
{
    1a7c:	b580      	push	{r7, lr}
    1a7e:	b082      	sub	sp, #8
    1a80:	af00      	add	r7, sp, #0
	int i;

	gpio_init();
    1a82:	f000 f92d 	bl	1ce0 <gpio_init>

	/* blinky */
	for (i = 0; i < 2; i++) {
    1a86:	2300      	movs	r3, #0
    1a88:	607b      	str	r3, [r7, #4]
    1a8a:	e01c      	b.n	1ac6 <main+0x4a>
		TXLED_SET;
    1a8c:	4b53      	ldr	r3, [pc, #332]	; (1bdc <main+0x160>)
    1a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1a92:	601a      	str	r2, [r3, #0]
		RXLED_SET;
    1a94:	4b51      	ldr	r3, [pc, #324]	; (1bdc <main+0x160>)
    1a96:	2210      	movs	r2, #16
    1a98:	601a      	str	r2, [r3, #0]
		USRLED_SET;
    1a9a:	4b50      	ldr	r3, [pc, #320]	; (1bdc <main+0x160>)
    1a9c:	2202      	movs	r2, #2
    1a9e:	601a      	str	r2, [r3, #0]
		waitms(200);
    1aa0:	20c8      	movs	r0, #200	; 0xc8
    1aa2:	f7ff ffd5 	bl	1a50 <waitms>
		TXLED_CLR;
    1aa6:	4b4e      	ldr	r3, [pc, #312]	; (1be0 <main+0x164>)
    1aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
    1aac:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    1aae:	4b4c      	ldr	r3, [pc, #304]	; (1be0 <main+0x164>)
    1ab0:	2210      	movs	r2, #16
    1ab2:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    1ab4:	4b4a      	ldr	r3, [pc, #296]	; (1be0 <main+0x164>)
    1ab6:	2202      	movs	r2, #2
    1ab8:	601a      	str	r2, [r3, #0]
		waitms(200);
    1aba:	20c8      	movs	r0, #200	; 0xc8
    1abc:	f7ff ffc8 	bl	1a50 <waitms>
	int i;

	gpio_init();

	/* blinky */
	for (i = 0; i < 2; i++) {
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	3301      	adds	r3, #1
    1ac4:	607b      	str	r3, [r7, #4]
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	2b01      	cmp	r3, #1
    1aca:	dddf      	ble.n	1a8c <main+0x10>
		USRLED_CLR;
		waitms(200);
	}

	/* cc2400_test */
	cc2400_init();
    1acc:	f000 fa22 	bl	1f14 <cc2400_init>
	TXLED_SET;
    1ad0:	4b42      	ldr	r3, [pc, #264]	; (1bdc <main+0x160>)
    1ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
    1ad6:	601a      	str	r2, [r3, #0]
	waitms(200);
    1ad8:	20c8      	movs	r0, #200	; 0xc8
    1ada:	f7ff ffb9 	bl	1a50 <waitms>
	TXLED_CLR;
    1ade:	4b40      	ldr	r3, [pc, #256]	; (1be0 <main+0x164>)
    1ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
    1ae4:	601a      	str	r2, [r3, #0]
	waitms(200);
    1ae6:	20c8      	movs	r0, #200	; 0xc8
    1ae8:	f7ff ffb2 	bl	1a50 <waitms>
	cc2400_reset();
    1aec:	f000 fae4 	bl	20b8 <cc2400_reset>
	TXLED_SET;
    1af0:	4b3a      	ldr	r3, [pc, #232]	; (1bdc <main+0x160>)
    1af2:	f44f 7280 	mov.w	r2, #256	; 0x100
    1af6:	601a      	str	r2, [r3, #0]
	waitms(200);
    1af8:	20c8      	movs	r0, #200	; 0xc8
    1afa:	f7ff ffa9 	bl	1a50 <waitms>
	TXLED_CLR;
    1afe:	4b38      	ldr	r3, [pc, #224]	; (1be0 <main+0x164>)
    1b00:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b04:	601a      	str	r2, [r3, #0]
	waitms(200);
    1b06:	20c8      	movs	r0, #200	; 0xc8
    1b08:	f7ff ffa2 	bl	1a50 <waitms>
	if (cc2400_get(AGCCTRL) != 0xf700)
    1b0c:	2004      	movs	r0, #4
    1b0e:	f000 fa61 	bl	1fd4 <cc2400_get>
    1b12:	4603      	mov	r3, r0
    1b14:	f5b3 4f77 	cmp.w	r3, #63232	; 0xf700
    1b18:	d000      	beq.n	1b1c <main+0xa0>
		while(1);
    1b1a:	e7fe      	b.n	1b1a <main+0x9e>
	TXLED_SET;
    1b1c:	4b2f      	ldr	r3, [pc, #188]	; (1bdc <main+0x160>)
    1b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b22:	601a      	str	r2, [r3, #0]
	waitms(200);
    1b24:	20c8      	movs	r0, #200	; 0xc8
    1b26:	f7ff ff93 	bl	1a50 <waitms>

	/* clock_test */
	clock_start();
    1b2a:	f000 fae1 	bl	20f0 <clock_start>
	for (i = 0; i < 4; i++) {
    1b2e:	2300      	movs	r3, #0
    1b30:	607b      	str	r3, [r7, #4]
    1b32:	e00e      	b.n	1b52 <main+0xd6>
		RXLED_SET;
    1b34:	4b29      	ldr	r3, [pc, #164]	; (1bdc <main+0x160>)
    1b36:	2210      	movs	r2, #16
    1b38:	601a      	str	r2, [r3, #0]
		wait(2);
    1b3a:	2002      	movs	r0, #2
    1b3c:	f000 f898 	bl	1c70 <wait>
		RXLED_CLR;
    1b40:	4b27      	ldr	r3, [pc, #156]	; (1be0 <main+0x164>)
    1b42:	2210      	movs	r2, #16
    1b44:	601a      	str	r2, [r3, #0]
		wait(2);
    1b46:	2002      	movs	r0, #2
    1b48:	f000 f892 	bl	1c70 <wait>
	TXLED_SET;
	waitms(200);

	/* clock_test */
	clock_start();
	for (i = 0; i < 4; i++) {
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	3301      	adds	r3, #1
    1b50:	607b      	str	r3, [r7, #4]
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	2b03      	cmp	r3, #3
    1b56:	dded      	ble.n	1b34 <main+0xb8>
		RXLED_SET;
		wait(2);
		RXLED_CLR;
		wait(2);
	}
	RXLED_SET;
    1b58:	4b20      	ldr	r3, [pc, #128]	; (1bdc <main+0x160>)
    1b5a:	2210      	movs	r2, #16
    1b5c:	601a      	str	r2, [r3, #0]

	clkn_init();
    1b5e:	f7fe ff49 	bl	9f4 <clkn_init>
	bt_test_rx();
    1b62:	f7ff ff01 	bl	1968 <bt_test_rx>
	USRLED_SET;
    1b66:	4b1d      	ldr	r3, [pc, #116]	; (1bdc <main+0x160>)
    1b68:	2202      	movs	r2, #2
    1b6a:	601a      	str	r2, [r3, #0]

	/*
	 * Now we function like bluetooth_rxtx so that the USB interface can be
	 * tested.
	 */
	ubertooth_usb_init();
    1b6c:	f7fe ff2a 	bl	9c4 <ubertooth_usb_init>

	while (1) {
		USBHwISR();
    1b70:	f000 ff66 	bl	2a40 <USBHwISR>
		if (rx_pkts)
    1b74:	4b1b      	ldr	r3, [pc, #108]	; (1be4 <main+0x168>)
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d002      	beq.n	1b82 <main+0x106>
			bt_stream_rx();
    1b7c:	f7ff fce4 	bl	1548 <bt_stream_rx>
    1b80:	e02a      	b.n	1bd8 <main+0x15c>
		else if (requested_mode == MODE_TX_TEST && mode != MODE_TX_TEST)
    1b82:	4b19      	ldr	r3, [pc, #100]	; (1be8 <main+0x16c>)
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	2b03      	cmp	r3, #3
    1b88:	d106      	bne.n	1b98 <main+0x11c>
    1b8a:	4b18      	ldr	r3, [pc, #96]	; (1bec <main+0x170>)
    1b8c:	681b      	ldr	r3, [r3, #0]
    1b8e:	2b03      	cmp	r3, #3
    1b90:	d002      	beq.n	1b98 <main+0x11c>
			cc2400_txtest();
    1b92:	f7ff f8f9 	bl	d88 <cc2400_txtest>
    1b96:	e01f      	b.n	1bd8 <main+0x15c>
		else if (requested_mode == MODE_RANGE_TEST && mode != MODE_RANGE_TEST)
    1b98:	4b13      	ldr	r3, [pc, #76]	; (1be8 <main+0x16c>)
    1b9a:	681b      	ldr	r3, [r3, #0]
    1b9c:	2b05      	cmp	r3, #5
    1b9e:	d106      	bne.n	1bae <main+0x132>
    1ba0:	4b12      	ldr	r3, [pc, #72]	; (1bec <main+0x170>)
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	2b05      	cmp	r3, #5
    1ba6:	d002      	beq.n	1bae <main+0x132>
			cc2400_rangetest();
    1ba8:	f7ff f95a 	bl	e60 <cc2400_rangetest>
    1bac:	e014      	b.n	1bd8 <main+0x15c>
		else if (requested_mode == MODE_REPEATER && mode != MODE_REPEATER)
    1bae:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <main+0x16c>)
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	2b06      	cmp	r3, #6
    1bb4:	d106      	bne.n	1bc4 <main+0x148>
    1bb6:	4b0d      	ldr	r3, [pc, #52]	; (1bec <main+0x170>)
    1bb8:	681b      	ldr	r3, [r3, #0]
    1bba:	2b06      	cmp	r3, #6
    1bbc:	d002      	beq.n	1bc4 <main+0x148>
			cc2400_repeater();
    1bbe:	f7ff fb81 	bl	12c4 <cc2400_repeater>
    1bc2:	e009      	b.n	1bd8 <main+0x15c>
		else if (requested_mode == MODE_SPECAN && mode != MODE_SPECAN)
    1bc4:	4b08      	ldr	r3, [pc, #32]	; (1be8 <main+0x16c>)
    1bc6:	681b      	ldr	r3, [r3, #0]
    1bc8:	2b04      	cmp	r3, #4
    1bca:	d105      	bne.n	1bd8 <main+0x15c>
    1bcc:	4b07      	ldr	r3, [pc, #28]	; (1bec <main+0x170>)
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	2b04      	cmp	r3, #4
    1bd2:	d001      	beq.n	1bd8 <main+0x15c>
			specan();
    1bd4:	f7ff fd4c 	bl	1670 <specan>
		//FIXME do other modes like this
	}
    1bd8:	e7ca      	b.n	1b70 <main+0xf4>
    1bda:	bf00      	nop
    1bdc:	2009c038 	.word	0x2009c038
    1be0:	2009c03c 	.word	0x2009c03c
    1be4:	1000052c 	.word	0x1000052c
    1be8:	10000524 	.word	0x10000524
    1bec:	10000520 	.word	0x10000520

00001bf0 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	af00      	add	r7, sp, #0
	USBHwISR();
    1bf4:	f000 ff24 	bl	2a40 <USBHwISR>
}
    1bf8:	bd80      	pop	{r7, pc}
    1bfa:	bf00      	nop

00001bfc <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b082      	sub	sp, #8
    1c00:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    1c02:	4b12      	ldr	r3, [pc, #72]	; (1c4c <Reset_Handler+0x50>)
    1c04:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    1c06:	4b12      	ldr	r3, [pc, #72]	; (1c50 <Reset_Handler+0x54>)
    1c08:	603b      	str	r3, [r7, #0]
    1c0a:	e007      	b.n	1c1c <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    1c0c:	683b      	ldr	r3, [r7, #0]
    1c0e:	1d1a      	adds	r2, r3, #4
    1c10:	603a      	str	r2, [r7, #0]
    1c12:	687a      	ldr	r2, [r7, #4]
    1c14:	1d11      	adds	r1, r2, #4
    1c16:	6079      	str	r1, [r7, #4]
    1c18:	6812      	ldr	r2, [r2, #0]
    1c1a:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    1c1c:	683b      	ldr	r3, [r7, #0]
    1c1e:	4a0d      	ldr	r2, [pc, #52]	; (1c54 <Reset_Handler+0x58>)
    1c20:	4293      	cmp	r3, r2
    1c22:	d3f3      	bcc.n	1c0c <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    1c24:	4b0c      	ldr	r3, [pc, #48]	; (1c58 <Reset_Handler+0x5c>)
    1c26:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    1c28:	e004      	b.n	1c34 <Reset_Handler+0x38>
	{
		*src++ = 0;
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	1d1a      	adds	r2, r3, #4
    1c2e:	607a      	str	r2, [r7, #4]
    1c30:	2200      	movs	r2, #0
    1c32:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	4a09      	ldr	r2, [pc, #36]	; (1c5c <Reset_Handler+0x60>)
    1c38:	4293      	cmp	r3, r2
    1c3a:	d3f6      	bcc.n	1c2a <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    1c3c:	f7fe fab4 	bl	1a8 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    1c40:	4b07      	ldr	r3, [pc, #28]	; (1c60 <Reset_Handler+0x64>)
    1c42:	4a08      	ldr	r2, [pc, #32]	; (1c64 <Reset_Handler+0x68>)
    1c44:	601a      	str	r2, [r3, #0]
    
	main();
    1c46:	f7ff ff19 	bl	1a7c <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    1c4a:	e7fe      	b.n	1c4a <Reset_Handler+0x4e>
    1c4c:	000034b0 	.word	0x000034b0
    1c50:	10000020 	.word	0x10000020
    1c54:	10000502 	.word	0x10000502
    1c58:	10000504 	.word	0x10000504
    1c5c:	10002684 	.word	0x10002684
    1c60:	e000ed08 	.word	0xe000ed08
    1c64:	00000000 	.word	0x00000000

00001c68 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    1c68:	b480      	push	{r7}
    1c6a:	af00      	add	r7, sp, #0
    1c6c:	e7fe      	b.n	1c6c <ADC_IRQHandler+0x4>
    1c6e:	bf00      	nop

00001c70 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    1c70:	b580      	push	{r7, lr}
    1c72:	b082      	sub	sp, #8
    1c74:	af00      	add	r7, sp, #0
    1c76:	4603      	mov	r3, r0
    1c78:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    1c7a:	79fb      	ldrb	r3, [r7, #7]
    1c7c:	4a04      	ldr	r2, [pc, #16]	; (1c90 <wait+0x20>)
    1c7e:	fb02 f303 	mul.w	r3, r2, r3
    1c82:	4618      	mov	r0, r3
    1c84:	f000 f806 	bl	1c94 <wait_us>
}
    1c88:	3708      	adds	r7, #8
    1c8a:	46bd      	mov	sp, r7
    1c8c:	bd80      	pop	{r7, pc}
    1c8e:	bf00      	nop
    1c90:	000f4240 	.word	0x000f4240

00001c94 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    1c94:	b480      	push	{r7}
    1c96:	b083      	sub	sp, #12
    1c98:	af00      	add	r7, sp, #0
    1c9a:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	089a      	lsrs	r2, r3, #2
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	08db      	lsrs	r3, r3, #3
    1ca4:	441a      	add	r2, r3
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	099b      	lsrs	r3, r3, #6
    1caa:	441a      	add	r2, r3
    1cac:	687b      	ldr	r3, [r7, #4]
    1cae:	09db      	lsrs	r3, r3, #7
    1cb0:	441a      	add	r2, r3
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	0a9b      	lsrs	r3, r3, #10
    1cb6:	441a      	add	r2, r3
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	0adb      	lsrs	r3, r3, #11
    1cbc:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    1cbe:	4a07      	ldr	r2, [pc, #28]	; (1cdc <wait_us+0x48>)
    1cc0:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    1cc2:	bf00      	nop
    1cc4:	4b05      	ldr	r3, [pc, #20]	; (1cdc <wait_us+0x48>)
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	3b01      	subs	r3, #1
    1cca:	4a04      	ldr	r2, [pc, #16]	; (1cdc <wait_us+0x48>)
    1ccc:	6013      	str	r3, [r2, #0]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d1f8      	bne.n	1cc4 <wait_us+0x30>
}
    1cd2:	370c      	adds	r7, #12
    1cd4:	46bd      	mov	sp, r7
    1cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cda:	4770      	bx	lr
    1cdc:	10000550 	.word	0x10000550

00001ce0 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    1ce0:	b580      	push	{r7, lr}
    1ce2:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    1ce4:	f000 f836 	bl	1d54 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    1ce8:	4b10      	ldr	r3, [pc, #64]	; (1d2c <gpio_init+0x4c>)
    1cea:	2200      	movs	r2, #0
    1cec:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    1cee:	4b10      	ldr	r3, [pc, #64]	; (1d30 <gpio_init+0x50>)
    1cf0:	f24c 7212 	movw	r2, #50962	; 0xc712
    1cf4:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    1cf6:	4b0f      	ldr	r3, [pc, #60]	; (1d34 <gpio_init+0x54>)
    1cf8:	f240 12b1 	movw	r2, #433	; 0x1b1
    1cfc:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    1cfe:	4b0e      	ldr	r3, [pc, #56]	; (1d38 <gpio_init+0x58>)
    1d00:	2200      	movs	r2, #0
    1d02:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    1d04:	4b0d      	ldr	r3, [pc, #52]	; (1d3c <gpio_init+0x5c>)
    1d06:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1d0a:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    1d0c:	4b0c      	ldr	r3, [pc, #48]	; (1d40 <gpio_init+0x60>)
    1d0e:	2200      	movs	r2, #0
    1d10:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    1d12:	4b0c      	ldr	r3, [pc, #48]	; (1d44 <gpio_init+0x64>)
    1d14:	2200      	movs	r2, #0
    1d16:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    1d18:	4b0b      	ldr	r3, [pc, #44]	; (1d48 <gpio_init+0x68>)
    1d1a:	2200      	movs	r2, #0
    1d1c:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    1d1e:	4b0b      	ldr	r3, [pc, #44]	; (1d4c <gpio_init+0x6c>)
    1d20:	2200      	movs	r2, #0
    1d22:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    1d24:	4b0a      	ldr	r3, [pc, #40]	; (1d50 <gpio_init+0x70>)
    1d26:	2200      	movs	r2, #0
    1d28:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    1d2a:	bd80      	pop	{r7, pc}
    1d2c:	2009c000 	.word	0x2009c000
    1d30:	2009c020 	.word	0x2009c020
    1d34:	2009c040 	.word	0x2009c040
    1d38:	2009c060 	.word	0x2009c060
    1d3c:	2009c080 	.word	0x2009c080
    1d40:	2009c014 	.word	0x2009c014
    1d44:	2009c034 	.word	0x2009c034
    1d48:	2009c054 	.word	0x2009c054
    1d4c:	2009c074 	.word	0x2009c074
    1d50:	2009c094 	.word	0x2009c094

00001d54 <all_pins_off>:

void all_pins_off(void)
{
    1d54:	b480      	push	{r7}
    1d56:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    1d58:	4b27      	ldr	r3, [pc, #156]	; (1df8 <all_pins_off+0xa4>)
    1d5a:	2200      	movs	r2, #0
    1d5c:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    1d5e:	4b27      	ldr	r3, [pc, #156]	; (1dfc <all_pins_off+0xa8>)
    1d60:	2200      	movs	r2, #0
    1d62:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    1d64:	4b26      	ldr	r3, [pc, #152]	; (1e00 <all_pins_off+0xac>)
    1d66:	2200      	movs	r2, #0
    1d68:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    1d6a:	4b26      	ldr	r3, [pc, #152]	; (1e04 <all_pins_off+0xb0>)
    1d6c:	2200      	movs	r2, #0
    1d6e:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    1d70:	4b25      	ldr	r3, [pc, #148]	; (1e08 <all_pins_off+0xb4>)
    1d72:	2200      	movs	r2, #0
    1d74:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    1d76:	4b25      	ldr	r3, [pc, #148]	; (1e0c <all_pins_off+0xb8>)
    1d78:	2200      	movs	r2, #0
    1d7a:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    1d7c:	4b24      	ldr	r3, [pc, #144]	; (1e10 <all_pins_off+0xbc>)
    1d7e:	2200      	movs	r2, #0
    1d80:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    1d82:	4b24      	ldr	r3, [pc, #144]	; (1e14 <all_pins_off+0xc0>)
    1d84:	2200      	movs	r2, #0
    1d86:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    1d88:	4b23      	ldr	r3, [pc, #140]	; (1e18 <all_pins_off+0xc4>)
    1d8a:	2200      	movs	r2, #0
    1d8c:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    1d8e:	4b23      	ldr	r3, [pc, #140]	; (1e1c <all_pins_off+0xc8>)
    1d90:	2200      	movs	r2, #0
    1d92:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    1d94:	4b22      	ldr	r3, [pc, #136]	; (1e20 <all_pins_off+0xcc>)
    1d96:	2200      	movs	r2, #0
    1d98:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    1d9a:	4b22      	ldr	r3, [pc, #136]	; (1e24 <all_pins_off+0xd0>)
    1d9c:	2200      	movs	r2, #0
    1d9e:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    1da0:	4b21      	ldr	r3, [pc, #132]	; (1e28 <all_pins_off+0xd4>)
    1da2:	2200      	movs	r2, #0
    1da4:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    1da6:	4b21      	ldr	r3, [pc, #132]	; (1e2c <all_pins_off+0xd8>)
    1da8:	2200      	movs	r2, #0
    1daa:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    1dac:	4b20      	ldr	r3, [pc, #128]	; (1e30 <all_pins_off+0xdc>)
    1dae:	2200      	movs	r2, #0
    1db0:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    1db2:	4b20      	ldr	r3, [pc, #128]	; (1e34 <all_pins_off+0xe0>)
    1db4:	2200      	movs	r2, #0
    1db6:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    1db8:	4b1f      	ldr	r3, [pc, #124]	; (1e38 <all_pins_off+0xe4>)
    1dba:	2200      	movs	r2, #0
    1dbc:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    1dbe:	4b1f      	ldr	r3, [pc, #124]	; (1e3c <all_pins_off+0xe8>)
    1dc0:	2200      	movs	r2, #0
    1dc2:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    1dc4:	4b1e      	ldr	r3, [pc, #120]	; (1e40 <all_pins_off+0xec>)
    1dc6:	2200      	movs	r2, #0
    1dc8:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    1dca:	4b1e      	ldr	r3, [pc, #120]	; (1e44 <all_pins_off+0xf0>)
    1dcc:	2200      	movs	r2, #0
    1dce:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    1dd0:	4b1d      	ldr	r3, [pc, #116]	; (1e48 <all_pins_off+0xf4>)
    1dd2:	2200      	movs	r2, #0
    1dd4:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    1dd6:	4b1d      	ldr	r3, [pc, #116]	; (1e4c <all_pins_off+0xf8>)
    1dd8:	2200      	movs	r2, #0
    1dda:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    1ddc:	4b1c      	ldr	r3, [pc, #112]	; (1e50 <all_pins_off+0xfc>)
    1dde:	2200      	movs	r2, #0
    1de0:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    1de2:	4b1c      	ldr	r3, [pc, #112]	; (1e54 <all_pins_off+0x100>)
    1de4:	2200      	movs	r2, #0
    1de6:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    1de8:	4b1b      	ldr	r3, [pc, #108]	; (1e58 <all_pins_off+0x104>)
    1dea:	2200      	movs	r2, #0
    1dec:	601a      	str	r2, [r3, #0]
}
    1dee:	46bd      	mov	sp, r7
    1df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1df4:	4770      	bx	lr
    1df6:	bf00      	nop
    1df8:	4002c000 	.word	0x4002c000
    1dfc:	4002c004 	.word	0x4002c004
    1e00:	4002c008 	.word	0x4002c008
    1e04:	4002c00c 	.word	0x4002c00c
    1e08:	4002c010 	.word	0x4002c010
    1e0c:	4002c01c 	.word	0x4002c01c
    1e10:	4002c024 	.word	0x4002c024
    1e14:	4002c028 	.word	0x4002c028
    1e18:	2009c000 	.word	0x2009c000
    1e1c:	2009c020 	.word	0x2009c020
    1e20:	2009c040 	.word	0x2009c040
    1e24:	2009c060 	.word	0x2009c060
    1e28:	2009c080 	.word	0x2009c080
    1e2c:	4002c040 	.word	0x4002c040
    1e30:	4002c044 	.word	0x4002c044
    1e34:	4002c048 	.word	0x4002c048
    1e38:	4002c04c 	.word	0x4002c04c
    1e3c:	4002c050 	.word	0x4002c050
    1e40:	4002c05c 	.word	0x4002c05c
    1e44:	4002c064 	.word	0x4002c064
    1e48:	2009c014 	.word	0x2009c014
    1e4c:	2009c034 	.word	0x2009c034
    1e50:	2009c054 	.word	0x2009c054
    1e54:	2009c074 	.word	0x2009c074
    1e58:	2009c094 	.word	0x2009c094

00001e5c <dio_ssp_init>:
	clock_start();
}

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    1e5c:	b480      	push	{r7}
    1e5e:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    1e60:	4a16      	ldr	r2, [pc, #88]	; (1ebc <dio_ssp_init+0x60>)
    1e62:	4b16      	ldr	r3, [pc, #88]	; (1ebc <dio_ssp_init+0x60>)
    1e64:	681b      	ldr	r3, [r3, #0]
    1e66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    1e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1e6e:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    1e70:	4a12      	ldr	r2, [pc, #72]	; (1ebc <dio_ssp_init+0x60>)
    1e72:	4b12      	ldr	r3, [pc, #72]	; (1ebc <dio_ssp_init+0x60>)
    1e74:	681b      	ldr	r3, [r3, #0]
    1e76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    1e7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1e7e:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    1e80:	4a0e      	ldr	r2, [pc, #56]	; (1ebc <dio_ssp_init+0x60>)
    1e82:	4b0e      	ldr	r3, [pc, #56]	; (1ebc <dio_ssp_init+0x60>)
    1e84:	681b      	ldr	r3, [r3, #0]
    1e86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    1e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e8e:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    1e90:	4a0a      	ldr	r2, [pc, #40]	; (1ebc <dio_ssp_init+0x60>)
    1e92:	4b0a      	ldr	r3, [pc, #40]	; (1ebc <dio_ssp_init+0x60>)
    1e94:	681b      	ldr	r3, [r3, #0]
    1e96:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    1e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1e9e:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    1ea0:	4b07      	ldr	r3, [pc, #28]	; (1ec0 <dio_ssp_init+0x64>)
    1ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1ea6:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    1ea8:	4b06      	ldr	r3, [pc, #24]	; (1ec4 <dio_ssp_init+0x68>)
    1eaa:	22c7      	movs	r2, #199	; 0xc7
    1eac:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    1eae:	4b06      	ldr	r3, [pc, #24]	; (1ec8 <dio_ssp_init+0x6c>)
    1eb0:	220c      	movs	r2, #12
    1eb2:	601a      	str	r2, [r3, #0]
}
    1eb4:	46bd      	mov	sp, r7
    1eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eba:	4770      	bx	lr
    1ebc:	4002c000 	.word	0x4002c000
    1ec0:	2009c098 	.word	0x2009c098
    1ec4:	40030000 	.word	0x40030000
    1ec8:	40030004 	.word	0x40030004

00001ecc <atest_init>:

void atest_init()
{
    1ecc:	b480      	push	{r7}
    1ece:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    1ed0:	4a0d      	ldr	r2, [pc, #52]	; (1f08 <atest_init+0x3c>)
    1ed2:	4b0d      	ldr	r3, [pc, #52]	; (1f08 <atest_init+0x3c>)
    1ed4:	681b      	ldr	r3, [r3, #0]
    1ed6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    1eda:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    1edc:	4a0b      	ldr	r2, [pc, #44]	; (1f0c <atest_init+0x40>)
    1ede:	4b0b      	ldr	r3, [pc, #44]	; (1f0c <atest_init+0x40>)
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    1ee6:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    1ee8:	4a09      	ldr	r2, [pc, #36]	; (1f10 <atest_init+0x44>)
    1eea:	4b09      	ldr	r3, [pc, #36]	; (1f10 <atest_init+0x44>)
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    1ef2:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    1ef4:	4a06      	ldr	r2, [pc, #24]	; (1f10 <atest_init+0x44>)
    1ef6:	4b06      	ldr	r3, [pc, #24]	; (1f10 <atest_init+0x44>)
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    1efe:	6013      	str	r3, [r2, #0]
}
    1f00:	46bd      	mov	sp, r7
    1f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f06:	4770      	bx	lr
    1f08:	4002c004 	.word	0x4002c004
    1f0c:	2009c000 	.word	0x2009c000
    1f10:	4002c044 	.word	0x4002c044

00001f14 <cc2400_init>:

void cc2400_init()
{
    1f14:	b580      	push	{r7, lr}
    1f16:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    1f18:	f7ff ffd8 	bl	1ecc <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    1f1c:	4b09      	ldr	r3, [pc, #36]	; (1f44 <cc2400_init+0x30>)
    1f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1f22:	601a      	str	r2, [r3, #0]
	wait_us(50);
    1f24:	2032      	movs	r0, #50	; 0x32
    1f26:	f7ff feb5 	bl	1c94 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    1f2a:	4b07      	ldr	r3, [pc, #28]	; (1f48 <cc2400_init+0x34>)
    1f2c:	2220      	movs	r2, #32
    1f2e:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    1f30:	4b04      	ldr	r3, [pc, #16]	; (1f44 <cc2400_init+0x30>)
    1f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f36:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    1f38:	200d      	movs	r0, #13
    1f3a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    1f3e:	f000 f85f 	bl	2000 <cc2400_set>
}
    1f42:	bd80      	pop	{r7, pc}
    1f44:	2009c038 	.word	0x2009c038
    1f48:	2009c058 	.word	0x2009c058

00001f4c <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    1f4c:	b480      	push	{r7}
    1f4e:	b085      	sub	sp, #20
    1f50:	af00      	add	r7, sp, #0
    1f52:	4603      	mov	r3, r0
    1f54:	6039      	str	r1, [r7, #0]
    1f56:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    1f58:	79fb      	ldrb	r3, [r7, #7]
    1f5a:	3b01      	subs	r3, #1
    1f5c:	2201      	movs	r2, #1
    1f5e:	fa02 f303 	lsl.w	r3, r2, r3
    1f62:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    1f64:	4b18      	ldr	r3, [pc, #96]	; (1fc8 <cc2400_spi+0x7c>)
    1f66:	2220      	movs	r2, #32
    1f68:	601a      	str	r2, [r3, #0]

	while (len--) {
    1f6a:	e01e      	b.n	1faa <cc2400_spi+0x5e>
		if (data & msb)
    1f6c:	683a      	ldr	r2, [r7, #0]
    1f6e:	68fb      	ldr	r3, [r7, #12]
    1f70:	4013      	ands	r3, r2
    1f72:	2b00      	cmp	r3, #0
    1f74:	d003      	beq.n	1f7e <cc2400_spi+0x32>
			MOSI_SET;
    1f76:	4b15      	ldr	r3, [pc, #84]	; (1fcc <cc2400_spi+0x80>)
    1f78:	2201      	movs	r2, #1
    1f7a:	601a      	str	r2, [r3, #0]
    1f7c:	e002      	b.n	1f84 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    1f7e:	4b12      	ldr	r3, [pc, #72]	; (1fc8 <cc2400_spi+0x7c>)
    1f80:	2201      	movs	r2, #1
    1f82:	601a      	str	r2, [r3, #0]
		data <<= 1;
    1f84:	683b      	ldr	r3, [r7, #0]
    1f86:	005b      	lsls	r3, r3, #1
    1f88:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    1f8a:	4b10      	ldr	r3, [pc, #64]	; (1fcc <cc2400_spi+0x80>)
    1f8c:	2210      	movs	r2, #16
    1f8e:	601a      	str	r2, [r3, #0]
		if (MISO)
    1f90:	4b0f      	ldr	r3, [pc, #60]	; (1fd0 <cc2400_spi+0x84>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	f003 0302 	and.w	r3, r3, #2
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d003      	beq.n	1fa4 <cc2400_spi+0x58>
			data |= 1;
    1f9c:	683b      	ldr	r3, [r7, #0]
    1f9e:	f043 0301 	orr.w	r3, r3, #1
    1fa2:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    1fa4:	4b08      	ldr	r3, [pc, #32]	; (1fc8 <cc2400_spi+0x7c>)
    1fa6:	2210      	movs	r2, #16
    1fa8:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    1faa:	79fb      	ldrb	r3, [r7, #7]
    1fac:	1e5a      	subs	r2, r3, #1
    1fae:	71fa      	strb	r2, [r7, #7]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d1db      	bne.n	1f6c <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    1fb4:	4b05      	ldr	r3, [pc, #20]	; (1fcc <cc2400_spi+0x80>)
    1fb6:	2220      	movs	r2, #32
    1fb8:	601a      	str	r2, [r3, #0]

	return data;
    1fba:	683b      	ldr	r3, [r7, #0]
}
    1fbc:	4618      	mov	r0, r3
    1fbe:	3714      	adds	r7, #20
    1fc0:	46bd      	mov	sp, r7
    1fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fc6:	4770      	bx	lr
    1fc8:	2009c05c 	.word	0x2009c05c
    1fcc:	2009c058 	.word	0x2009c058
    1fd0:	2009c054 	.word	0x2009c054

00001fd4 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    1fd4:	b580      	push	{r7, lr}
    1fd6:	b084      	sub	sp, #16
    1fd8:	af00      	add	r7, sp, #0
    1fda:	4603      	mov	r3, r0
    1fdc:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    1fde:	79fb      	ldrb	r3, [r7, #7]
    1fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1fe4:	b2db      	uxtb	r3, r3
    1fe6:	041b      	lsls	r3, r3, #16
    1fe8:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    1fea:	2018      	movs	r0, #24
    1fec:	68f9      	ldr	r1, [r7, #12]
    1fee:	f7ff ffad 	bl	1f4c <cc2400_spi>
    1ff2:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    1ff4:	68bb      	ldr	r3, [r7, #8]
    1ff6:	b29b      	uxth	r3, r3
}
    1ff8:	4618      	mov	r0, r3
    1ffa:	3710      	adds	r7, #16
    1ffc:	46bd      	mov	sp, r7
    1ffe:	bd80      	pop	{r7, pc}

00002000 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    2000:	b580      	push	{r7, lr}
    2002:	b084      	sub	sp, #16
    2004:	af00      	add	r7, sp, #0
    2006:	4603      	mov	r3, r0
    2008:	460a      	mov	r2, r1
    200a:	71fb      	strb	r3, [r7, #7]
    200c:	4613      	mov	r3, r2
    200e:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    2010:	79fb      	ldrb	r3, [r7, #7]
    2012:	041a      	lsls	r2, r3, #16
    2014:	88bb      	ldrh	r3, [r7, #4]
    2016:	4313      	orrs	r3, r2
    2018:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    201a:	2018      	movs	r0, #24
    201c:	68f9      	ldr	r1, [r7, #12]
    201e:	f7ff ff95 	bl	1f4c <cc2400_spi>
}
    2022:	3710      	adds	r7, #16
    2024:	46bd      	mov	sp, r7
    2026:	bd80      	pop	{r7, pc}

00002028 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    2028:	b580      	push	{r7, lr}
    202a:	b084      	sub	sp, #16
    202c:	af00      	add	r7, sp, #0
    202e:	4603      	mov	r3, r0
    2030:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    2032:	79fb      	ldrb	r3, [r7, #7]
    2034:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2038:	b2db      	uxtb	r3, r3
    203a:	b29b      	uxth	r3, r3
    203c:	021b      	lsls	r3, r3, #8
    203e:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    2040:	89fb      	ldrh	r3, [r7, #14]
    2042:	2010      	movs	r0, #16
    2044:	4619      	mov	r1, r3
    2046:	f7ff ff81 	bl	1f4c <cc2400_spi>
    204a:	4603      	mov	r3, r0
    204c:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    204e:	89bb      	ldrh	r3, [r7, #12]
    2050:	b2db      	uxtb	r3, r3
}
    2052:	4618      	mov	r0, r3
    2054:	3710      	adds	r7, #16
    2056:	46bd      	mov	sp, r7
    2058:	bd80      	pop	{r7, pc}
    205a:	bf00      	nop

0000205c <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    205c:	b580      	push	{r7, lr}
    205e:	b084      	sub	sp, #16
    2060:	af00      	add	r7, sp, #0
    2062:	4603      	mov	r3, r0
    2064:	460a      	mov	r2, r1
    2066:	71fb      	strb	r3, [r7, #7]
    2068:	4613      	mov	r3, r2
    206a:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    206c:	79fb      	ldrb	r3, [r7, #7]
    206e:	021a      	lsls	r2, r3, #8
    2070:	79bb      	ldrb	r3, [r7, #6]
    2072:	4313      	orrs	r3, r2
    2074:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    2076:	2010      	movs	r0, #16
    2078:	68f9      	ldr	r1, [r7, #12]
    207a:	f7ff ff67 	bl	1f4c <cc2400_spi>
}
    207e:	3710      	adds	r7, #16
    2080:	46bd      	mov	sp, r7
    2082:	bd80      	pop	{r7, pc}

00002084 <cc2400_status>:
	CSN_SET;
}

/* get the status */
u8 cc2400_status()
{
    2084:	b580      	push	{r7, lr}
    2086:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    2088:	2008      	movs	r0, #8
    208a:	2100      	movs	r1, #0
    208c:	f7ff ff5e 	bl	1f4c <cc2400_spi>
    2090:	4603      	mov	r3, r0
    2092:	b2db      	uxtb	r3, r3
}
    2094:	4618      	mov	r0, r3
    2096:	bd80      	pop	{r7, pc}

00002098 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    2098:	b580      	push	{r7, lr}
    209a:	b082      	sub	sp, #8
    209c:	af00      	add	r7, sp, #0
    209e:	4603      	mov	r3, r0
    20a0:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    20a2:	79fb      	ldrb	r3, [r7, #7]
    20a4:	2008      	movs	r0, #8
    20a6:	4619      	mov	r1, r3
    20a8:	f7ff ff50 	bl	1f4c <cc2400_spi>
    20ac:	4603      	mov	r3, r0
    20ae:	b2db      	uxtb	r3, r3
}
    20b0:	4618      	mov	r0, r3
    20b2:	3708      	adds	r7, #8
    20b4:	46bd      	mov	sp, r7
    20b6:	bd80      	pop	{r7, pc}

000020b8 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    20b8:	b580      	push	{r7, lr}
    20ba:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    20bc:	2000      	movs	r0, #0
    20be:	2100      	movs	r1, #0
    20c0:	f7ff ff9e 	bl	2000 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    20c4:	bf00      	nop
    20c6:	2000      	movs	r0, #0
    20c8:	f7ff ff84 	bl	1fd4 <cc2400_get>
    20cc:	4603      	mov	r3, r0
    20ce:	2b00      	cmp	r3, #0
    20d0:	d1f9      	bne.n	20c6 <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    20d2:	2000      	movs	r0, #0
    20d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    20d8:	f7ff ff92 	bl	2000 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    20dc:	bf00      	nop
    20de:	2000      	movs	r0, #0
    20e0:	f7ff ff78 	bl	1fd4 <cc2400_get>
    20e4:	4603      	mov	r3, r0
    20e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    20ea:	d1f8      	bne.n	20de <cc2400_reset+0x26>
}
    20ec:	bd80      	pop	{r7, pc}
    20ee:	bf00      	nop

000020f0 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    20f0:	b580      	push	{r7, lr}
    20f2:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    20f4:	4b5e      	ldr	r3, [pc, #376]	; (2270 <clock_start+0x180>)
    20f6:	f244 023a 	movw	r2, #16442	; 0x403a
    20fa:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    20fc:	4b5d      	ldr	r3, [pc, #372]	; (2274 <clock_start+0x184>)
    20fe:	2200      	movs	r2, #0
    2100:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    2102:	4a5d      	ldr	r2, [pc, #372]	; (2278 <clock_start+0x188>)
    2104:	4b5c      	ldr	r3, [pc, #368]	; (2278 <clock_start+0x188>)
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	f023 0302 	bic.w	r3, r3, #2
    210c:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    210e:	4b5b      	ldr	r3, [pc, #364]	; (227c <clock_start+0x18c>)
    2110:	22aa      	movs	r2, #170	; 0xaa
    2112:	601a      	str	r2, [r3, #0]
    2114:	4b59      	ldr	r3, [pc, #356]	; (227c <clock_start+0x18c>)
    2116:	2255      	movs	r2, #85	; 0x55
    2118:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    211a:	bf00      	nop
    211c:	4b58      	ldr	r3, [pc, #352]	; (2280 <clock_start+0x190>)
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2124:	2b00      	cmp	r3, #0
    2126:	d1f9      	bne.n	211c <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    2128:	4a53      	ldr	r2, [pc, #332]	; (2278 <clock_start+0x188>)
    212a:	4b53      	ldr	r3, [pc, #332]	; (2278 <clock_start+0x188>)
    212c:	681b      	ldr	r3, [r3, #0]
    212e:	f023 0301 	bic.w	r3, r3, #1
    2132:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    2134:	4b51      	ldr	r3, [pc, #324]	; (227c <clock_start+0x18c>)
    2136:	22aa      	movs	r2, #170	; 0xaa
    2138:	601a      	str	r2, [r3, #0]
    213a:	4b50      	ldr	r3, [pc, #320]	; (227c <clock_start+0x18c>)
    213c:	2255      	movs	r2, #85	; 0x55
    213e:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    2140:	bf00      	nop
    2142:	4b4f      	ldr	r3, [pc, #316]	; (2280 <clock_start+0x190>)
    2144:	681b      	ldr	r3, [r3, #0]
    2146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    214a:	2b00      	cmp	r3, #0
    214c:	d1f9      	bne.n	2142 <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    214e:	4b4d      	ldr	r3, [pc, #308]	; (2284 <clock_start+0x194>)
    2150:	2200      	movs	r2, #0
    2152:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    2154:	f7ff ffb0 	bl	20b8 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    2158:	2008      	movs	r0, #8
    215a:	f241 5170 	movw	r1, #5488	; 0x1570
    215e:	f7ff ff4f 	bl	2000 <cc2400_set>
	cc2400_strobe(SXOSCON);
    2162:	2060      	movs	r0, #96	; 0x60
    2164:	f7ff ff98 	bl	2098 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    2168:	bf00      	nop
    216a:	f7ff ff8b 	bl	2084 <cc2400_status>
    216e:	4603      	mov	r3, r0
    2170:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2174:	2b00      	cmp	r3, #0
    2176:	d0f8      	beq.n	216a <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    2178:	4b43      	ldr	r3, [pc, #268]	; (2288 <clock_start+0x198>)
    217a:	2220      	movs	r2, #32
    217c:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    217e:	bf00      	nop
    2180:	4b41      	ldr	r3, [pc, #260]	; (2288 <clock_start+0x198>)
    2182:	681b      	ldr	r3, [r3, #0]
    2184:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2188:	2b00      	cmp	r3, #0
    218a:	d0f9      	beq.n	2180 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    218c:	4b3f      	ldr	r3, [pc, #252]	; (228c <clock_start+0x19c>)
    218e:	2208      	movs	r2, #8
    2190:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    2192:	4b3f      	ldr	r3, [pc, #252]	; (2290 <clock_start+0x1a0>)
    2194:	2200      	movs	r2, #0
    2196:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    2198:	4b36      	ldr	r3, [pc, #216]	; (2274 <clock_start+0x184>)
    219a:	2201      	movs	r2, #1
    219c:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    219e:	4b3d      	ldr	r3, [pc, #244]	; (2294 <clock_start+0x1a4>)
    21a0:	4a3d      	ldr	r2, [pc, #244]	; (2298 <clock_start+0x1a8>)
    21a2:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    21a4:	4b35      	ldr	r3, [pc, #212]	; (227c <clock_start+0x18c>)
    21a6:	22aa      	movs	r2, #170	; 0xaa
    21a8:	601a      	str	r2, [r3, #0]
    21aa:	4b34      	ldr	r3, [pc, #208]	; (227c <clock_start+0x18c>)
    21ac:	2255      	movs	r2, #85	; 0x55
    21ae:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    21b0:	4a31      	ldr	r2, [pc, #196]	; (2278 <clock_start+0x188>)
    21b2:	4b31      	ldr	r3, [pc, #196]	; (2278 <clock_start+0x188>)
    21b4:	681b      	ldr	r3, [r3, #0]
    21b6:	f043 0301 	orr.w	r3, r3, #1
    21ba:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    21bc:	4b2f      	ldr	r3, [pc, #188]	; (227c <clock_start+0x18c>)
    21be:	22aa      	movs	r2, #170	; 0xaa
    21c0:	601a      	str	r2, [r3, #0]
    21c2:	4b2e      	ldr	r3, [pc, #184]	; (227c <clock_start+0x18c>)
    21c4:	2255      	movs	r2, #85	; 0x55
    21c6:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    21c8:	bf00      	nop
    21ca:	4b2d      	ldr	r3, [pc, #180]	; (2280 <clock_start+0x190>)
    21cc:	681b      	ldr	r3, [r3, #0]
    21ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    21d2:	2b00      	cmp	r3, #0
    21d4:	d0f9      	beq.n	21ca <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    21d6:	4b2b      	ldr	r3, [pc, #172]	; (2284 <clock_start+0x194>)
    21d8:	2203      	movs	r2, #3
    21da:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    21dc:	4a26      	ldr	r2, [pc, #152]	; (2278 <clock_start+0x188>)
    21de:	4b26      	ldr	r3, [pc, #152]	; (2278 <clock_start+0x188>)
    21e0:	681b      	ldr	r3, [r3, #0]
    21e2:	f043 0302 	orr.w	r3, r3, #2
    21e6:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    21e8:	4b24      	ldr	r3, [pc, #144]	; (227c <clock_start+0x18c>)
    21ea:	22aa      	movs	r2, #170	; 0xaa
    21ec:	601a      	str	r2, [r3, #0]
    21ee:	4b23      	ldr	r3, [pc, #140]	; (227c <clock_start+0x18c>)
    21f0:	2255      	movs	r2, #85	; 0x55
    21f2:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    21f4:	bf00      	nop
    21f6:	4b22      	ldr	r3, [pc, #136]	; (2280 <clock_start+0x190>)
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    21fe:	2b00      	cmp	r3, #0
    2200:	d0f9      	beq.n	21f6 <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    2202:	4b26      	ldr	r3, [pc, #152]	; (229c <clock_start+0x1ac>)
    2204:	2222      	movs	r2, #34	; 0x22
    2206:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    2208:	4b25      	ldr	r3, [pc, #148]	; (22a0 <clock_start+0x1b0>)
    220a:	22aa      	movs	r2, #170	; 0xaa
    220c:	601a      	str	r2, [r3, #0]
    220e:	4b24      	ldr	r3, [pc, #144]	; (22a0 <clock_start+0x1b0>)
    2210:	2255      	movs	r2, #85	; 0x55
    2212:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    2214:	4a23      	ldr	r2, [pc, #140]	; (22a4 <clock_start+0x1b4>)
    2216:	4b23      	ldr	r3, [pc, #140]	; (22a4 <clock_start+0x1b4>)
    2218:	681b      	ldr	r3, [r3, #0]
    221a:	f043 0301 	orr.w	r3, r3, #1
    221e:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    2220:	4b1f      	ldr	r3, [pc, #124]	; (22a0 <clock_start+0x1b0>)
    2222:	22aa      	movs	r2, #170	; 0xaa
    2224:	601a      	str	r2, [r3, #0]
    2226:	4b1e      	ldr	r3, [pc, #120]	; (22a0 <clock_start+0x1b0>)
    2228:	2255      	movs	r2, #85	; 0x55
    222a:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    222c:	bf00      	nop
    222e:	4b1e      	ldr	r3, [pc, #120]	; (22a8 <clock_start+0x1b8>)
    2230:	681b      	ldr	r3, [r3, #0]
    2232:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2236:	2b00      	cmp	r3, #0
    2238:	d0f9      	beq.n	222e <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    223a:	bf00      	nop
    223c:	4b1a      	ldr	r3, [pc, #104]	; (22a8 <clock_start+0x1b8>)
    223e:	681b      	ldr	r3, [r3, #0]
    2240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2244:	2b00      	cmp	r3, #0
    2246:	d0f9      	beq.n	223c <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    2248:	4a16      	ldr	r2, [pc, #88]	; (22a4 <clock_start+0x1b4>)
    224a:	4b16      	ldr	r3, [pc, #88]	; (22a4 <clock_start+0x1b4>)
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	f043 0302 	orr.w	r3, r3, #2
    2252:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    2254:	4b12      	ldr	r3, [pc, #72]	; (22a0 <clock_start+0x1b0>)
    2256:	22aa      	movs	r2, #170	; 0xaa
    2258:	601a      	str	r2, [r3, #0]
    225a:	4b11      	ldr	r3, [pc, #68]	; (22a0 <clock_start+0x1b0>)
    225c:	2255      	movs	r2, #85	; 0x55
    225e:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    2260:	bf00      	nop
    2262:	4b11      	ldr	r3, [pc, #68]	; (22a8 <clock_start+0x1b8>)
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	f403 7300 	and.w	r3, r3, #512	; 0x200
    226a:	2b00      	cmp	r3, #0
    226c:	d0f9      	beq.n	2262 <clock_start+0x172>
}
    226e:	bd80      	pop	{r7, pc}
    2270:	400fc000 	.word	0x400fc000
    2274:	400fc10c 	.word	0x400fc10c
    2278:	400fc080 	.word	0x400fc080
    227c:	400fc08c 	.word	0x400fc08c
    2280:	400fc088 	.word	0x400fc088
    2284:	400fc104 	.word	0x400fc104
    2288:	400fc1a0 	.word	0x400fc1a0
    228c:	400fc1a8 	.word	0x400fc1a8
    2290:	400fc1ac 	.word	0x400fc1ac
    2294:	400fc084 	.word	0x400fc084
    2298:	00010018 	.word	0x00010018
    229c:	400fc0a4 	.word	0x400fc0a4
    22a0:	400fc0ac 	.word	0x400fc0ac
    22a4:	400fc0a0 	.word	0x400fc0a0
    22a8:	400fc0a8 	.word	0x400fc0a8

000022ac <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    22ac:	b580      	push	{r7, lr}
    22ae:	af00      	add	r7, sp, #0
	all_pins_off();
    22b0:	f7ff fd50 	bl	1d54 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    22b4:	4b0a      	ldr	r3, [pc, #40]	; (22e0 <reset+0x34>)
    22b6:	2202      	movs	r2, #2
    22b8:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    22ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    22be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	f043 0303 	orr.w	r3, r3, #3
    22c8:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    22ca:	4b06      	ldr	r3, [pc, #24]	; (22e4 <reset+0x38>)
    22cc:	22aa      	movs	r2, #170	; 0xaa
    22ce:	601a      	str	r2, [r3, #0]
    22d0:	4b04      	ldr	r3, [pc, #16]	; (22e4 <reset+0x38>)
    22d2:	2255      	movs	r2, #85	; 0x55
    22d4:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    22d6:	2001      	movs	r0, #1
    22d8:	f7ff fcca 	bl	1c70 <wait>
}
    22dc:	bd80      	pop	{r7, pc}
    22de:	bf00      	nop
    22e0:	2009c03c 	.word	0x2009c03c
    22e4:	40000008 	.word	0x40000008

000022e8 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b088      	sub	sp, #32
    22ec:	af00      	add	r7, sp, #0
    22ee:	60f8      	str	r0, [r7, #12]
    22f0:	60b9      	str	r1, [r7, #8]
    22f2:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    22f4:	68fb      	ldr	r3, [r7, #12]
    22f6:	781b      	ldrb	r3, [r3, #0]
    22f8:	095b      	lsrs	r3, r3, #5
    22fa:	b2db      	uxtb	r3, r3
    22fc:	f003 0303 	and.w	r3, r3, #3
    2300:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    2302:	69fb      	ldr	r3, [r7, #28]
    2304:	2b02      	cmp	r3, #2
    2306:	d10e      	bne.n	2326 <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    2308:	2300      	movs	r3, #0
    230a:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    230c:	f107 0314 	add.w	r3, r7, #20
    2310:	68f8      	ldr	r0, [r7, #12]
    2312:	4619      	mov	r1, r3
    2314:	68ba      	ldr	r2, [r7, #8]
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	f000 fcd2 	bl	2cc0 <USBFilterOsVendorMessage>
    231c:	4603      	mov	r3, r0
    231e:	2b00      	cmp	r3, #0
    2320:	d001      	beq.n	2326 <_HandleRequest+0x3e>
			return fFilterStatus;
    2322:	697b      	ldr	r3, [r7, #20]
    2324:	e00f      	b.n	2346 <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    2326:	4a0a      	ldr	r2, [pc, #40]	; (2350 <_HandleRequest+0x68>)
    2328:	69fb      	ldr	r3, [r7, #28]
    232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    232e:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    2330:	69bb      	ldr	r3, [r7, #24]
    2332:	2b00      	cmp	r3, #0
    2334:	d101      	bne.n	233a <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    2336:	2300      	movs	r3, #0
    2338:	e005      	b.n	2346 <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    233a:	69bb      	ldr	r3, [r7, #24]
    233c:	68f8      	ldr	r0, [r7, #12]
    233e:	68b9      	ldr	r1, [r7, #8]
    2340:	687a      	ldr	r2, [r7, #4]
    2342:	4798      	blx	r3
    2344:	4603      	mov	r3, r0
}
    2346:	4618      	mov	r0, r3
    2348:	3720      	adds	r7, #32
    234a:	46bd      	mov	sp, r7
    234c:	bd80      	pop	{r7, pc}
    234e:	bf00      	nop
    2350:	10000568 	.word	0x10000568

00002354 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    2354:	b580      	push	{r7, lr}
    2356:	b084      	sub	sp, #16
    2358:	af00      	add	r7, sp, #0
    235a:	4603      	mov	r3, r0
    235c:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    235e:	2080      	movs	r0, #128	; 0x80
    2360:	2101      	movs	r1, #1
    2362:	f000 fa83 	bl	286c <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    2366:	4b07      	ldr	r3, [pc, #28]	; (2384 <StallControlPipe+0x30>)
    2368:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    236a:	2300      	movs	r3, #0
    236c:	60fb      	str	r3, [r7, #12]
    236e:	e002      	b.n	2376 <StallControlPipe+0x22>
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	3301      	adds	r3, #1
    2374:	60fb      	str	r3, [r7, #12]
    2376:	68fb      	ldr	r3, [r7, #12]
    2378:	2b07      	cmp	r3, #7
    237a:	ddf9      	ble.n	2370 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    237c:	3710      	adds	r7, #16
    237e:	46bd      	mov	sp, r7
    2380:	bd80      	pop	{r7, pc}
    2382:	bf00      	nop
    2384:	10000554 	.word	0x10000554

00002388 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    2388:	b580      	push	{r7, lr}
    238a:	b082      	sub	sp, #8
    238c:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    238e:	4b0e      	ldr	r3, [pc, #56]	; (23c8 <DataIn+0x40>)
    2390:	681b      	ldr	r3, [r3, #0]
    2392:	2b40      	cmp	r3, #64	; 0x40
    2394:	bfa8      	it	ge
    2396:	2340      	movge	r3, #64	; 0x40
    2398:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    239a:	4b0c      	ldr	r3, [pc, #48]	; (23cc <DataIn+0x44>)
    239c:	681a      	ldr	r2, [r3, #0]
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	2080      	movs	r0, #128	; 0x80
    23a2:	4611      	mov	r1, r2
    23a4:	461a      	mov	r2, r3
    23a6:	f000 fa85 	bl	28b4 <USBHwEPWrite>
	pbData += iChunk;
    23aa:	4b08      	ldr	r3, [pc, #32]	; (23cc <DataIn+0x44>)
    23ac:	681a      	ldr	r2, [r3, #0]
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	4413      	add	r3, r2
    23b2:	4a06      	ldr	r2, [pc, #24]	; (23cc <DataIn+0x44>)
    23b4:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    23b6:	4b04      	ldr	r3, [pc, #16]	; (23c8 <DataIn+0x40>)
    23b8:	681a      	ldr	r2, [r3, #0]
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	1ad3      	subs	r3, r2, r3
    23be:	4a02      	ldr	r2, [pc, #8]	; (23c8 <DataIn+0x40>)
    23c0:	6013      	str	r3, [r2, #0]
}
    23c2:	3708      	adds	r7, #8
    23c4:	46bd      	mov	sp, r7
    23c6:	bd80      	pop	{r7, pc}
    23c8:	10000560 	.word	0x10000560
    23cc:	1000055c 	.word	0x1000055c

000023d0 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	b084      	sub	sp, #16
    23d4:	af00      	add	r7, sp, #0
    23d6:	4603      	mov	r3, r0
    23d8:	460a      	mov	r2, r1
    23da:	71fb      	strb	r3, [r7, #7]
    23dc:	4613      	mov	r3, r2
    23de:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    23e0:	79fb      	ldrb	r3, [r7, #7]
    23e2:	2b00      	cmp	r3, #0
    23e4:	f040 8091 	bne.w	250a <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    23e8:	79bb      	ldrb	r3, [r7, #6]
    23ea:	f003 0304 	and.w	r3, r3, #4
    23ee:	2b00      	cmp	r3, #0
    23f0:	d041      	beq.n	2476 <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    23f2:	2000      	movs	r0, #0
    23f4:	4949      	ldr	r1, [pc, #292]	; (251c <USBHandleControlTransfer+0x14c>)
    23f6:	2208      	movs	r2, #8
    23f8:	f000 faaa 	bl	2950 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    23fc:	4b47      	ldr	r3, [pc, #284]	; (251c <USBHandleControlTransfer+0x14c>)
    23fe:	781b      	ldrb	r3, [r3, #0]
    2400:	095b      	lsrs	r3, r3, #5
    2402:	b2db      	uxtb	r3, r3
    2404:	f003 0303 	and.w	r3, r3, #3
    2408:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    240a:	4a45      	ldr	r2, [pc, #276]	; (2520 <USBHandleControlTransfer+0x150>)
    240c:	68fb      	ldr	r3, [r7, #12]
    240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2412:	4a44      	ldr	r2, [pc, #272]	; (2524 <USBHandleControlTransfer+0x154>)
    2414:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    2416:	4b41      	ldr	r3, [pc, #260]	; (251c <USBHandleControlTransfer+0x14c>)
    2418:	88db      	ldrh	r3, [r3, #6]
    241a:	461a      	mov	r2, r3
    241c:	4b42      	ldr	r3, [pc, #264]	; (2528 <USBHandleControlTransfer+0x158>)
    241e:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    2420:	4b3e      	ldr	r3, [pc, #248]	; (251c <USBHandleControlTransfer+0x14c>)
    2422:	88db      	ldrh	r3, [r3, #6]
    2424:	461a      	mov	r2, r3
    2426:	4b41      	ldr	r3, [pc, #260]	; (252c <USBHandleControlTransfer+0x15c>)
    2428:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    242a:	4b3c      	ldr	r3, [pc, #240]	; (251c <USBHandleControlTransfer+0x14c>)
    242c:	88db      	ldrh	r3, [r3, #6]
    242e:	2b00      	cmp	r3, #0
    2430:	d007      	beq.n	2442 <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    2432:	4b3a      	ldr	r3, [pc, #232]	; (251c <USBHandleControlTransfer+0x14c>)
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	09db      	lsrs	r3, r3, #7
    2438:	b2db      	uxtb	r3, r3
    243a:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    243e:	2b00      	cmp	r3, #0
    2440:	d068      	beq.n	2514 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    2442:	4836      	ldr	r0, [pc, #216]	; (251c <USBHandleControlTransfer+0x14c>)
    2444:	4939      	ldr	r1, [pc, #228]	; (252c <USBHandleControlTransfer+0x15c>)
    2446:	4a37      	ldr	r2, [pc, #220]	; (2524 <USBHandleControlTransfer+0x154>)
    2448:	f7ff ff4e 	bl	22e8 <_HandleRequest>
    244c:	4603      	mov	r3, r0
    244e:	2b00      	cmp	r3, #0
    2450:	d104      	bne.n	245c <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    2452:	79bb      	ldrb	r3, [r7, #6]
    2454:	4618      	mov	r0, r3
    2456:	f7ff ff7d 	bl	2354 <StallControlPipe>
					return;
    245a:	e05b      	b.n	2514 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    245c:	4b2f      	ldr	r3, [pc, #188]	; (251c <USBHandleControlTransfer+0x14c>)
    245e:	88db      	ldrh	r3, [r3, #6]
    2460:	461a      	mov	r2, r3
    2462:	4b32      	ldr	r3, [pc, #200]	; (252c <USBHandleControlTransfer+0x15c>)
    2464:	681b      	ldr	r3, [r3, #0]
    2466:	4293      	cmp	r3, r2
    2468:	bfa8      	it	ge
    246a:	4613      	movge	r3, r2
    246c:	4a2e      	ldr	r2, [pc, #184]	; (2528 <USBHandleControlTransfer+0x158>)
    246e:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    2470:	f7ff ff8a 	bl	2388 <DataIn>
    2474:	e04e      	b.n	2514 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    2476:	4b2c      	ldr	r3, [pc, #176]	; (2528 <USBHandleControlTransfer+0x158>)
    2478:	681b      	ldr	r3, [r3, #0]
    247a:	2b00      	cmp	r3, #0
    247c:	dd3e      	ble.n	24fc <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    247e:	4b29      	ldr	r3, [pc, #164]	; (2524 <USBHandleControlTransfer+0x154>)
    2480:	681a      	ldr	r2, [r3, #0]
    2482:	4b29      	ldr	r3, [pc, #164]	; (2528 <USBHandleControlTransfer+0x158>)
    2484:	681b      	ldr	r3, [r3, #0]
    2486:	2000      	movs	r0, #0
    2488:	4611      	mov	r1, r2
    248a:	461a      	mov	r2, r3
    248c:	f000 fa60 	bl	2950 <USBHwEPRead>
    2490:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    2492:	68bb      	ldr	r3, [r7, #8]
    2494:	2b00      	cmp	r3, #0
    2496:	da04      	bge.n	24a2 <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    2498:	79bb      	ldrb	r3, [r7, #6]
    249a:	4618      	mov	r0, r3
    249c:	f7ff ff5a 	bl	2354 <StallControlPipe>
					return;
    24a0:	e038      	b.n	2514 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    24a2:	4b20      	ldr	r3, [pc, #128]	; (2524 <USBHandleControlTransfer+0x154>)
    24a4:	681a      	ldr	r2, [r3, #0]
    24a6:	68bb      	ldr	r3, [r7, #8]
    24a8:	4413      	add	r3, r2
    24aa:	4a1e      	ldr	r2, [pc, #120]	; (2524 <USBHandleControlTransfer+0x154>)
    24ac:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    24ae:	4b1e      	ldr	r3, [pc, #120]	; (2528 <USBHandleControlTransfer+0x158>)
    24b0:	681a      	ldr	r2, [r3, #0]
    24b2:	68bb      	ldr	r3, [r7, #8]
    24b4:	1ad3      	subs	r3, r2, r3
    24b6:	4a1c      	ldr	r2, [pc, #112]	; (2528 <USBHandleControlTransfer+0x158>)
    24b8:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    24ba:	4b1b      	ldr	r3, [pc, #108]	; (2528 <USBHandleControlTransfer+0x158>)
    24bc:	681b      	ldr	r3, [r3, #0]
    24be:	2b00      	cmp	r3, #0
    24c0:	d128      	bne.n	2514 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    24c2:	4b16      	ldr	r3, [pc, #88]	; (251c <USBHandleControlTransfer+0x14c>)
    24c4:	781b      	ldrb	r3, [r3, #0]
    24c6:	095b      	lsrs	r3, r3, #5
    24c8:	b2db      	uxtb	r3, r3
    24ca:	f003 0303 	and.w	r3, r3, #3
    24ce:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    24d0:	4a13      	ldr	r2, [pc, #76]	; (2520 <USBHandleControlTransfer+0x150>)
    24d2:	68fb      	ldr	r3, [r7, #12]
    24d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24d8:	4a12      	ldr	r2, [pc, #72]	; (2524 <USBHandleControlTransfer+0x154>)
    24da:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    24dc:	480f      	ldr	r0, [pc, #60]	; (251c <USBHandleControlTransfer+0x14c>)
    24de:	4913      	ldr	r1, [pc, #76]	; (252c <USBHandleControlTransfer+0x15c>)
    24e0:	4a10      	ldr	r2, [pc, #64]	; (2524 <USBHandleControlTransfer+0x154>)
    24e2:	f7ff ff01 	bl	22e8 <_HandleRequest>
    24e6:	4603      	mov	r3, r0
    24e8:	2b00      	cmp	r3, #0
    24ea:	d104      	bne.n	24f6 <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    24ec:	79bb      	ldrb	r3, [r7, #6]
    24ee:	4618      	mov	r0, r3
    24f0:	f7ff ff30 	bl	2354 <StallControlPipe>
						return;
    24f4:	e00e      	b.n	2514 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    24f6:	f7ff ff47 	bl	2388 <DataIn>
    24fa:	e00b      	b.n	2514 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    24fc:	2000      	movs	r0, #0
    24fe:	2100      	movs	r1, #0
    2500:	2200      	movs	r2, #0
    2502:	f000 fa25 	bl	2950 <USBHwEPRead>
    2506:	60b8      	str	r0, [r7, #8]
    2508:	e004      	b.n	2514 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    250a:	79fb      	ldrb	r3, [r7, #7]
    250c:	2b80      	cmp	r3, #128	; 0x80
    250e:	d101      	bne.n	2514 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    2510:	f7ff ff3a 	bl	2388 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    2514:	3710      	adds	r7, #16
    2516:	46bd      	mov	sp, r7
    2518:	bd80      	pop	{r7, pc}
    251a:	bf00      	nop
    251c:	10000554 	.word	0x10000554
    2520:	10000578 	.word	0x10000578
    2524:	1000055c 	.word	0x1000055c
    2528:	10000560 	.word	0x10000560
    252c:	10000564 	.word	0x10000564

00002530 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    2530:	b480      	push	{r7}
    2532:	b085      	sub	sp, #20
    2534:	af00      	add	r7, sp, #0
    2536:	60f8      	str	r0, [r7, #12]
    2538:	60b9      	str	r1, [r7, #8]
    253a:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    253c:	4907      	ldr	r1, [pc, #28]	; (255c <USBRegisterRequestHandler+0x2c>)
    253e:	68fb      	ldr	r3, [r7, #12]
    2540:	68ba      	ldr	r2, [r7, #8]
    2542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    2546:	4906      	ldr	r1, [pc, #24]	; (2560 <USBRegisterRequestHandler+0x30>)
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	687a      	ldr	r2, [r7, #4]
    254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2550:	3714      	adds	r7, #20
    2552:	46bd      	mov	sp, r7
    2554:	f85d 7b04 	ldr.w	r7, [sp], #4
    2558:	4770      	bx	lr
    255a:	bf00      	nop
    255c:	10000568 	.word	0x10000568
    2560:	10000578 	.word	0x10000578

00002564 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    2564:	b480      	push	{r7}
    2566:	b083      	sub	sp, #12
    2568:	af00      	add	r7, sp, #0
    256a:	4603      	mov	r3, r0
    256c:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    256e:	370c      	adds	r7, #12
    2570:	46bd      	mov	sp, r7
    2572:	f85d 7b04 	ldr.w	r7, [sp], #4
    2576:	4770      	bx	lr

00002578 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    2578:	b580      	push	{r7, lr}
    257a:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    257c:	f000 fb2a 	bl	2bd4 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    2580:	480d      	ldr	r0, [pc, #52]	; (25b8 <USBInit+0x40>)
    2582:	f000 f913 	bl	27ac <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    2586:	2000      	movs	r0, #0
    2588:	490c      	ldr	r1, [pc, #48]	; (25bc <USBInit+0x44>)
    258a:	f000 f8dd 	bl	2748 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    258e:	2080      	movs	r0, #128	; 0x80
    2590:	490a      	ldr	r1, [pc, #40]	; (25bc <USBInit+0x44>)
    2592:	f000 f8d9 	bl	2748 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    2596:	2000      	movs	r0, #0
    2598:	2140      	movs	r1, #64	; 0x40
    259a:	f000 f8b7 	bl	270c <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    259e:	2080      	movs	r0, #128	; 0x80
    25a0:	2140      	movs	r1, #64	; 0x40
    25a2:	f000 f8b3 	bl	270c <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    25a6:	2000      	movs	r0, #0
    25a8:	4905      	ldr	r1, [pc, #20]	; (25c0 <USBInit+0x48>)
    25aa:	4a06      	ldr	r2, [pc, #24]	; (25c4 <USBInit+0x4c>)
    25ac:	f7ff ffc0 	bl	2530 <USBRegisterRequestHandler>

	return TRUE;
    25b0:	2301      	movs	r3, #1
}
    25b2:	4618      	mov	r0, r3
    25b4:	bd80      	pop	{r7, pc}
    25b6:	bf00      	nop
    25b8:	00002565 	.word	0x00002565
    25bc:	000023d1 	.word	0x000023d1
    25c0:	00003195 	.word	0x00003195
    25c4:	10000588 	.word	0x10000588

000025c8 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    25c8:	b480      	push	{r7}
    25ca:	b083      	sub	sp, #12
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    25d0:	bf00      	nop
    25d2:	4b07      	ldr	r3, [pc, #28]	; (25f0 <Wait4DevInt+0x28>)
    25d4:	681a      	ldr	r2, [r3, #0]
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	401a      	ands	r2, r3
    25da:	687b      	ldr	r3, [r7, #4]
    25dc:	429a      	cmp	r2, r3
    25de:	d1f8      	bne.n	25d2 <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    25e0:	4a04      	ldr	r2, [pc, #16]	; (25f4 <Wait4DevInt+0x2c>)
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	6013      	str	r3, [r2, #0]
}
    25e6:	370c      	adds	r7, #12
    25e8:	46bd      	mov	sp, r7
    25ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    25ee:	4770      	bx	lr
    25f0:	5000c200 	.word	0x5000c200
    25f4:	5000c208 	.word	0x5000c208

000025f8 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b082      	sub	sp, #8
    25fc:	af00      	add	r7, sp, #0
    25fe:	4603      	mov	r3, r0
    2600:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    2602:	4b07      	ldr	r3, [pc, #28]	; (2620 <USBHwCmd+0x28>)
    2604:	2230      	movs	r2, #48	; 0x30
    2606:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    2608:	4a06      	ldr	r2, [pc, #24]	; (2624 <USBHwCmd+0x2c>)
    260a:	79fb      	ldrb	r3, [r7, #7]
    260c:	041b      	lsls	r3, r3, #16
    260e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    2612:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    2614:	2010      	movs	r0, #16
    2616:	f7ff ffd7 	bl	25c8 <Wait4DevInt>
}
    261a:	3708      	adds	r7, #8
    261c:	46bd      	mov	sp, r7
    261e:	bd80      	pop	{r7, pc}
    2620:	5000c208 	.word	0x5000c208
    2624:	5000c210 	.word	0x5000c210

00002628 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
    262e:	4603      	mov	r3, r0
    2630:	460a      	mov	r2, r1
    2632:	71fb      	strb	r3, [r7, #7]
    2634:	4613      	mov	r3, r2
    2636:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    2638:	79fb      	ldrb	r3, [r7, #7]
    263a:	4618      	mov	r0, r3
    263c:	f7ff ffdc 	bl	25f8 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    2640:	4a05      	ldr	r2, [pc, #20]	; (2658 <USBHwCmdWrite+0x30>)
    2642:	88bb      	ldrh	r3, [r7, #4]
    2644:	041b      	lsls	r3, r3, #16
    2646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    264a:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    264c:	2010      	movs	r0, #16
    264e:	f7ff ffbb 	bl	25c8 <Wait4DevInt>
}
    2652:	3708      	adds	r7, #8
    2654:	46bd      	mov	sp, r7
    2656:	bd80      	pop	{r7, pc}
    2658:	5000c210 	.word	0x5000c210

0000265c <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    265c:	b580      	push	{r7, lr}
    265e:	b082      	sub	sp, #8
    2660:	af00      	add	r7, sp, #0
    2662:	4603      	mov	r3, r0
    2664:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    2666:	79fb      	ldrb	r3, [r7, #7]
    2668:	4618      	mov	r0, r3
    266a:	f7ff ffc5 	bl	25f8 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    266e:	4a08      	ldr	r2, [pc, #32]	; (2690 <USBHwCmdRead+0x34>)
    2670:	79fb      	ldrb	r3, [r7, #7]
    2672:	041b      	lsls	r3, r3, #16
    2674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2678:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    267a:	2020      	movs	r0, #32
    267c:	f7ff ffa4 	bl	25c8 <Wait4DevInt>
    return USBCmdData;
    2680:	4b04      	ldr	r3, [pc, #16]	; (2694 <USBHwCmdRead+0x38>)
    2682:	681b      	ldr	r3, [r3, #0]
    2684:	b2db      	uxtb	r3, r3
}
    2686:	4618      	mov	r0, r3
    2688:	3708      	adds	r7, #8
    268a:	46bd      	mov	sp, r7
    268c:	bd80      	pop	{r7, pc}
    268e:	bf00      	nop
    2690:	5000c210 	.word	0x5000c210
    2694:	5000c214 	.word	0x5000c214

00002698 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    2698:	b580      	push	{r7, lr}
    269a:	b082      	sub	sp, #8
    269c:	af00      	add	r7, sp, #0
    269e:	6078      	str	r0, [r7, #4]
    26a0:	460b      	mov	r3, r1
    26a2:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    26a4:	490a      	ldr	r1, [pc, #40]	; (26d0 <USBHwEPRealize+0x38>)
    26a6:	4b0a      	ldr	r3, [pc, #40]	; (26d0 <USBHwEPRealize+0x38>)
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	2001      	movs	r0, #1
    26ac:	687a      	ldr	r2, [r7, #4]
    26ae:	fa00 f202 	lsl.w	r2, r0, r2
    26b2:	4313      	orrs	r3, r2
    26b4:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    26b6:	4a07      	ldr	r2, [pc, #28]	; (26d4 <USBHwEPRealize+0x3c>)
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    26bc:	4a06      	ldr	r2, [pc, #24]	; (26d8 <USBHwEPRealize+0x40>)
    26be:	887b      	ldrh	r3, [r7, #2]
    26c0:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    26c2:	f44f 7080 	mov.w	r0, #256	; 0x100
    26c6:	f7ff ff7f 	bl	25c8 <Wait4DevInt>
}
    26ca:	3708      	adds	r7, #8
    26cc:	46bd      	mov	sp, r7
    26ce:	bd80      	pop	{r7, pc}
    26d0:	5000c244 	.word	0x5000c244
    26d4:	5000c248 	.word	0x5000c248
    26d8:	5000c24c 	.word	0x5000c24c

000026dc <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    26dc:	b580      	push	{r7, lr}
    26de:	b082      	sub	sp, #8
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
    26e4:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	b2db      	uxtb	r3, r3
    26ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26ee:	b2db      	uxtb	r3, r3
    26f0:	b2da      	uxtb	r2, r3
    26f2:	683b      	ldr	r3, [r7, #0]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d001      	beq.n	26fc <USBHwEPEnable+0x20>
    26f8:	2300      	movs	r3, #0
    26fa:	e000      	b.n	26fe <USBHwEPEnable+0x22>
    26fc:	2320      	movs	r3, #32
    26fe:	4610      	mov	r0, r2
    2700:	4619      	mov	r1, r3
    2702:	f7ff ff91 	bl	2628 <USBHwCmdWrite>
}
    2706:	3708      	adds	r7, #8
    2708:	46bd      	mov	sp, r7
    270a:	bd80      	pop	{r7, pc}

0000270c <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    270c:	b580      	push	{r7, lr}
    270e:	b084      	sub	sp, #16
    2710:	af00      	add	r7, sp, #0
    2712:	4603      	mov	r3, r0
    2714:	460a      	mov	r2, r1
    2716:	71fb      	strb	r3, [r7, #7]
    2718:	4613      	mov	r3, r2
    271a:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    271c:	79fb      	ldrb	r3, [r7, #7]
    271e:	f003 030f 	and.w	r3, r3, #15
    2722:	005b      	lsls	r3, r3, #1
    2724:	79fa      	ldrb	r2, [r7, #7]
    2726:	09d2      	lsrs	r2, r2, #7
    2728:	b2d2      	uxtb	r2, r2
    272a:	4313      	orrs	r3, r2
    272c:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    272e:	88bb      	ldrh	r3, [r7, #4]
    2730:	68f8      	ldr	r0, [r7, #12]
    2732:	4619      	mov	r1, r3
    2734:	f7ff ffb0 	bl	2698 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    2738:	68f8      	ldr	r0, [r7, #12]
    273a:	2101      	movs	r1, #1
    273c:	f7ff ffce 	bl	26dc <USBHwEPEnable>
}
    2740:	3710      	adds	r7, #16
    2742:	46bd      	mov	sp, r7
    2744:	bd80      	pop	{r7, pc}
    2746:	bf00      	nop

00002748 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    2748:	b480      	push	{r7}
    274a:	b085      	sub	sp, #20
    274c:	af00      	add	r7, sp, #0
    274e:	4603      	mov	r3, r0
    2750:	6039      	str	r1, [r7, #0]
    2752:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    2754:	79fb      	ldrb	r3, [r7, #7]
    2756:	f003 030f 	and.w	r3, r3, #15
    275a:	005b      	lsls	r3, r3, #1
    275c:	79fa      	ldrb	r2, [r7, #7]
    275e:	09d2      	lsrs	r2, r2, #7
    2760:	b2d2      	uxtb	r2, r2
    2762:	4313      	orrs	r3, r2
    2764:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    2766:	68fb      	ldr	r3, [r7, #12]
    2768:	0fda      	lsrs	r2, r3, #31
    276a:	4413      	add	r3, r2
    276c:	105b      	asrs	r3, r3, #1
    276e:	4619      	mov	r1, r3
    2770:	4a0b      	ldr	r2, [pc, #44]	; (27a0 <USBHwRegisterEPIntHandler+0x58>)
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    2778:	490a      	ldr	r1, [pc, #40]	; (27a4 <USBHwRegisterEPIntHandler+0x5c>)
    277a:	4b0a      	ldr	r3, [pc, #40]	; (27a4 <USBHwRegisterEPIntHandler+0x5c>)
    277c:	681b      	ldr	r3, [r3, #0]
    277e:	2001      	movs	r0, #1
    2780:	68fa      	ldr	r2, [r7, #12]
    2782:	fa00 f202 	lsl.w	r2, r0, r2
    2786:	4313      	orrs	r3, r2
    2788:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    278a:	4a07      	ldr	r2, [pc, #28]	; (27a8 <USBHwRegisterEPIntHandler+0x60>)
    278c:	4b06      	ldr	r3, [pc, #24]	; (27a8 <USBHwRegisterEPIntHandler+0x60>)
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	f043 0304 	orr.w	r3, r3, #4
    2794:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    2796:	3714      	adds	r7, #20
    2798:	46bd      	mov	sp, r7
    279a:	f85d 7b04 	ldr.w	r7, [sp], #4
    279e:	4770      	bx	lr
    27a0:	10000594 	.word	0x10000594
    27a4:	5000c234 	.word	0x5000c234
    27a8:	5000c204 	.word	0x5000c204

000027ac <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    27ac:	b480      	push	{r7}
    27ae:	b083      	sub	sp, #12
    27b0:	af00      	add	r7, sp, #0
    27b2:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    27b4:	4a06      	ldr	r2, [pc, #24]	; (27d0 <USBHwRegisterDevIntHandler+0x24>)
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    27ba:	4a06      	ldr	r2, [pc, #24]	; (27d4 <USBHwRegisterDevIntHandler+0x28>)
    27bc:	4b05      	ldr	r3, [pc, #20]	; (27d4 <USBHwRegisterDevIntHandler+0x28>)
    27be:	681b      	ldr	r3, [r3, #0]
    27c0:	f043 0308 	orr.w	r3, r3, #8
    27c4:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    27c6:	370c      	adds	r7, #12
    27c8:	46bd      	mov	sp, r7
    27ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ce:	4770      	bx	lr
    27d0:	10000590 	.word	0x10000590
    27d4:	5000c204 	.word	0x5000c204

000027d8 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    27d8:	b580      	push	{r7, lr}
    27da:	b082      	sub	sp, #8
    27dc:	af00      	add	r7, sp, #0
    27de:	4603      	mov	r3, r0
    27e0:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    27e2:	79fb      	ldrb	r3, [r7, #7]
    27e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    27e8:	b2db      	uxtb	r3, r3
    27ea:	b29b      	uxth	r3, r3
    27ec:	20d0      	movs	r0, #208	; 0xd0
    27ee:	4619      	mov	r1, r3
    27f0:	f7ff ff1a 	bl	2628 <USBHwCmdWrite>
}
    27f4:	3708      	adds	r7, #8
    27f6:	46bd      	mov	sp, r7
    27f8:	bd80      	pop	{r7, pc}
    27fa:	bf00      	nop

000027fc <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    27fc:	b580      	push	{r7, lr}
    27fe:	b082      	sub	sp, #8
    2800:	af00      	add	r7, sp, #0
    2802:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	2b00      	cmp	r3, #0
    2808:	bf14      	ite	ne
    280a:	2301      	movne	r3, #1
    280c:	2300      	moveq	r3, #0
    280e:	b2db      	uxtb	r3, r3
    2810:	b29b      	uxth	r3, r3
    2812:	20fe      	movs	r0, #254	; 0xfe
    2814:	4619      	mov	r1, r3
    2816:	f7ff ff07 	bl	2628 <USBHwCmdWrite>
}
    281a:	3708      	adds	r7, #8
    281c:	46bd      	mov	sp, r7
    281e:	bd80      	pop	{r7, pc}

00002820 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    2820:	b580      	push	{r7, lr}
    2822:	b082      	sub	sp, #8
    2824:	af00      	add	r7, sp, #0
    2826:	4603      	mov	r3, r0
    2828:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    282a:	79fb      	ldrb	r3, [r7, #7]
    282c:	b29b      	uxth	r3, r3
    282e:	20f3      	movs	r0, #243	; 0xf3
    2830:	4619      	mov	r1, r3
    2832:	f7ff fef9 	bl	2628 <USBHwCmdWrite>
}
    2836:	3708      	adds	r7, #8
    2838:	46bd      	mov	sp, r7
    283a:	bd80      	pop	{r7, pc}

0000283c <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    283c:	b580      	push	{r7, lr}
    283e:	b084      	sub	sp, #16
    2840:	af00      	add	r7, sp, #0
    2842:	4603      	mov	r3, r0
    2844:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    2846:	79fb      	ldrb	r3, [r7, #7]
    2848:	f003 030f 	and.w	r3, r3, #15
    284c:	005b      	lsls	r3, r3, #1
    284e:	79fa      	ldrb	r2, [r7, #7]
    2850:	09d2      	lsrs	r2, r2, #7
    2852:	b2d2      	uxtb	r2, r2
    2854:	4313      	orrs	r3, r2
    2856:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    2858:	68fb      	ldr	r3, [r7, #12]
    285a:	b2db      	uxtb	r3, r3
    285c:	4618      	mov	r0, r3
    285e:	f7ff fefd 	bl	265c <USBHwCmdRead>
    2862:	4603      	mov	r3, r0
}
    2864:	4618      	mov	r0, r3
    2866:	3710      	adds	r7, #16
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}

0000286c <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    286c:	b580      	push	{r7, lr}
    286e:	b084      	sub	sp, #16
    2870:	af00      	add	r7, sp, #0
    2872:	4603      	mov	r3, r0
    2874:	6039      	str	r1, [r7, #0]
    2876:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    2878:	79fb      	ldrb	r3, [r7, #7]
    287a:	f003 030f 	and.w	r3, r3, #15
    287e:	005b      	lsls	r3, r3, #1
    2880:	79fa      	ldrb	r2, [r7, #7]
    2882:	09d2      	lsrs	r2, r2, #7
    2884:	b2d2      	uxtb	r2, r2
    2886:	4313      	orrs	r3, r2
    2888:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    288a:	68fb      	ldr	r3, [r7, #12]
    288c:	b2db      	uxtb	r3, r3
    288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2892:	b2db      	uxtb	r3, r3
    2894:	b2da      	uxtb	r2, r3
    2896:	683b      	ldr	r3, [r7, #0]
    2898:	2b00      	cmp	r3, #0
    289a:	bf14      	ite	ne
    289c:	2301      	movne	r3, #1
    289e:	2300      	moveq	r3, #0
    28a0:	b2db      	uxtb	r3, r3
    28a2:	b29b      	uxth	r3, r3
    28a4:	4610      	mov	r0, r2
    28a6:	4619      	mov	r1, r3
    28a8:	f7ff febe 	bl	2628 <USBHwCmdWrite>
}
    28ac:	3710      	adds	r7, #16
    28ae:	46bd      	mov	sp, r7
    28b0:	bd80      	pop	{r7, pc}
    28b2:	bf00      	nop

000028b4 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b086      	sub	sp, #24
    28b8:	af00      	add	r7, sp, #0
    28ba:	4603      	mov	r3, r0
    28bc:	60b9      	str	r1, [r7, #8]
    28be:	607a      	str	r2, [r7, #4]
    28c0:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    28c2:	7bfb      	ldrb	r3, [r7, #15]
    28c4:	f003 030f 	and.w	r3, r3, #15
    28c8:	005b      	lsls	r3, r3, #1
    28ca:	7bfa      	ldrb	r2, [r7, #15]
    28cc:	09d2      	lsrs	r2, r2, #7
    28ce:	b2d2      	uxtb	r2, r2
    28d0:	4313      	orrs	r3, r2
    28d2:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    28d4:	4a1b      	ldr	r2, [pc, #108]	; (2944 <USBHwEPWrite+0x90>)
    28d6:	7bfb      	ldrb	r3, [r7, #15]
    28d8:	f003 030f 	and.w	r3, r3, #15
    28dc:	009b      	lsls	r3, r3, #2
    28de:	f043 0302 	orr.w	r3, r3, #2
    28e2:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    28e4:	4a18      	ldr	r2, [pc, #96]	; (2948 <USBHwEPWrite+0x94>)
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    28ea:	e015      	b.n	2918 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    28ec:	4917      	ldr	r1, [pc, #92]	; (294c <USBHwEPWrite+0x98>)
    28ee:	68bb      	ldr	r3, [r7, #8]
    28f0:	3303      	adds	r3, #3
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	061a      	lsls	r2, r3, #24
    28f6:	68bb      	ldr	r3, [r7, #8]
    28f8:	3302      	adds	r3, #2
    28fa:	781b      	ldrb	r3, [r3, #0]
    28fc:	041b      	lsls	r3, r3, #16
    28fe:	431a      	orrs	r2, r3
    2900:	68bb      	ldr	r3, [r7, #8]
    2902:	3301      	adds	r3, #1
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	021b      	lsls	r3, r3, #8
    2908:	4313      	orrs	r3, r2
    290a:	68ba      	ldr	r2, [r7, #8]
    290c:	7812      	ldrb	r2, [r2, #0]
    290e:	4313      	orrs	r3, r2
    2910:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    2912:	68bb      	ldr	r3, [r7, #8]
    2914:	3304      	adds	r3, #4
    2916:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    2918:	4b0a      	ldr	r3, [pc, #40]	; (2944 <USBHwEPWrite+0x90>)
    291a:	681b      	ldr	r3, [r3, #0]
    291c:	f003 0302 	and.w	r3, r3, #2
    2920:	2b00      	cmp	r3, #0
    2922:	d1e3      	bne.n	28ec <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    2924:	4b07      	ldr	r3, [pc, #28]	; (2944 <USBHwEPWrite+0x90>)
    2926:	2200      	movs	r2, #0
    2928:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    292a:	697b      	ldr	r3, [r7, #20]
    292c:	b2db      	uxtb	r3, r3
    292e:	4618      	mov	r0, r3
    2930:	f7ff fe62 	bl	25f8 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    2934:	20fa      	movs	r0, #250	; 0xfa
    2936:	f7ff fe5f 	bl	25f8 <USBHwCmd>
    
    return iLen;
    293a:	687b      	ldr	r3, [r7, #4]
}
    293c:	4618      	mov	r0, r3
    293e:	3718      	adds	r7, #24
    2940:	46bd      	mov	sp, r7
    2942:	bd80      	pop	{r7, pc}
    2944:	5000c228 	.word	0x5000c228
    2948:	5000c224 	.word	0x5000c224
    294c:	5000c21c 	.word	0x5000c21c

00002950 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    2950:	b580      	push	{r7, lr}
    2952:	b088      	sub	sp, #32
    2954:	af00      	add	r7, sp, #0
    2956:	4603      	mov	r3, r0
    2958:	60b9      	str	r1, [r7, #8]
    295a:	607a      	str	r2, [r7, #4]
    295c:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    295e:	7bfb      	ldrb	r3, [r7, #15]
    2960:	f003 030f 	and.w	r3, r3, #15
    2964:	005b      	lsls	r3, r3, #1
    2966:	7bfa      	ldrb	r2, [r7, #15]
    2968:	09d2      	lsrs	r2, r2, #7
    296a:	b2d2      	uxtb	r2, r2
    296c:	4313      	orrs	r3, r2
    296e:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    2970:	4a27      	ldr	r2, [pc, #156]	; (2a10 <USBHwEPRead+0xc0>)
    2972:	7bfb      	ldrb	r3, [r7, #15]
    2974:	f003 030f 	and.w	r3, r3, #15
    2978:	009b      	lsls	r3, r3, #2
    297a:	f043 0301 	orr.w	r3, r3, #1
    297e:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    2980:	4b24      	ldr	r3, [pc, #144]	; (2a14 <USBHwEPRead+0xc4>)
    2982:	681b      	ldr	r3, [r3, #0]
    2984:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    2986:	693b      	ldr	r3, [r7, #16]
    2988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    298c:	2b00      	cmp	r3, #0
    298e:	d0f7      	beq.n	2980 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    2990:	693b      	ldr	r3, [r7, #16]
    2992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2996:	2b00      	cmp	r3, #0
    2998:	d102      	bne.n	29a0 <USBHwEPRead+0x50>
        return -1;
    299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    299e:	e033      	b.n	2a08 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    29a0:	693b      	ldr	r3, [r7, #16]
    29a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    29a6:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    29a8:	2300      	movs	r3, #0
    29aa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    29ac:	2300      	movs	r3, #0
    29ae:	61fb      	str	r3, [r7, #28]
    29b0:	e01a      	b.n	29e8 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    29b2:	69fb      	ldr	r3, [r7, #28]
    29b4:	f003 0303 	and.w	r3, r3, #3
    29b8:	2b00      	cmp	r3, #0
    29ba:	d102      	bne.n	29c2 <USBHwEPRead+0x72>
            dwData = USBRxData;
    29bc:	4b16      	ldr	r3, [pc, #88]	; (2a18 <USBHwEPRead+0xc8>)
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    29c2:	68bb      	ldr	r3, [r7, #8]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d009      	beq.n	29dc <USBHwEPRead+0x8c>
    29c8:	69fa      	ldr	r2, [r7, #28]
    29ca:	687b      	ldr	r3, [r7, #4]
    29cc:	429a      	cmp	r2, r3
    29ce:	d205      	bcs.n	29dc <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    29d0:	68ba      	ldr	r2, [r7, #8]
    29d2:	69fb      	ldr	r3, [r7, #28]
    29d4:	4413      	add	r3, r2
    29d6:	69ba      	ldr	r2, [r7, #24]
    29d8:	b2d2      	uxtb	r2, r2
    29da:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    29dc:	69bb      	ldr	r3, [r7, #24]
    29de:	0a1b      	lsrs	r3, r3, #8
    29e0:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    29e2:	69fb      	ldr	r3, [r7, #28]
    29e4:	3301      	adds	r3, #1
    29e6:	61fb      	str	r3, [r7, #28]
    29e8:	69fa      	ldr	r2, [r7, #28]
    29ea:	693b      	ldr	r3, [r7, #16]
    29ec:	429a      	cmp	r2, r3
    29ee:	d3e0      	bcc.n	29b2 <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    29f0:	4b07      	ldr	r3, [pc, #28]	; (2a10 <USBHwEPRead+0xc0>)
    29f2:	2200      	movs	r2, #0
    29f4:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    29f6:	697b      	ldr	r3, [r7, #20]
    29f8:	b2db      	uxtb	r3, r3
    29fa:	4618      	mov	r0, r3
    29fc:	f7ff fdfc 	bl	25f8 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    2a00:	20f2      	movs	r0, #242	; 0xf2
    2a02:	f7ff fdf9 	bl	25f8 <USBHwCmd>
    
    return dwLen;
    2a06:	693b      	ldr	r3, [r7, #16]
}
    2a08:	4618      	mov	r0, r3
    2a0a:	3720      	adds	r7, #32
    2a0c:	46bd      	mov	sp, r7
    2a0e:	bd80      	pop	{r7, pc}
    2a10:	5000c228 	.word	0x5000c228
    2a14:	5000c220 	.word	0x5000c220
    2a18:	5000c218 	.word	0x5000c218

00002a1c <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    2a1c:	b580      	push	{r7, lr}
    2a1e:	b082      	sub	sp, #8
    2a20:	af00      	add	r7, sp, #0
    2a22:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	2b00      	cmp	r3, #0
    2a28:	bf14      	ite	ne
    2a2a:	2301      	movne	r3, #1
    2a2c:	2300      	moveq	r3, #0
    2a2e:	b2db      	uxtb	r3, r3
    2a30:	b29b      	uxth	r3, r3
    2a32:	20d8      	movs	r0, #216	; 0xd8
    2a34:	4619      	mov	r1, r3
    2a36:	f7ff fdf7 	bl	2628 <USBHwCmdWrite>
}
    2a3a:	3708      	adds	r7, #8
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bd80      	pop	{r7, pc}

00002a40 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	b086      	sub	sp, #24
    2a44:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    2a46:	4b5b      	ldr	r3, [pc, #364]	; (2bb4 <USBHwISR+0x174>)
    2a48:	681b      	ldr	r3, [r3, #0]
    2a4a:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    2a4c:	693b      	ldr	r3, [r7, #16]
    2a4e:	f003 0301 	and.w	r3, r3, #1
    2a52:	2b00      	cmp	r3, #0
    2a54:	d010      	beq.n	2a78 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    2a56:	4b58      	ldr	r3, [pc, #352]	; (2bb8 <USBHwISR+0x178>)
    2a58:	2201      	movs	r2, #1
    2a5a:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    2a5c:	4b57      	ldr	r3, [pc, #348]	; (2bbc <USBHwISR+0x17c>)
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d009      	beq.n	2a78 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    2a64:	20f5      	movs	r0, #245	; 0xf5
    2a66:	f7ff fdf9 	bl	265c <USBHwCmdRead>
    2a6a:	4603      	mov	r3, r0
    2a6c:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    2a6e:	4b53      	ldr	r3, [pc, #332]	; (2bbc <USBHwISR+0x17c>)
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	89fa      	ldrh	r2, [r7, #14]
    2a74:	4610      	mov	r0, r2
    2a76:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    2a78:	693b      	ldr	r3, [r7, #16]
    2a7a:	f003 0308 	and.w	r3, r3, #8
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d02b      	beq.n	2ada <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    2a82:	4b4d      	ldr	r3, [pc, #308]	; (2bb8 <USBHwISR+0x178>)
    2a84:	2208      	movs	r2, #8
    2a86:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    2a88:	20fe      	movs	r0, #254	; 0xfe
    2a8a:	f7ff fde7 	bl	265c <USBHwCmdRead>
    2a8e:	4603      	mov	r3, r0
    2a90:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    2a92:	7b7b      	ldrb	r3, [r7, #13]
    2a94:	f003 031a 	and.w	r3, r3, #26
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d01e      	beq.n	2ada <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    2a9c:	7b7b      	ldrb	r3, [r7, #13]
    2a9e:	f003 0301 	and.w	r3, r3, #1
    2aa2:	2b00      	cmp	r3, #0
    2aa4:	bf14      	ite	ne
    2aa6:	2301      	movne	r3, #1
    2aa8:	2300      	moveq	r3, #0
    2aaa:	b2db      	uxtb	r3, r3
    2aac:	b2da      	uxtb	r2, r3
    2aae:	7b7b      	ldrb	r3, [r7, #13]
    2ab0:	f003 0304 	and.w	r3, r3, #4
    2ab4:	b2db      	uxtb	r3, r3
    2ab6:	4313      	orrs	r3, r2
    2ab8:	b2da      	uxtb	r2, r3
    2aba:	7b7b      	ldrb	r3, [r7, #13]
    2abc:	f003 0310 	and.w	r3, r3, #16
    2ac0:	b2db      	uxtb	r3, r3
    2ac2:	4313      	orrs	r3, r2
    2ac4:	b2db      	uxtb	r3, r3
    2ac6:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    2ac8:	4b3d      	ldr	r3, [pc, #244]	; (2bc0 <USBHwISR+0x180>)
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d004      	beq.n	2ada <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    2ad0:	4b3b      	ldr	r3, [pc, #236]	; (2bc0 <USBHwISR+0x180>)
    2ad2:	681b      	ldr	r3, [r3, #0]
    2ad4:	7b3a      	ldrb	r2, [r7, #12]
    2ad6:	4610      	mov	r0, r2
    2ad8:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    2ada:	693b      	ldr	r3, [r7, #16]
    2adc:	f003 0304 	and.w	r3, r3, #4
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d063      	beq.n	2bac <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    2ae4:	4b34      	ldr	r3, [pc, #208]	; (2bb8 <USBHwISR+0x178>)
    2ae6:	2204      	movs	r2, #4
    2ae8:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    2aea:	2300      	movs	r3, #0
    2aec:	617b      	str	r3, [r7, #20]
    2aee:	e05a      	b.n	2ba6 <USBHwISR+0x166>
            dwIntBit = (1 << i);
    2af0:	2201      	movs	r2, #1
    2af2:	697b      	ldr	r3, [r7, #20]
    2af4:	fa02 f303 	lsl.w	r3, r2, r3
    2af8:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    2afa:	4b32      	ldr	r3, [pc, #200]	; (2bc4 <USBHwISR+0x184>)
    2afc:	681a      	ldr	r2, [r3, #0]
    2afe:	68bb      	ldr	r3, [r7, #8]
    2b00:	4013      	ands	r3, r2
    2b02:	2b00      	cmp	r3, #0
    2b04:	d04c      	beq.n	2ba0 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    2b06:	4a30      	ldr	r2, [pc, #192]	; (2bc8 <USBHwISR+0x188>)
    2b08:	68bb      	ldr	r3, [r7, #8]
    2b0a:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    2b0c:	2020      	movs	r0, #32
    2b0e:	f7ff fd5b 	bl	25c8 <Wait4DevInt>
                bEPStat = USBCmdData;
    2b12:	4b2e      	ldr	r3, [pc, #184]	; (2bcc <USBHwISR+0x18c>)
    2b14:	681b      	ldr	r3, [r3, #0]
    2b16:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    2b18:	79fb      	ldrb	r3, [r7, #7]
    2b1a:	f003 0301 	and.w	r3, r3, #1
    2b1e:	2b00      	cmp	r3, #0
    2b20:	bf14      	ite	ne
    2b22:	2301      	movne	r3, #1
    2b24:	2300      	moveq	r3, #0
    2b26:	b2db      	uxtb	r3, r3
    2b28:	b2da      	uxtb	r2, r3
    2b2a:	79fb      	ldrb	r3, [r7, #7]
    2b2c:	f003 0302 	and.w	r3, r3, #2
    2b30:	b2db      	uxtb	r3, r3
    2b32:	4313      	orrs	r3, r2
    2b34:	b2da      	uxtb	r2, r3
    2b36:	79fb      	ldrb	r3, [r7, #7]
    2b38:	f003 0304 	and.w	r3, r3, #4
    2b3c:	b2db      	uxtb	r3, r3
    2b3e:	4313      	orrs	r3, r2
    2b40:	b2da      	uxtb	r2, r3
    2b42:	79fb      	ldrb	r3, [r7, #7]
    2b44:	f003 0310 	and.w	r3, r3, #16
    2b48:	b2db      	uxtb	r3, r3
    2b4a:	4313      	orrs	r3, r2
    2b4c:	b2da      	uxtb	r2, r3
    2b4e:	79fb      	ldrb	r3, [r7, #7]
    2b50:	f003 0308 	and.w	r3, r3, #8
    2b54:	b2db      	uxtb	r3, r3
    2b56:	4313      	orrs	r3, r2
    2b58:	b2db      	uxtb	r3, r3
    2b5a:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    2b5c:	697b      	ldr	r3, [r7, #20]
    2b5e:	0fda      	lsrs	r2, r3, #31
    2b60:	4413      	add	r3, r2
    2b62:	105b      	asrs	r3, r3, #1
    2b64:	461a      	mov	r2, r3
    2b66:	4b1a      	ldr	r3, [pc, #104]	; (2bd0 <USBHwISR+0x190>)
    2b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d017      	beq.n	2ba0 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    2b70:	697b      	ldr	r3, [r7, #20]
    2b72:	0fda      	lsrs	r2, r3, #31
    2b74:	4413      	add	r3, r2
    2b76:	105b      	asrs	r3, r3, #1
    2b78:	461a      	mov	r2, r3
    2b7a:	4b15      	ldr	r3, [pc, #84]	; (2bd0 <USBHwISR+0x190>)
    2b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2b80:	697a      	ldr	r2, [r7, #20]
    2b82:	01d2      	lsls	r2, r2, #7
    2b84:	b2d1      	uxtb	r1, r2
    2b86:	697a      	ldr	r2, [r7, #20]
    2b88:	1052      	asrs	r2, r2, #1
    2b8a:	b2d2      	uxtb	r2, r2
    2b8c:	f002 020f 	and.w	r2, r2, #15
    2b90:	b2d2      	uxtb	r2, r2
    2b92:	430a      	orrs	r2, r1
    2b94:	b2d2      	uxtb	r2, r2
    2b96:	b2d1      	uxtb	r1, r2
    2b98:	7b3a      	ldrb	r2, [r7, #12]
    2b9a:	4608      	mov	r0, r1
    2b9c:	4611      	mov	r1, r2
    2b9e:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    2ba0:	697b      	ldr	r3, [r7, #20]
    2ba2:	3301      	adds	r3, #1
    2ba4:	617b      	str	r3, [r7, #20]
    2ba6:	697b      	ldr	r3, [r7, #20]
    2ba8:	2b1f      	cmp	r3, #31
    2baa:	dda1      	ble.n	2af0 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    2bac:	3718      	adds	r7, #24
    2bae:	46bd      	mov	sp, r7
    2bb0:	bd80      	pop	{r7, pc}
    2bb2:	bf00      	nop
    2bb4:	5000c200 	.word	0x5000c200
    2bb8:	5000c208 	.word	0x5000c208
    2bbc:	100005d4 	.word	0x100005d4
    2bc0:	10000590 	.word	0x10000590
    2bc4:	5000c230 	.word	0x5000c230
    2bc8:	5000c238 	.word	0x5000c238
    2bcc:	5000c214 	.word	0x5000c214
    2bd0:	10000594 	.word	0x10000594

00002bd4 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    2bd8:	4a2d      	ldr	r2, [pc, #180]	; (2c90 <USBHwInit+0xbc>)
    2bda:	4b2d      	ldr	r3, [pc, #180]	; (2c90 <USBHwInit+0xbc>)
    2bdc:	681b      	ldr	r3, [r3, #0]
    2bde:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    2be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2be6:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    2be8:	4a2a      	ldr	r2, [pc, #168]	; (2c94 <USBHwInit+0xc0>)
    2bea:	4b2a      	ldr	r3, [pc, #168]	; (2c94 <USBHwInit+0xc0>)
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2bf2:	f043 0310 	orr.w	r3, r3, #16
    2bf6:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    2bf8:	4a26      	ldr	r2, [pc, #152]	; (2c94 <USBHwInit+0xc0>)
    2bfa:	4b26      	ldr	r3, [pc, #152]	; (2c94 <USBHwInit+0xc0>)
    2bfc:	681b      	ldr	r3, [r3, #0]
    2bfe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    2c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2c06:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    2c08:	4a23      	ldr	r2, [pc, #140]	; (2c98 <USBHwInit+0xc4>)
    2c0a:	4b23      	ldr	r3, [pc, #140]	; (2c98 <USBHwInit+0xc4>)
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    2c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    2c16:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    2c18:	4a1f      	ldr	r2, [pc, #124]	; (2c98 <USBHwInit+0xc4>)
    2c1a:	4b1f      	ldr	r3, [pc, #124]	; (2c98 <USBHwInit+0xc4>)
    2c1c:	681b      	ldr	r3, [r3, #0]
    2c1e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    2c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2c26:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    2c28:	4a1c      	ldr	r2, [pc, #112]	; (2c9c <USBHwInit+0xc8>)
    2c2a:	4b1c      	ldr	r3, [pc, #112]	; (2c9c <USBHwInit+0xc8>)
    2c2c:	681b      	ldr	r3, [r3, #0]
    2c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2c32:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    2c34:	4a1a      	ldr	r2, [pc, #104]	; (2ca0 <USBHwInit+0xcc>)
    2c36:	4b1a      	ldr	r3, [pc, #104]	; (2ca0 <USBHwInit+0xcc>)
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	f043 0312 	orr.w	r3, r3, #18
    2c3e:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    2c40:	bf00      	nop
    2c42:	4b18      	ldr	r3, [pc, #96]	; (2ca4 <USBHwInit+0xd0>)
    2c44:	681b      	ldr	r3, [r3, #0]
    2c46:	f003 0302 	and.w	r3, r3, #2
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d0f9      	beq.n	2c42 <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    2c4e:	bf00      	nop
    2c50:	4b14      	ldr	r3, [pc, #80]	; (2ca4 <USBHwInit+0xd0>)
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	f003 0310 	and.w	r3, r3, #16
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d0f9      	beq.n	2c50 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    2c5c:	4b12      	ldr	r3, [pc, #72]	; (2ca8 <USBHwInit+0xd4>)
    2c5e:	2200      	movs	r2, #0
    2c60:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    2c62:	4b12      	ldr	r3, [pc, #72]	; (2cac <USBHwInit+0xd8>)
    2c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c68:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    2c6a:	4b11      	ldr	r3, [pc, #68]	; (2cb0 <USBHwInit+0xdc>)
    2c6c:	2200      	movs	r2, #0
    2c6e:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    2c70:	4b10      	ldr	r3, [pc, #64]	; (2cb4 <USBHwInit+0xe0>)
    2c72:	2200      	movs	r2, #0
    2c74:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    2c76:	4b10      	ldr	r3, [pc, #64]	; (2cb8 <USBHwInit+0xe4>)
    2c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c7c:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    2c7e:	4b0f      	ldr	r3, [pc, #60]	; (2cbc <USBHwInit+0xe8>)
    2c80:	2200      	movs	r2, #0
    2c82:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    2c84:	2000      	movs	r0, #0
    2c86:	f7ff fdcb 	bl	2820 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    2c8a:	2301      	movs	r3, #1
}
    2c8c:	4618      	mov	r0, r3
    2c8e:	bd80      	pop	{r7, pc}
    2c90:	4002c010 	.word	0x4002c010
    2c94:	4002c00c 	.word	0x4002c00c
    2c98:	4002c004 	.word	0x4002c004
    2c9c:	400fc0c4 	.word	0x400fc0c4
    2ca0:	5000cff4 	.word	0x5000cff4
    2ca4:	5000cff8 	.word	0x5000cff8
    2ca8:	5000c204 	.word	0x5000c204
    2cac:	5000c208 	.word	0x5000c208
    2cb0:	5000c22c 	.word	0x5000c22c
    2cb4:	5000c234 	.word	0x5000c234
    2cb8:	5000c238 	.word	0x5000c238
    2cbc:	5000c240 	.word	0x5000c240

00002cc0 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    2cc0:	b480      	push	{r7}
    2cc2:	b089      	sub	sp, #36	; 0x24
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	60f8      	str	r0, [r7, #12]
    2cc8:	60b9      	str	r1, [r7, #8]
    2cca:	607a      	str	r2, [r7, #4]
    2ccc:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    2cce:	4b2d      	ldr	r3, [pc, #180]	; (2d84 <USBFilterOsVendorMessage+0xc4>)
    2cd0:	781b      	ldrb	r3, [r3, #0]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d101      	bne.n	2cda <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    2cd6:	2300      	movs	r3, #0
    2cd8:	e04e      	b.n	2d78 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    2cda:	68fb      	ldr	r3, [r7, #12]
    2cdc:	785a      	ldrb	r2, [r3, #1]
    2cde:	4b29      	ldr	r3, [pc, #164]	; (2d84 <USBFilterOsVendorMessage+0xc4>)
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	429a      	cmp	r2, r3
    2ce4:	d147      	bne.n	2d76 <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    2ce6:	68bb      	ldr	r3, [r7, #8]
    2ce8:	2200      	movs	r2, #0
    2cea:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    2cec:	68fb      	ldr	r3, [r7, #12]
    2cee:	88db      	ldrh	r3, [r3, #6]
    2cf0:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    2cf2:	68fb      	ldr	r3, [r7, #12]
    2cf4:	885b      	ldrh	r3, [r3, #2]
    2cf6:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    2cf8:	68fb      	ldr	r3, [r7, #12]
    2cfa:	885b      	ldrh	r3, [r3, #2]
    2cfc:	0a1b      	lsrs	r3, r3, #8
    2cfe:	b29b      	uxth	r3, r3
    2d00:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	889b      	ldrh	r3, [r3, #4]
    2d06:	2b04      	cmp	r3, #4
    2d08:	d002      	beq.n	2d10 <USBFilterOsVendorMessage+0x50>
    2d0a:	2b05      	cmp	r3, #5
    2d0c:	d007      	beq.n	2d1e <USBFilterOsVendorMessage+0x5e>
    2d0e:	e00d      	b.n	2d2c <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    2d10:	683b      	ldr	r3, [r7, #0]
    2d12:	4a1d      	ldr	r2, [pc, #116]	; (2d88 <USBFilterOsVendorMessage+0xc8>)
    2d14:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	2228      	movs	r2, #40	; 0x28
    2d1a:	601a      	str	r2, [r3, #0]
			break;
    2d1c:	e008      	b.n	2d30 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    2d1e:	683b      	ldr	r3, [r7, #0]
    2d20:	4a1a      	ldr	r2, [pc, #104]	; (2d8c <USBFilterOsVendorMessage+0xcc>)
    2d22:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	2292      	movs	r2, #146	; 0x92
    2d28:	601a      	str	r2, [r3, #0]
			break;
    2d2a:	e001      	b.n	2d30 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    2d2c:	2301      	movs	r3, #1
    2d2e:	e023      	b.n	2d78 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    2d30:	7ebb      	ldrb	r3, [r7, #26]
    2d32:	041b      	lsls	r3, r3, #16
    2d34:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	681a      	ldr	r2, [r3, #0]
    2d3a:	697b      	ldr	r3, [r7, #20]
    2d3c:	429a      	cmp	r2, r3
    2d3e:	da01      	bge.n	2d44 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    2d40:	2301      	movs	r3, #1
    2d42:	e019      	b.n	2d78 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    2d44:	683b      	ldr	r3, [r7, #0]
    2d46:	681a      	ldr	r2, [r3, #0]
    2d48:	697b      	ldr	r3, [r7, #20]
    2d4a:	441a      	add	r2, r3
    2d4c:	683b      	ldr	r3, [r7, #0]
    2d4e:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	681a      	ldr	r2, [r3, #0]
    2d54:	697b      	ldr	r3, [r7, #20]
    2d56:	1ad2      	subs	r2, r2, r3
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	681a      	ldr	r2, [r3, #0]
    2d60:	69fb      	ldr	r3, [r7, #28]
    2d62:	429a      	cmp	r2, r3
    2d64:	dd02      	ble.n	2d6c <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	69fa      	ldr	r2, [r7, #28]
    2d6a:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    2d6c:	68bb      	ldr	r3, [r7, #8]
    2d6e:	2201      	movs	r2, #1
    2d70:	601a      	str	r2, [r3, #0]
		return TRUE;
    2d72:	2301      	movs	r3, #1
    2d74:	e000      	b.n	2d78 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    2d76:	2300      	movs	r3, #0
}
    2d78:	4618      	mov	r0, r3
    2d7a:	3724      	adds	r7, #36	; 0x24
    2d7c:	46bd      	mov	sp, r7
    2d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d82:	4770      	bx	lr
    2d84:	100005e4 	.word	0x100005e4
    2d88:	00003460 	.word	0x00003460
    2d8c:	10000470 	.word	0x10000470

00002d90 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    2d90:	b480      	push	{r7}
    2d92:	b083      	sub	sp, #12
    2d94:	af00      	add	r7, sp, #0
    2d96:	6078      	str	r0, [r7, #4]
    2d98:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    2d9a:	4b08      	ldr	r3, [pc, #32]	; (2dbc <USBGetOsStringDescriptor+0x2c>)
    2d9c:	781a      	ldrb	r2, [r3, #0]
    2d9e:	4b08      	ldr	r3, [pc, #32]	; (2dc0 <USBGetOsStringDescriptor+0x30>)
    2da0:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	4a06      	ldr	r2, [pc, #24]	; (2dc0 <USBGetOsStringDescriptor+0x30>)
    2da6:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	2212      	movs	r2, #18
    2dac:	601a      	str	r2, [r3, #0]
	return TRUE;
    2dae:	2301      	movs	r3, #1
}
    2db0:	4618      	mov	r0, r3
    2db2:	370c      	adds	r7, #12
    2db4:	46bd      	mov	sp, r7
    2db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dba:	4770      	bx	lr
    2dbc:	100005e4 	.word	0x100005e4
    2dc0:	1000045c 	.word	0x1000045c

00002dc4 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    2dc4:	b480      	push	{r7}
    2dc6:	b083      	sub	sp, #12
    2dc8:	af00      	add	r7, sp, #0
    2dca:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    2dcc:	4a03      	ldr	r2, [pc, #12]	; (2ddc <USBRegisterDescriptors+0x18>)
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	6013      	str	r3, [r2, #0]
}
    2dd2:	370c      	adds	r7, #12
    2dd4:	46bd      	mov	sp, r7
    2dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dda:	4770      	bx	lr
    2ddc:	100005e0 	.word	0x100005e0

00002de0 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    2de0:	b580      	push	{r7, lr}
    2de2:	b088      	sub	sp, #32
    2de4:	af00      	add	r7, sp, #0
    2de6:	60ba      	str	r2, [r7, #8]
    2de8:	607b      	str	r3, [r7, #4]
    2dea:	4603      	mov	r3, r0
    2dec:	81fb      	strh	r3, [r7, #14]
    2dee:	460b      	mov	r3, r1
    2df0:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    2df2:	89fb      	ldrh	r3, [r7, #14]
    2df4:	0a1b      	lsrs	r3, r3, #8
    2df6:	b29b      	uxth	r3, r3
    2df8:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    2dfa:	89fb      	ldrh	r3, [r7, #14]
    2dfc:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    2dfe:	7dfb      	ldrb	r3, [r7, #23]
    2e00:	2b03      	cmp	r3, #3
    2e02:	d10b      	bne.n	2e1c <USBGetDescriptor+0x3c>
    2e04:	7dbb      	ldrb	r3, [r7, #22]
    2e06:	2bee      	cmp	r3, #238	; 0xee
    2e08:	d108      	bne.n	2e1c <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    2e0a:	68b8      	ldr	r0, [r7, #8]
    2e0c:	6879      	ldr	r1, [r7, #4]
    2e0e:	f7ff ffbf 	bl	2d90 <USBGetOsStringDescriptor>
    2e12:	4603      	mov	r3, r0
    2e14:	2b00      	cmp	r3, #0
    2e16:	d001      	beq.n	2e1c <USBGetDescriptor+0x3c>
            
            return TRUE;
    2e18:	2301      	movs	r3, #1
    2e1a:	e036      	b.n	2e8a <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    2e1c:	4b1d      	ldr	r3, [pc, #116]	; (2e94 <USBGetDescriptor+0xb4>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    2e22:	2300      	movs	r3, #0
    2e24:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    2e26:	e02b      	b.n	2e80 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    2e28:	69fb      	ldr	r3, [r7, #28]
    2e2a:	3301      	adds	r3, #1
    2e2c:	781b      	ldrb	r3, [r3, #0]
    2e2e:	7dfa      	ldrb	r2, [r7, #23]
    2e30:	429a      	cmp	r2, r3
    2e32:	d11f      	bne.n	2e74 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    2e34:	7dba      	ldrb	r2, [r7, #22]
    2e36:	69bb      	ldr	r3, [r7, #24]
    2e38:	429a      	cmp	r2, r3
    2e3a:	d118      	bne.n	2e6e <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	69fa      	ldr	r2, [r7, #28]
    2e40:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    2e42:	7dfb      	ldrb	r3, [r7, #23]
    2e44:	2b02      	cmp	r3, #2
    2e46:	d10b      	bne.n	2e60 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    2e48:	69fb      	ldr	r3, [r7, #28]
    2e4a:	3302      	adds	r3, #2
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    2e50:	69fb      	ldr	r3, [r7, #28]
    2e52:	3303      	adds	r3, #3
    2e54:	781b      	ldrb	r3, [r3, #0]
    2e56:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    2e58:	431a      	orrs	r2, r3
    2e5a:	68bb      	ldr	r3, [r7, #8]
    2e5c:	601a      	str	r2, [r3, #0]
    2e5e:	e004      	b.n	2e6a <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    2e60:	69fb      	ldr	r3, [r7, #28]
    2e62:	781b      	ldrb	r3, [r3, #0]
    2e64:	461a      	mov	r2, r3
    2e66:	68bb      	ldr	r3, [r7, #8]
    2e68:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    2e6a:	2301      	movs	r3, #1
    2e6c:	e00d      	b.n	2e8a <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    2e6e:	69bb      	ldr	r3, [r7, #24]
    2e70:	3301      	adds	r3, #1
    2e72:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    2e74:	69fb      	ldr	r3, [r7, #28]
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	461a      	mov	r2, r3
    2e7a:	69fb      	ldr	r3, [r7, #28]
    2e7c:	4413      	add	r3, r2
    2e7e:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    2e80:	69fb      	ldr	r3, [r7, #28]
    2e82:	781b      	ldrb	r3, [r3, #0]
    2e84:	2b00      	cmp	r3, #0
    2e86:	d1cf      	bne.n	2e28 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    2e88:	2300      	movs	r3, #0
}
    2e8a:	4618      	mov	r0, r3
    2e8c:	3720      	adds	r7, #32
    2e8e:	46bd      	mov	sp, r7
    2e90:	bd80      	pop	{r7, pc}
    2e92:	bf00      	nop
    2e94:	100005e0 	.word	0x100005e0

00002e98 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b086      	sub	sp, #24
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	4603      	mov	r3, r0
    2ea0:	460a      	mov	r2, r1
    2ea2:	71fb      	strb	r3, [r7, #7]
    2ea4:	4613      	mov	r3, r2
    2ea6:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    2ea8:	79fb      	ldrb	r3, [r7, #7]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d103      	bne.n	2eb6 <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    2eae:	2000      	movs	r0, #0
    2eb0:	f7ff fdb4 	bl	2a1c <USBHwConfigDevice>
    2eb4:	e045      	b.n	2f42 <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    2eb6:	4b25      	ldr	r3, [pc, #148]	; (2f4c <USBSetConfiguration+0xb4>)
    2eb8:	681b      	ldr	r3, [r3, #0]
    2eba:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    2ebc:	23ff      	movs	r3, #255	; 0xff
    2ebe:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    2ec0:	23ff      	movs	r3, #255	; 0xff
    2ec2:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    2ec4:	e036      	b.n	2f34 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    2ec6:	697b      	ldr	r3, [r7, #20]
    2ec8:	3301      	adds	r3, #1
    2eca:	781b      	ldrb	r3, [r3, #0]
    2ecc:	2b04      	cmp	r3, #4
    2ece:	d008      	beq.n	2ee2 <USBSetConfiguration+0x4a>
    2ed0:	2b05      	cmp	r3, #5
    2ed2:	d00a      	beq.n	2eea <USBSetConfiguration+0x52>
    2ed4:	2b02      	cmp	r3, #2
    2ed6:	d000      	beq.n	2eda <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    2ed8:	e026      	b.n	2f28 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    2eda:	697b      	ldr	r3, [r7, #20]
    2edc:	795b      	ldrb	r3, [r3, #5]
    2ede:	74fb      	strb	r3, [r7, #19]
				break;
    2ee0:	e022      	b.n	2f28 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    2ee2:	697b      	ldr	r3, [r7, #20]
    2ee4:	78db      	ldrb	r3, [r3, #3]
    2ee6:	74bb      	strb	r3, [r7, #18]
				break;
    2ee8:	e01e      	b.n	2f28 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    2eea:	7cfa      	ldrb	r2, [r7, #19]
    2eec:	79fb      	ldrb	r3, [r7, #7]
    2eee:	429a      	cmp	r2, r3
    2ef0:	d119      	bne.n	2f26 <USBSetConfiguration+0x8e>
    2ef2:	7cba      	ldrb	r2, [r7, #18]
    2ef4:	79bb      	ldrb	r3, [r7, #6]
    2ef6:	429a      	cmp	r2, r3
    2ef8:	d115      	bne.n	2f26 <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    2efa:	697b      	ldr	r3, [r7, #20]
    2efc:	789b      	ldrb	r3, [r3, #2]
    2efe:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    2f00:	697b      	ldr	r3, [r7, #20]
    2f02:	3304      	adds	r3, #4
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    2f08:	697b      	ldr	r3, [r7, #20]
    2f0a:	3305      	adds	r3, #5
    2f0c:	781b      	ldrb	r3, [r3, #0]
    2f0e:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    2f10:	b29b      	uxth	r3, r3
    2f12:	4313      	orrs	r3, r2
    2f14:	b29b      	uxth	r3, r3
    2f16:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    2f18:	7c7a      	ldrb	r2, [r7, #17]
    2f1a:	89fb      	ldrh	r3, [r7, #14]
    2f1c:	4610      	mov	r0, r2
    2f1e:	4619      	mov	r1, r3
    2f20:	f7ff fbf4 	bl	270c <USBHwEPConfig>
				}
				break;
    2f24:	e7ff      	b.n	2f26 <USBSetConfiguration+0x8e>
    2f26:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    2f28:	697b      	ldr	r3, [r7, #20]
    2f2a:	781b      	ldrb	r3, [r3, #0]
    2f2c:	461a      	mov	r2, r3
    2f2e:	697b      	ldr	r3, [r7, #20]
    2f30:	4413      	add	r3, r2
    2f32:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    2f34:	697b      	ldr	r3, [r7, #20]
    2f36:	781b      	ldrb	r3, [r3, #0]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d1c4      	bne.n	2ec6 <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    2f3c:	2001      	movs	r0, #1
    2f3e:	f7ff fd6d 	bl	2a1c <USBHwConfigDevice>
	}

	return TRUE;
    2f42:	2301      	movs	r3, #1
}
    2f44:	4618      	mov	r0, r3
    2f46:	3718      	adds	r7, #24
    2f48:	46bd      	mov	sp, r7
    2f4a:	bd80      	pop	{r7, pc}
    2f4c:	100005e0 	.word	0x100005e0

00002f50 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b086      	sub	sp, #24
    2f54:	af00      	add	r7, sp, #0
    2f56:	60f8      	str	r0, [r7, #12]
    2f58:	60b9      	str	r1, [r7, #8]
    2f5a:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    2f62:	68fb      	ldr	r3, [r7, #12]
    2f64:	785b      	ldrb	r3, [r3, #1]
    2f66:	2b09      	cmp	r3, #9
    2f68:	d852      	bhi.n	3010 <HandleStdDeviceReq+0xc0>
    2f6a:	a201      	add	r2, pc, #4	; (adr r2, 2f70 <HandleStdDeviceReq+0x20>)
    2f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2f70:	00002f99 	.word	0x00002f99
    2f74:	00003009 	.word	0x00003009
    2f78:	00003011 	.word	0x00003011
    2f7c:	00003009 	.word	0x00003009
    2f80:	00003011 	.word	0x00003011
    2f84:	00002faf 	.word	0x00002faf
    2f88:	00002fbd 	.word	0x00002fbd
    2f8c:	0000300d 	.word	0x0000300d
    2f90:	00002fd5 	.word	0x00002fd5
    2f94:	00002fe5 	.word	0x00002fe5
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    2f98:	697b      	ldr	r3, [r7, #20]
    2f9a:	2200      	movs	r2, #0
    2f9c:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    2f9e:	697b      	ldr	r3, [r7, #20]
    2fa0:	3301      	adds	r3, #1
    2fa2:	2200      	movs	r2, #0
    2fa4:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    2fa6:	68bb      	ldr	r3, [r7, #8]
    2fa8:	2202      	movs	r2, #2
    2faa:	601a      	str	r2, [r3, #0]
		break;
    2fac:	e032      	b.n	3014 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    2fae:	68fb      	ldr	r3, [r7, #12]
    2fb0:	885b      	ldrh	r3, [r3, #2]
    2fb2:	b2db      	uxtb	r3, r3
    2fb4:	4618      	mov	r0, r3
    2fb6:	f7ff fc0f 	bl	27d8 <USBHwSetAddress>
		break;
    2fba:	e02b      	b.n	3014 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    2fbc:	68fb      	ldr	r3, [r7, #12]
    2fbe:	885a      	ldrh	r2, [r3, #2]
    2fc0:	68fb      	ldr	r3, [r7, #12]
    2fc2:	889b      	ldrh	r3, [r3, #4]
    2fc4:	4610      	mov	r0, r2
    2fc6:	4619      	mov	r1, r3
    2fc8:	68ba      	ldr	r2, [r7, #8]
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	f7ff ff08 	bl	2de0 <USBGetDescriptor>
    2fd0:	4603      	mov	r3, r0
    2fd2:	e020      	b.n	3016 <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    2fd4:	4b12      	ldr	r3, [pc, #72]	; (3020 <HandleStdDeviceReq+0xd0>)
    2fd6:	781a      	ldrb	r2, [r3, #0]
    2fd8:	697b      	ldr	r3, [r7, #20]
    2fda:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    2fdc:	68bb      	ldr	r3, [r7, #8]
    2fde:	2201      	movs	r2, #1
    2fe0:	601a      	str	r2, [r3, #0]
		break;
    2fe2:	e017      	b.n	3014 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    2fe4:	68fb      	ldr	r3, [r7, #12]
    2fe6:	885b      	ldrh	r3, [r3, #2]
    2fe8:	b2db      	uxtb	r3, r3
    2fea:	4618      	mov	r0, r3
    2fec:	2100      	movs	r1, #0
    2fee:	f7ff ff53 	bl	2e98 <USBSetConfiguration>
    2ff2:	4603      	mov	r3, r0
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d101      	bne.n	2ffc <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    2ff8:	2300      	movs	r3, #0
    2ffa:	e00c      	b.n	3016 <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    2ffc:	68fb      	ldr	r3, [r7, #12]
    2ffe:	885b      	ldrh	r3, [r3, #2]
    3000:	b2da      	uxtb	r2, r3
    3002:	4b07      	ldr	r3, [pc, #28]	; (3020 <HandleStdDeviceReq+0xd0>)
    3004:	701a      	strb	r2, [r3, #0]
		break;
    3006:	e005      	b.n	3014 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    3008:	2300      	movs	r3, #0
    300a:	e004      	b.n	3016 <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    300c:	2300      	movs	r3, #0
    300e:	e002      	b.n	3016 <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    3010:	2300      	movs	r3, #0
    3012:	e000      	b.n	3016 <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    3014:	2301      	movs	r3, #1
}
    3016:	4618      	mov	r0, r3
    3018:	3718      	adds	r7, #24
    301a:	46bd      	mov	sp, r7
    301c:	bd80      	pop	{r7, pc}
    301e:	bf00      	nop
    3020:	100005d8 	.word	0x100005d8

00003024 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    3024:	b480      	push	{r7}
    3026:	b087      	sub	sp, #28
    3028:	af00      	add	r7, sp, #0
    302a:	60f8      	str	r0, [r7, #12]
    302c:	60b9      	str	r1, [r7, #8]
    302e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	785b      	ldrb	r3, [r3, #1]
    303a:	2b0b      	cmp	r3, #11
    303c:	d838      	bhi.n	30b0 <HandleStdInterfaceReq+0x8c>
    303e:	a201      	add	r2, pc, #4	; (adr r2, 3044 <HandleStdInterfaceReq+0x20>)
    3040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3044:	00003075 	.word	0x00003075
    3048:	0000308b 	.word	0x0000308b
    304c:	000030b1 	.word	0x000030b1
    3050:	0000308b 	.word	0x0000308b
    3054:	000030b1 	.word	0x000030b1
    3058:	000030b1 	.word	0x000030b1
    305c:	000030b1 	.word	0x000030b1
    3060:	000030b1 	.word	0x000030b1
    3064:	000030b1 	.word	0x000030b1
    3068:	000030b1 	.word	0x000030b1
    306c:	0000308f 	.word	0x0000308f
    3070:	0000309d 	.word	0x0000309d

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    3074:	697b      	ldr	r3, [r7, #20]
    3076:	2200      	movs	r2, #0
    3078:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    307a:	697b      	ldr	r3, [r7, #20]
    307c:	3301      	adds	r3, #1
    307e:	2200      	movs	r2, #0
    3080:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    3082:	68bb      	ldr	r3, [r7, #8]
    3084:	2202      	movs	r2, #2
    3086:	601a      	str	r2, [r3, #0]
		break;
    3088:	e014      	b.n	30b4 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    308a:	2300      	movs	r3, #0
    308c:	e013      	b.n	30b6 <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    308e:	697b      	ldr	r3, [r7, #20]
    3090:	2200      	movs	r2, #0
    3092:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    3094:	68bb      	ldr	r3, [r7, #8]
    3096:	2201      	movs	r2, #1
    3098:	601a      	str	r2, [r3, #0]
		break;
    309a:	e00b      	b.n	30b4 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    309c:	68fb      	ldr	r3, [r7, #12]
    309e:	885b      	ldrh	r3, [r3, #2]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d001      	beq.n	30a8 <HandleStdInterfaceReq+0x84>
			return FALSE;
    30a4:	2300      	movs	r3, #0
    30a6:	e006      	b.n	30b6 <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    30a8:	68bb      	ldr	r3, [r7, #8]
    30aa:	2200      	movs	r2, #0
    30ac:	601a      	str	r2, [r3, #0]
		break;
    30ae:	e001      	b.n	30b4 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    30b0:	2300      	movs	r3, #0
    30b2:	e000      	b.n	30b6 <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    30b4:	2301      	movs	r3, #1
}
    30b6:	4618      	mov	r0, r3
    30b8:	371c      	adds	r7, #28
    30ba:	46bd      	mov	sp, r7
    30bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c0:	4770      	bx	lr
    30c2:	bf00      	nop

000030c4 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b086      	sub	sp, #24
    30c8:	af00      	add	r7, sp, #0
    30ca:	60f8      	str	r0, [r7, #12]
    30cc:	60b9      	str	r1, [r7, #8]
    30ce:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	681b      	ldr	r3, [r3, #0]
    30d4:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    30d6:	68fb      	ldr	r3, [r7, #12]
    30d8:	785b      	ldrb	r3, [r3, #1]
    30da:	2b0c      	cmp	r3, #12
    30dc:	d853      	bhi.n	3186 <HandleStdEndPointReq+0xc2>
    30de:	a201      	add	r2, pc, #4	; (adr r2, 30e4 <HandleStdEndPointReq+0x20>)
    30e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    30e4:	00003119 	.word	0x00003119
    30e8:	0000314b 	.word	0x0000314b
    30ec:	00003187 	.word	0x00003187
    30f0:	00003167 	.word	0x00003167
    30f4:	00003187 	.word	0x00003187
    30f8:	00003187 	.word	0x00003187
    30fc:	00003187 	.word	0x00003187
    3100:	00003187 	.word	0x00003187
    3104:	00003187 	.word	0x00003187
    3108:	00003187 	.word	0x00003187
    310c:	00003187 	.word	0x00003187
    3110:	00003187 	.word	0x00003187
    3114:	00003183 	.word	0x00003183
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	889b      	ldrh	r3, [r3, #4]
    311c:	b2db      	uxtb	r3, r3
    311e:	4618      	mov	r0, r3
    3120:	f7ff fb8c 	bl	283c <USBHwEPGetStatus>
    3124:	4603      	mov	r3, r0
    3126:	f003 0302 	and.w	r3, r3, #2
    312a:	2b00      	cmp	r3, #0
    312c:	bf14      	ite	ne
    312e:	2301      	movne	r3, #1
    3130:	2300      	moveq	r3, #0
    3132:	b2db      	uxtb	r3, r3
    3134:	461a      	mov	r2, r3
    3136:	697b      	ldr	r3, [r7, #20]
    3138:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    313a:	697b      	ldr	r3, [r7, #20]
    313c:	3301      	adds	r3, #1
    313e:	2200      	movs	r2, #0
    3140:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    3142:	68bb      	ldr	r3, [r7, #8]
    3144:	2202      	movs	r2, #2
    3146:	601a      	str	r2, [r3, #0]
		break;
    3148:	e01f      	b.n	318a <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    314a:	68fb      	ldr	r3, [r7, #12]
    314c:	885b      	ldrh	r3, [r3, #2]
    314e:	2b00      	cmp	r3, #0
    3150:	d107      	bne.n	3162 <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	889b      	ldrh	r3, [r3, #4]
    3156:	b2db      	uxtb	r3, r3
    3158:	4618      	mov	r0, r3
    315a:	2100      	movs	r1, #0
    315c:	f7ff fb86 	bl	286c <USBHwEPStall>
			break;
    3160:	e013      	b.n	318a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    3162:	2300      	movs	r3, #0
    3164:	e012      	b.n	318c <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    3166:	68fb      	ldr	r3, [r7, #12]
    3168:	885b      	ldrh	r3, [r3, #2]
    316a:	2b00      	cmp	r3, #0
    316c:	d107      	bne.n	317e <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    316e:	68fb      	ldr	r3, [r7, #12]
    3170:	889b      	ldrh	r3, [r3, #4]
    3172:	b2db      	uxtb	r3, r3
    3174:	4618      	mov	r0, r3
    3176:	2101      	movs	r1, #1
    3178:	f7ff fb78 	bl	286c <USBHwEPStall>
			break;
    317c:	e005      	b.n	318a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    317e:	2300      	movs	r3, #0
    3180:	e004      	b.n	318c <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    3182:	2300      	movs	r3, #0
    3184:	e002      	b.n	318c <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    3186:	2300      	movs	r3, #0
    3188:	e000      	b.n	318c <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    318a:	2301      	movs	r3, #1
}
    318c:	4618      	mov	r0, r3
    318e:	3718      	adds	r7, #24
    3190:	46bd      	mov	sp, r7
    3192:	bd80      	pop	{r7, pc}

00003194 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    3194:	b580      	push	{r7, lr}
    3196:	b084      	sub	sp, #16
    3198:	af00      	add	r7, sp, #0
    319a:	60f8      	str	r0, [r7, #12]
    319c:	60b9      	str	r1, [r7, #8]
    319e:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    31a0:	4b19      	ldr	r3, [pc, #100]	; (3208 <USBHandleStandardRequest+0x74>)
    31a2:	681b      	ldr	r3, [r3, #0]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d00a      	beq.n	31be <USBHandleStandardRequest+0x2a>
    31a8:	4b17      	ldr	r3, [pc, #92]	; (3208 <USBHandleStandardRequest+0x74>)
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	68f8      	ldr	r0, [r7, #12]
    31ae:	68b9      	ldr	r1, [r7, #8]
    31b0:	687a      	ldr	r2, [r7, #4]
    31b2:	4798      	blx	r3
    31b4:	4603      	mov	r3, r0
    31b6:	2b00      	cmp	r3, #0
    31b8:	d001      	beq.n	31be <USBHandleStandardRequest+0x2a>
		return TRUE;
    31ba:	2301      	movs	r3, #1
    31bc:	e01f      	b.n	31fe <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    31be:	68fb      	ldr	r3, [r7, #12]
    31c0:	781b      	ldrb	r3, [r3, #0]
    31c2:	f003 031f 	and.w	r3, r3, #31
    31c6:	2b01      	cmp	r3, #1
    31c8:	d00a      	beq.n	31e0 <USBHandleStandardRequest+0x4c>
    31ca:	2b02      	cmp	r3, #2
    31cc:	d00f      	beq.n	31ee <USBHandleStandardRequest+0x5a>
    31ce:	2b00      	cmp	r3, #0
    31d0:	d114      	bne.n	31fc <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    31d2:	68f8      	ldr	r0, [r7, #12]
    31d4:	68b9      	ldr	r1, [r7, #8]
    31d6:	687a      	ldr	r2, [r7, #4]
    31d8:	f7ff feba 	bl	2f50 <HandleStdDeviceReq>
    31dc:	4603      	mov	r3, r0
    31de:	e00e      	b.n	31fe <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    31e0:	68f8      	ldr	r0, [r7, #12]
    31e2:	68b9      	ldr	r1, [r7, #8]
    31e4:	687a      	ldr	r2, [r7, #4]
    31e6:	f7ff ff1d 	bl	3024 <HandleStdInterfaceReq>
    31ea:	4603      	mov	r3, r0
    31ec:	e007      	b.n	31fe <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    31ee:	68f8      	ldr	r0, [r7, #12]
    31f0:	68b9      	ldr	r1, [r7, #8]
    31f2:	687a      	ldr	r2, [r7, #4]
    31f4:	f7ff ff66 	bl	30c4 <HandleStdEndPointReq>
    31f8:	4603      	mov	r3, r0
    31fa:	e000      	b.n	31fe <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    31fc:	2300      	movs	r3, #0
	}
}
    31fe:	4618      	mov	r0, r3
    3200:	3710      	adds	r7, #16
    3202:	46bd      	mov	sp, r7
    3204:	bd80      	pop	{r7, pc}
    3206:	bf00      	nop
    3208:	100005dc 	.word	0x100005dc

0000320c <memcpy>:
    320c:	4684      	mov	ip, r0
    320e:	ea41 0300 	orr.w	r3, r1, r0
    3212:	f013 0303 	ands.w	r3, r3, #3
    3216:	d149      	bne.n	32ac <memcpy+0xa0>
    3218:	3a40      	subs	r2, #64	; 0x40
    321a:	d323      	bcc.n	3264 <memcpy+0x58>
    321c:	680b      	ldr	r3, [r1, #0]
    321e:	6003      	str	r3, [r0, #0]
    3220:	684b      	ldr	r3, [r1, #4]
    3222:	6043      	str	r3, [r0, #4]
    3224:	688b      	ldr	r3, [r1, #8]
    3226:	6083      	str	r3, [r0, #8]
    3228:	68cb      	ldr	r3, [r1, #12]
    322a:	60c3      	str	r3, [r0, #12]
    322c:	690b      	ldr	r3, [r1, #16]
    322e:	6103      	str	r3, [r0, #16]
    3230:	694b      	ldr	r3, [r1, #20]
    3232:	6143      	str	r3, [r0, #20]
    3234:	698b      	ldr	r3, [r1, #24]
    3236:	6183      	str	r3, [r0, #24]
    3238:	69cb      	ldr	r3, [r1, #28]
    323a:	61c3      	str	r3, [r0, #28]
    323c:	6a0b      	ldr	r3, [r1, #32]
    323e:	6203      	str	r3, [r0, #32]
    3240:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    3242:	6243      	str	r3, [r0, #36]	; 0x24
    3244:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    3246:	6283      	str	r3, [r0, #40]	; 0x28
    3248:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    324a:	62c3      	str	r3, [r0, #44]	; 0x2c
    324c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    324e:	6303      	str	r3, [r0, #48]	; 0x30
    3250:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    3252:	6343      	str	r3, [r0, #52]	; 0x34
    3254:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    3256:	6383      	str	r3, [r0, #56]	; 0x38
    3258:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    325a:	63c3      	str	r3, [r0, #60]	; 0x3c
    325c:	3040      	adds	r0, #64	; 0x40
    325e:	3140      	adds	r1, #64	; 0x40
    3260:	3a40      	subs	r2, #64	; 0x40
    3262:	d2db      	bcs.n	321c <memcpy+0x10>
    3264:	3230      	adds	r2, #48	; 0x30
    3266:	d30b      	bcc.n	3280 <memcpy+0x74>
    3268:	680b      	ldr	r3, [r1, #0]
    326a:	6003      	str	r3, [r0, #0]
    326c:	684b      	ldr	r3, [r1, #4]
    326e:	6043      	str	r3, [r0, #4]
    3270:	688b      	ldr	r3, [r1, #8]
    3272:	6083      	str	r3, [r0, #8]
    3274:	68cb      	ldr	r3, [r1, #12]
    3276:	60c3      	str	r3, [r0, #12]
    3278:	3010      	adds	r0, #16
    327a:	3110      	adds	r1, #16
    327c:	3a10      	subs	r2, #16
    327e:	d2f3      	bcs.n	3268 <memcpy+0x5c>
    3280:	320c      	adds	r2, #12
    3282:	d305      	bcc.n	3290 <memcpy+0x84>
    3284:	f851 3b04 	ldr.w	r3, [r1], #4
    3288:	f840 3b04 	str.w	r3, [r0], #4
    328c:	3a04      	subs	r2, #4
    328e:	d2f9      	bcs.n	3284 <memcpy+0x78>
    3290:	3204      	adds	r2, #4
    3292:	d008      	beq.n	32a6 <memcpy+0x9a>
    3294:	07d2      	lsls	r2, r2, #31
    3296:	bf1c      	itt	ne
    3298:	f811 3b01 	ldrbne.w	r3, [r1], #1
    329c:	f800 3b01 	strbne.w	r3, [r0], #1
    32a0:	d301      	bcc.n	32a6 <memcpy+0x9a>
    32a2:	880b      	ldrh	r3, [r1, #0]
    32a4:	8003      	strh	r3, [r0, #0]
    32a6:	4660      	mov	r0, ip
    32a8:	4770      	bx	lr
    32aa:	bf00      	nop
    32ac:	2a08      	cmp	r2, #8
    32ae:	d313      	bcc.n	32d8 <memcpy+0xcc>
    32b0:	078b      	lsls	r3, r1, #30
    32b2:	d0b1      	beq.n	3218 <memcpy+0xc>
    32b4:	f010 0303 	ands.w	r3, r0, #3
    32b8:	d0ae      	beq.n	3218 <memcpy+0xc>
    32ba:	f1c3 0304 	rsb	r3, r3, #4
    32be:	1ad2      	subs	r2, r2, r3
    32c0:	07db      	lsls	r3, r3, #31
    32c2:	bf1c      	itt	ne
    32c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    32c8:	f800 3b01 	strbne.w	r3, [r0], #1
    32cc:	d3a4      	bcc.n	3218 <memcpy+0xc>
    32ce:	f831 3b02 	ldrh.w	r3, [r1], #2
    32d2:	f820 3b02 	strh.w	r3, [r0], #2
    32d6:	e79f      	b.n	3218 <memcpy+0xc>
    32d8:	3a04      	subs	r2, #4
    32da:	d3d9      	bcc.n	3290 <memcpy+0x84>
    32dc:	3a01      	subs	r2, #1
    32de:	f811 3b01 	ldrb.w	r3, [r1], #1
    32e2:	f800 3b01 	strb.w	r3, [r0], #1
    32e6:	d2f9      	bcs.n	32dc <memcpy+0xd0>
    32e8:	780b      	ldrb	r3, [r1, #0]
    32ea:	7003      	strb	r3, [r0, #0]
    32ec:	784b      	ldrb	r3, [r1, #1]
    32ee:	7043      	strb	r3, [r0, #1]
    32f0:	788b      	ldrb	r3, [r1, #2]
    32f2:	7083      	strb	r3, [r0, #2]
    32f4:	4660      	mov	r0, ip
    32f6:	4770      	bx	lr

000032f8 <strlen>:
    32f8:	f020 0103 	bic.w	r1, r0, #3
    32fc:	f010 0003 	ands.w	r0, r0, #3
    3300:	f1c0 0000 	rsb	r0, r0, #0
    3304:	f851 3b04 	ldr.w	r3, [r1], #4
    3308:	f100 0c04 	add.w	ip, r0, #4
    330c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    3310:	f06f 0200 	mvn.w	r2, #0
    3314:	bf1c      	itt	ne
    3316:	fa22 f20c 	lsrne.w	r2, r2, ip
    331a:	4313      	orrne	r3, r2
    331c:	f04f 0c01 	mov.w	ip, #1
    3320:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    3324:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    3328:	eba3 020c 	sub.w	r2, r3, ip
    332c:	ea22 0203 	bic.w	r2, r2, r3
    3330:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    3334:	bf04      	itt	eq
    3336:	f851 3b04 	ldreq.w	r3, [r1], #4
    333a:	3004      	addeq	r0, #4
    333c:	d0f4      	beq.n	3328 <strlen+0x30>
    333e:	f1c2 0100 	rsb	r1, r2, #0
    3342:	ea02 0201 	and.w	r2, r2, r1
    3346:	fab2 f282 	clz	r2, r2
    334a:	f1c2 021f 	rsb	r2, r2, #31
    334e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    3352:	4770      	bx	lr
    3354:	00000043 	.word	0x00000043

00003358 <_global_impure_ptr>:
    3358:	10000020                                 ...

0000335c <abDescriptors>:
    335c:	02000112 400000ff 0004ffff 02010100     .......@........
    336c:	02090103 01010020 09328000 02000004     .... .....2.....
    337c:	000000ff 02820507 07000040 40020505     ........@......@
    338c:	03040000 03440409 00740068 00700074     ......D.h.t.t.p.
    339c:	002f003a 0075002f 00650062 00740072     :././.u.b.e.r.t.
    33ac:	006f006f 00680074 0073002e 0075006f     o.o.t.h...s.o.u.
    33bc:	00630072 00660065 0072006f 00650067     r.c.e.f.o.r.g.e.
    33cc:	006e002e 00740065 0330002f 00620075     ..n.e.t./.0.u.b.
    33dc:	00720065 006f0074 0074006f 00200068     e.r.t.o.o.t.h. .
    33ec:	00730061 00650073 0062006d 0079006c     a.s.s.e.m.b.l.y.
    33fc:	0074005f 00730065 03120074 00300030     _.t.e.s.t...0.0.
    340c:	00300030 00300030 00310030 00000000     0.0.0.0.0.1.....
    341c:	35313032 2d30312d 00003152 cc585c47     2015-10-R1..G\X.
    342c:	8e5e3473 e698b1b8 d711bc68 cd1c3316     s4^.....h....3..
    343c:	2cae2317 2f9a3966 c78cc575 ebe74533     .#.,f9./u...3E..
    344c:	668e198b 711dce8b d1cc3163 c6e23a79     ...f...qc1..y:..
    345c:	f3a29963                                c...

00003460 <abExtendedOsFeatureDescriptor>:
    3460:	00000028 00040100 00000001 00000000     (...............
    3470:	49570100 4253554e 00000000 00000000     ..WINUSB........
    3480:	00000000 00000000                       ........

00003488 <_init>:
    3488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    348a:	bf00      	nop
    348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    348e:	bc08      	pop	{r3}
    3490:	469e      	mov	lr, r3
    3492:	4770      	bx	lr

00003494 <__init_array_start>:
    3494:	0000029d 	.word	0x0000029d

00003498 <__frame_dummy_init_array_entry>:
    3498:	00000139                                9...

0000349c <_fini>:
    349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    349e:	bf00      	nop
    34a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34a2:	bc08      	pop	{r3}
    34a4:	469e      	mov	lr, r3
    34a6:	4770      	bx	lr

000034a8 <__fini_array_start>:
    34a8:	00000111 	.word	0x00000111

000034ac <__fini_array_end>:
    34ac:	00000000 	.word	0x00000000
