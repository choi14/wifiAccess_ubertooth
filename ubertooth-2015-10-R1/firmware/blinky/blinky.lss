
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000588  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         00000428  10000020  00004588  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000020  10000448  000049b0  00010448  2**2
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010471  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000258c  00000000  00000000  000104e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba1  00000000  00000000  00012a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000413  00000000  00000000  0001360e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000200  00000000  00000000  00013a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000170  00000000  00000000  00013c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000bbd  00000000  00000000  00013d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b7e  00000000  00000000  0001494e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000524  00000000  00000000  000154cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 f9 42 00 00 65 43 00 00 65 43 00 00     .?...B..eC..eC..
    4010:	65 43 00 00 65 43 00 00 65 43 00 00 00 00 00 00     eC..eC..eC......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 65 43 00 00     ............eC..
    4030:	65 43 00 00 00 00 00 00 65 43 00 00 65 43 00 00     eC......eC..eC..
    4040:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    4050:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    4060:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    4070:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    4080:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    4090:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    40a0:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    40b0:	65 43 00 00 65 43 00 00 65 43 00 00 65 43 00 00     eC..eC..eC..eC..
    40c0:	65 43 00 00 65 43 00 00 65 43 00 00                 eC..eC..eC..

000040cc <deregister_tm_clones>:
    40cc:	4b04      	ldr	r3, [pc, #16]	; (40e0 <deregister_tm_clones+0x14>)
    40ce:	4805      	ldr	r0, [pc, #20]	; (40e4 <deregister_tm_clones+0x18>)
    40d0:	1a1b      	subs	r3, r3, r0
    40d2:	2b06      	cmp	r3, #6
    40d4:	d902      	bls.n	40dc <deregister_tm_clones+0x10>
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <deregister_tm_clones+0x1c>)
    40d8:	b103      	cbz	r3, 40dc <deregister_tm_clones+0x10>
    40da:	4718      	bx	r3
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	1000044b 	.word	0x1000044b
    40e4:	10000448 	.word	0x10000448
    40e8:	00000000 	.word	0x00000000

000040ec <register_tm_clones>:
    40ec:	4905      	ldr	r1, [pc, #20]	; (4104 <register_tm_clones+0x18>)
    40ee:	4806      	ldr	r0, [pc, #24]	; (4108 <register_tm_clones+0x1c>)
    40f0:	1a09      	subs	r1, r1, r0
    40f2:	1089      	asrs	r1, r1, #2
    40f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    40f8:	1049      	asrs	r1, r1, #1
    40fa:	d002      	beq.n	4102 <register_tm_clones+0x16>
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <register_tm_clones+0x20>)
    40fe:	b103      	cbz	r3, 4102 <register_tm_clones+0x16>
    4100:	4718      	bx	r3
    4102:	4770      	bx	lr
    4104:	10000448 	.word	0x10000448
    4108:	10000448 	.word	0x10000448
    410c:	00000000 	.word	0x00000000

00004110 <__do_global_dtors_aux>:
    4110:	b510      	push	{r4, lr}
    4112:	4c06      	ldr	r4, [pc, #24]	; (412c <__do_global_dtors_aux+0x1c>)
    4114:	7823      	ldrb	r3, [r4, #0]
    4116:	b943      	cbnz	r3, 412a <__do_global_dtors_aux+0x1a>
    4118:	f7ff ffd8 	bl	40cc <deregister_tm_clones>
    411c:	4b04      	ldr	r3, [pc, #16]	; (4130 <__do_global_dtors_aux+0x20>)
    411e:	b113      	cbz	r3, 4126 <__do_global_dtors_aux+0x16>
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <__do_global_dtors_aux+0x24>)
    4122:	f3af 8000 	nop.w
    4126:	2301      	movs	r3, #1
    4128:	7023      	strb	r3, [r4, #0]
    412a:	bd10      	pop	{r4, pc}
    412c:	10000448 	.word	0x10000448
    4130:	00000000 	.word	0x00000000
    4134:	00004560 	.word	0x00004560

00004138 <frame_dummy>:
    4138:	b508      	push	{r3, lr}
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <frame_dummy+0x24>)
    413c:	b11b      	cbz	r3, 4146 <frame_dummy+0xe>
    413e:	4808      	ldr	r0, [pc, #32]	; (4160 <frame_dummy+0x28>)
    4140:	4908      	ldr	r1, [pc, #32]	; (4164 <frame_dummy+0x2c>)
    4142:	f3af 8000 	nop.w
    4146:	4808      	ldr	r0, [pc, #32]	; (4168 <frame_dummy+0x30>)
    4148:	6803      	ldr	r3, [r0, #0]
    414a:	b913      	cbnz	r3, 4152 <frame_dummy+0x1a>
    414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4150:	e7cc      	b.n	40ec <register_tm_clones>
    4152:	4b06      	ldr	r3, [pc, #24]	; (416c <frame_dummy+0x34>)
    4154:	2b00      	cmp	r3, #0
    4156:	d0f9      	beq.n	414c <frame_dummy+0x14>
    4158:	4798      	blx	r3
    415a:	e7f7      	b.n	414c <frame_dummy+0x14>
    415c:	00000000 	.word	0x00000000
    4160:	00004560 	.word	0x00004560
    4164:	1000044c 	.word	0x1000044c
    4168:	10000448 	.word	0x10000448
    416c:	00000000 	.word	0x00000000

00004170 <atexit>:
    4170:	4601      	mov	r1, r0
    4172:	2000      	movs	r0, #0
    4174:	4602      	mov	r2, r0
    4176:	4603      	mov	r3, r0
    4178:	f000 b83e 	b.w	41f8 <__register_exitproc>

0000417c <__libc_fini_array>:
    417c:	b538      	push	{r3, r4, r5, lr}
    417e:	4b08      	ldr	r3, [pc, #32]	; (41a0 <__libc_fini_array+0x24>)
    4180:	4d08      	ldr	r5, [pc, #32]	; (41a4 <__libc_fini_array+0x28>)
    4182:	1aed      	subs	r5, r5, r3
    4184:	10ac      	asrs	r4, r5, #2
    4186:	bf18      	it	ne
    4188:	18ed      	addne	r5, r5, r3
    418a:	d005      	beq.n	4198 <__libc_fini_array+0x1c>
    418c:	3c01      	subs	r4, #1
    418e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    4192:	4798      	blx	r3
    4194:	2c00      	cmp	r4, #0
    4196:	d1f9      	bne.n	418c <__libc_fini_array+0x10>
    4198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    419c:	f000 b9ea 	b.w	4574 <_fini>
    41a0:	00004580 	.word	0x00004580
    41a4:	00004584 	.word	0x00004584

000041a8 <__libc_init_array>:
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	4e0f      	ldr	r6, [pc, #60]	; (41e8 <__libc_init_array+0x40>)
    41ac:	4d0f      	ldr	r5, [pc, #60]	; (41ec <__libc_init_array+0x44>)
    41ae:	1b76      	subs	r6, r6, r5
    41b0:	10b6      	asrs	r6, r6, #2
    41b2:	bf18      	it	ne
    41b4:	2400      	movne	r4, #0
    41b6:	d005      	beq.n	41c4 <__libc_init_array+0x1c>
    41b8:	3401      	adds	r4, #1
    41ba:	f855 3b04 	ldr.w	r3, [r5], #4
    41be:	4798      	blx	r3
    41c0:	42a6      	cmp	r6, r4
    41c2:	d1f9      	bne.n	41b8 <__libc_init_array+0x10>
    41c4:	4e0a      	ldr	r6, [pc, #40]	; (41f0 <__libc_init_array+0x48>)
    41c6:	4d0b      	ldr	r5, [pc, #44]	; (41f4 <__libc_init_array+0x4c>)
    41c8:	f000 f9ca 	bl	4560 <_init>
    41cc:	1b76      	subs	r6, r6, r5
    41ce:	10b6      	asrs	r6, r6, #2
    41d0:	bf18      	it	ne
    41d2:	2400      	movne	r4, #0
    41d4:	d006      	beq.n	41e4 <__libc_init_array+0x3c>
    41d6:	3401      	adds	r4, #1
    41d8:	f855 3b04 	ldr.w	r3, [r5], #4
    41dc:	4798      	blx	r3
    41de:	42a6      	cmp	r6, r4
    41e0:	d1f9      	bne.n	41d6 <__libc_init_array+0x2e>
    41e2:	bd70      	pop	{r4, r5, r6, pc}
    41e4:	bd70      	pop	{r4, r5, r6, pc}
    41e6:	bf00      	nop
    41e8:	0000456c 	.word	0x0000456c
    41ec:	0000456c 	.word	0x0000456c
    41f0:	00004574 	.word	0x00004574
    41f4:	0000456c 	.word	0x0000456c

000041f8 <__register_exitproc>:
    41f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41fc:	4c25      	ldr	r4, [pc, #148]	; (4294 <__register_exitproc+0x9c>)
    41fe:	4606      	mov	r6, r0
    4200:	6825      	ldr	r5, [r4, #0]
    4202:	4688      	mov	r8, r1
    4204:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4208:	4692      	mov	sl, r2
    420a:	4699      	mov	r9, r3
    420c:	b3c4      	cbz	r4, 4280 <__register_exitproc+0x88>
    420e:	6860      	ldr	r0, [r4, #4]
    4210:	281f      	cmp	r0, #31
    4212:	dc17      	bgt.n	4244 <__register_exitproc+0x4c>
    4214:	1c41      	adds	r1, r0, #1
    4216:	b176      	cbz	r6, 4236 <__register_exitproc+0x3e>
    4218:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    421c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4220:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    4224:	2201      	movs	r2, #1
    4226:	4082      	lsls	r2, r0
    4228:	4315      	orrs	r5, r2
    422a:	2e02      	cmp	r6, #2
    422c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4230:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    4234:	d01e      	beq.n	4274 <__register_exitproc+0x7c>
    4236:	1c83      	adds	r3, r0, #2
    4238:	6061      	str	r1, [r4, #4]
    423a:	2000      	movs	r0, #0
    423c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    4240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4244:	4b14      	ldr	r3, [pc, #80]	; (4298 <__register_exitproc+0xa0>)
    4246:	b303      	cbz	r3, 428a <__register_exitproc+0x92>
    4248:	f44f 70c8 	mov.w	r0, #400	; 0x190
    424c:	f3af 8000 	nop.w
    4250:	4604      	mov	r4, r0
    4252:	b1d0      	cbz	r0, 428a <__register_exitproc+0x92>
    4254:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    4258:	2700      	movs	r7, #0
    425a:	e884 0088 	stmia.w	r4, {r3, r7}
    425e:	4638      	mov	r0, r7
    4260:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4264:	2101      	movs	r1, #1
    4266:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    426a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    426e:	2e00      	cmp	r6, #0
    4270:	d0e1      	beq.n	4236 <__register_exitproc+0x3e>
    4272:	e7d1      	b.n	4218 <__register_exitproc+0x20>
    4274:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    4278:	431a      	orrs	r2, r3
    427a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    427e:	e7da      	b.n	4236 <__register_exitproc+0x3e>
    4280:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4284:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4288:	e7c1      	b.n	420e <__register_exitproc+0x16>
    428a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    428e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4292:	bf00      	nop
    4294:	0000455c 	.word	0x0000455c
    4298:	00000000 	.word	0x00000000

0000429c <register_fini>:
    429c:	4b02      	ldr	r3, [pc, #8]	; (42a8 <register_fini+0xc>)
    429e:	b113      	cbz	r3, 42a6 <register_fini+0xa>
    42a0:	4802      	ldr	r0, [pc, #8]	; (42ac <register_fini+0x10>)
    42a2:	f7ff bf65 	b.w	4170 <atexit>
    42a6:	4770      	bx	lr
    42a8:	00000000 	.word	0x00000000
    42ac:	0000417d 	.word	0x0000417d

000042b0 <main>:
 */

#include "ubertooth.h"

int main()
{
    42b0:	b580      	push	{r7, lr}
    42b2:	af00      	add	r7, sp, #0
	gpio_init();
    42b4:	f000 f892 	bl	43dc <gpio_init>

	while (1) {
		USRLED_SET;
    42b8:	4b0d      	ldr	r3, [pc, #52]	; (42f0 <main+0x40>)
    42ba:	2202      	movs	r2, #2
    42bc:	601a      	str	r2, [r3, #0]
		TXLED_SET;
    42be:	4b0c      	ldr	r3, [pc, #48]	; (42f0 <main+0x40>)
    42c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    42c4:	601a      	str	r2, [r3, #0]
		RXLED_SET;
    42c6:	4b0a      	ldr	r3, [pc, #40]	; (42f0 <main+0x40>)
    42c8:	2210      	movs	r2, #16
    42ca:	601a      	str	r2, [r3, #0]
		wait(1);
    42cc:	2001      	movs	r0, #1
    42ce:	f000 f84d 	bl	436c <wait>
		USRLED_CLR;
    42d2:	4b08      	ldr	r3, [pc, #32]	; (42f4 <main+0x44>)
    42d4:	2202      	movs	r2, #2
    42d6:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    42d8:	4b06      	ldr	r3, [pc, #24]	; (42f4 <main+0x44>)
    42da:	f44f 7280 	mov.w	r2, #256	; 0x100
    42de:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    42e0:	4b04      	ldr	r3, [pc, #16]	; (42f4 <main+0x44>)
    42e2:	2210      	movs	r2, #16
    42e4:	601a      	str	r2, [r3, #0]
		wait(1);
    42e6:	2001      	movs	r0, #1
    42e8:	f000 f840 	bl	436c <wait>
	}
    42ec:	e7e4      	b.n	42b8 <main+0x8>
    42ee:	bf00      	nop
    42f0:	2009c038 	.word	0x2009c038
    42f4:	2009c03c 	.word	0x2009c03c

000042f8 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    42f8:	b580      	push	{r7, lr}
    42fa:	b082      	sub	sp, #8
    42fc:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    42fe:	4b12      	ldr	r3, [pc, #72]	; (4348 <Reset_Handler+0x50>)
    4300:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    4302:	4b12      	ldr	r3, [pc, #72]	; (434c <Reset_Handler+0x54>)
    4304:	603b      	str	r3, [r7, #0]
    4306:	e007      	b.n	4318 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    4308:	683b      	ldr	r3, [r7, #0]
    430a:	1d1a      	adds	r2, r3, #4
    430c:	603a      	str	r2, [r7, #0]
    430e:	687a      	ldr	r2, [r7, #4]
    4310:	1d11      	adds	r1, r2, #4
    4312:	6079      	str	r1, [r7, #4]
    4314:	6812      	ldr	r2, [r2, #0]
    4316:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    4318:	683b      	ldr	r3, [r7, #0]
    431a:	4a0d      	ldr	r2, [pc, #52]	; (4350 <Reset_Handler+0x58>)
    431c:	4293      	cmp	r3, r2
    431e:	d3f3      	bcc.n	4308 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    4320:	4b0c      	ldr	r3, [pc, #48]	; (4354 <Reset_Handler+0x5c>)
    4322:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    4324:	e004      	b.n	4330 <Reset_Handler+0x38>
	{
		*src++ = 0;
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	1d1a      	adds	r2, r3, #4
    432a:	607a      	str	r2, [r7, #4]
    432c:	2200      	movs	r2, #0
    432e:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	4a09      	ldr	r2, [pc, #36]	; (4358 <Reset_Handler+0x60>)
    4334:	4293      	cmp	r3, r2
    4336:	d3f6      	bcc.n	4326 <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    4338:	f7ff ff36 	bl	41a8 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    433c:	4b07      	ldr	r3, [pc, #28]	; (435c <Reset_Handler+0x64>)
    433e:	4a08      	ldr	r2, [pc, #32]	; (4360 <Reset_Handler+0x68>)
    4340:	601a      	str	r2, [r3, #0]
    
	main();
    4342:	f7ff ffb5 	bl	42b0 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    4346:	e7fe      	b.n	4346 <Reset_Handler+0x4e>
    4348:	00004588 	.word	0x00004588
    434c:	10000020 	.word	0x10000020
    4350:	10000448 	.word	0x10000448
    4354:	10000448 	.word	0x10000448
    4358:	10000468 	.word	0x10000468
    435c:	e000ed08 	.word	0xe000ed08
    4360:	00004000 	.word	0x00004000

00004364 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    4364:	b480      	push	{r7}
    4366:	af00      	add	r7, sp, #0
    4368:	e7fe      	b.n	4368 <ADC_IRQHandler+0x4>
    436a:	bf00      	nop

0000436c <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    436c:	b580      	push	{r7, lr}
    436e:	b082      	sub	sp, #8
    4370:	af00      	add	r7, sp, #0
    4372:	4603      	mov	r3, r0
    4374:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    4376:	79fb      	ldrb	r3, [r7, #7]
    4378:	4a04      	ldr	r2, [pc, #16]	; (438c <wait+0x20>)
    437a:	fb02 f303 	mul.w	r3, r2, r3
    437e:	4618      	mov	r0, r3
    4380:	f000 f806 	bl	4390 <wait_us>
}
    4384:	3708      	adds	r7, #8
    4386:	46bd      	mov	sp, r7
    4388:	bd80      	pop	{r7, pc}
    438a:	bf00      	nop
    438c:	000f4240 	.word	0x000f4240

00004390 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    4390:	b480      	push	{r7}
    4392:	b083      	sub	sp, #12
    4394:	af00      	add	r7, sp, #0
    4396:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	089a      	lsrs	r2, r3, #2
    439c:	687b      	ldr	r3, [r7, #4]
    439e:	08db      	lsrs	r3, r3, #3
    43a0:	441a      	add	r2, r3
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	099b      	lsrs	r3, r3, #6
    43a6:	441a      	add	r2, r3
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	09db      	lsrs	r3, r3, #7
    43ac:	441a      	add	r2, r3
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	0a9b      	lsrs	r3, r3, #10
    43b2:	441a      	add	r2, r3
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	0adb      	lsrs	r3, r3, #11
    43b8:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    43ba:	4a07      	ldr	r2, [pc, #28]	; (43d8 <wait_us+0x48>)
    43bc:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    43be:	bf00      	nop
    43c0:	4b05      	ldr	r3, [pc, #20]	; (43d8 <wait_us+0x48>)
    43c2:	681b      	ldr	r3, [r3, #0]
    43c4:	3b01      	subs	r3, #1
    43c6:	4a04      	ldr	r2, [pc, #16]	; (43d8 <wait_us+0x48>)
    43c8:	6013      	str	r3, [r2, #0]
    43ca:	2b00      	cmp	r3, #0
    43cc:	d1f8      	bne.n	43c0 <wait_us+0x30>
}
    43ce:	370c      	adds	r7, #12
    43d0:	46bd      	mov	sp, r7
    43d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43d6:	4770      	bx	lr
    43d8:	10000464 	.word	0x10000464

000043dc <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    43dc:	b580      	push	{r7, lr}
    43de:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    43e0:	f000 f836 	bl	4450 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    43e4:	4b10      	ldr	r3, [pc, #64]	; (4428 <gpio_init+0x4c>)
    43e6:	2200      	movs	r2, #0
    43e8:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    43ea:	4b10      	ldr	r3, [pc, #64]	; (442c <gpio_init+0x50>)
    43ec:	f24c 7212 	movw	r2, #50962	; 0xc712
    43f0:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    43f2:	4b0f      	ldr	r3, [pc, #60]	; (4430 <gpio_init+0x54>)
    43f4:	f240 12b1 	movw	r2, #433	; 0x1b1
    43f8:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    43fa:	4b0e      	ldr	r3, [pc, #56]	; (4434 <gpio_init+0x58>)
    43fc:	2200      	movs	r2, #0
    43fe:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    4400:	4b0d      	ldr	r3, [pc, #52]	; (4438 <gpio_init+0x5c>)
    4402:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    4406:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    4408:	4b0c      	ldr	r3, [pc, #48]	; (443c <gpio_init+0x60>)
    440a:	2200      	movs	r2, #0
    440c:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    440e:	4b0c      	ldr	r3, [pc, #48]	; (4440 <gpio_init+0x64>)
    4410:	2200      	movs	r2, #0
    4412:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    4414:	4b0b      	ldr	r3, [pc, #44]	; (4444 <gpio_init+0x68>)
    4416:	2200      	movs	r2, #0
    4418:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    441a:	4b0b      	ldr	r3, [pc, #44]	; (4448 <gpio_init+0x6c>)
    441c:	2200      	movs	r2, #0
    441e:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    4420:	4b0a      	ldr	r3, [pc, #40]	; (444c <gpio_init+0x70>)
    4422:	2200      	movs	r2, #0
    4424:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    4426:	bd80      	pop	{r7, pc}
    4428:	2009c000 	.word	0x2009c000
    442c:	2009c020 	.word	0x2009c020
    4430:	2009c040 	.word	0x2009c040
    4434:	2009c060 	.word	0x2009c060
    4438:	2009c080 	.word	0x2009c080
    443c:	2009c014 	.word	0x2009c014
    4440:	2009c034 	.word	0x2009c034
    4444:	2009c054 	.word	0x2009c054
    4448:	2009c074 	.word	0x2009c074
    444c:	2009c094 	.word	0x2009c094

00004450 <all_pins_off>:

void all_pins_off(void)
{
    4450:	b480      	push	{r7}
    4452:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    4454:	4b27      	ldr	r3, [pc, #156]	; (44f4 <all_pins_off+0xa4>)
    4456:	2200      	movs	r2, #0
    4458:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    445a:	4b27      	ldr	r3, [pc, #156]	; (44f8 <all_pins_off+0xa8>)
    445c:	2200      	movs	r2, #0
    445e:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    4460:	4b26      	ldr	r3, [pc, #152]	; (44fc <all_pins_off+0xac>)
    4462:	2200      	movs	r2, #0
    4464:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    4466:	4b26      	ldr	r3, [pc, #152]	; (4500 <all_pins_off+0xb0>)
    4468:	2200      	movs	r2, #0
    446a:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    446c:	4b25      	ldr	r3, [pc, #148]	; (4504 <all_pins_off+0xb4>)
    446e:	2200      	movs	r2, #0
    4470:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    4472:	4b25      	ldr	r3, [pc, #148]	; (4508 <all_pins_off+0xb8>)
    4474:	2200      	movs	r2, #0
    4476:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    4478:	4b24      	ldr	r3, [pc, #144]	; (450c <all_pins_off+0xbc>)
    447a:	2200      	movs	r2, #0
    447c:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    447e:	4b24      	ldr	r3, [pc, #144]	; (4510 <all_pins_off+0xc0>)
    4480:	2200      	movs	r2, #0
    4482:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    4484:	4b23      	ldr	r3, [pc, #140]	; (4514 <all_pins_off+0xc4>)
    4486:	2200      	movs	r2, #0
    4488:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    448a:	4b23      	ldr	r3, [pc, #140]	; (4518 <all_pins_off+0xc8>)
    448c:	2200      	movs	r2, #0
    448e:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    4490:	4b22      	ldr	r3, [pc, #136]	; (451c <all_pins_off+0xcc>)
    4492:	2200      	movs	r2, #0
    4494:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    4496:	4b22      	ldr	r3, [pc, #136]	; (4520 <all_pins_off+0xd0>)
    4498:	2200      	movs	r2, #0
    449a:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    449c:	4b21      	ldr	r3, [pc, #132]	; (4524 <all_pins_off+0xd4>)
    449e:	2200      	movs	r2, #0
    44a0:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    44a2:	4b21      	ldr	r3, [pc, #132]	; (4528 <all_pins_off+0xd8>)
    44a4:	2200      	movs	r2, #0
    44a6:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    44a8:	4b20      	ldr	r3, [pc, #128]	; (452c <all_pins_off+0xdc>)
    44aa:	2200      	movs	r2, #0
    44ac:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    44ae:	4b20      	ldr	r3, [pc, #128]	; (4530 <all_pins_off+0xe0>)
    44b0:	2200      	movs	r2, #0
    44b2:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    44b4:	4b1f      	ldr	r3, [pc, #124]	; (4534 <all_pins_off+0xe4>)
    44b6:	2200      	movs	r2, #0
    44b8:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    44ba:	4b1f      	ldr	r3, [pc, #124]	; (4538 <all_pins_off+0xe8>)
    44bc:	2200      	movs	r2, #0
    44be:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    44c0:	4b1e      	ldr	r3, [pc, #120]	; (453c <all_pins_off+0xec>)
    44c2:	2200      	movs	r2, #0
    44c4:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    44c6:	4b1e      	ldr	r3, [pc, #120]	; (4540 <all_pins_off+0xf0>)
    44c8:	2200      	movs	r2, #0
    44ca:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    44cc:	4b1d      	ldr	r3, [pc, #116]	; (4544 <all_pins_off+0xf4>)
    44ce:	2200      	movs	r2, #0
    44d0:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    44d2:	4b1d      	ldr	r3, [pc, #116]	; (4548 <all_pins_off+0xf8>)
    44d4:	2200      	movs	r2, #0
    44d6:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    44d8:	4b1c      	ldr	r3, [pc, #112]	; (454c <all_pins_off+0xfc>)
    44da:	2200      	movs	r2, #0
    44dc:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    44de:	4b1c      	ldr	r3, [pc, #112]	; (4550 <all_pins_off+0x100>)
    44e0:	2200      	movs	r2, #0
    44e2:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    44e4:	4b1b      	ldr	r3, [pc, #108]	; (4554 <all_pins_off+0x104>)
    44e6:	2200      	movs	r2, #0
    44e8:	601a      	str	r2, [r3, #0]
}
    44ea:	46bd      	mov	sp, r7
    44ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f0:	4770      	bx	lr
    44f2:	bf00      	nop
    44f4:	4002c000 	.word	0x4002c000
    44f8:	4002c004 	.word	0x4002c004
    44fc:	4002c008 	.word	0x4002c008
    4500:	4002c00c 	.word	0x4002c00c
    4504:	4002c010 	.word	0x4002c010
    4508:	4002c01c 	.word	0x4002c01c
    450c:	4002c024 	.word	0x4002c024
    4510:	4002c028 	.word	0x4002c028
    4514:	2009c000 	.word	0x2009c000
    4518:	2009c020 	.word	0x2009c020
    451c:	2009c040 	.word	0x2009c040
    4520:	2009c060 	.word	0x2009c060
    4524:	2009c080 	.word	0x2009c080
    4528:	4002c040 	.word	0x4002c040
    452c:	4002c044 	.word	0x4002c044
    4530:	4002c048 	.word	0x4002c048
    4534:	4002c04c 	.word	0x4002c04c
    4538:	4002c050 	.word	0x4002c050
    453c:	4002c05c 	.word	0x4002c05c
    4540:	4002c064 	.word	0x4002c064
    4544:	2009c014 	.word	0x2009c014
    4548:	2009c034 	.word	0x2009c034
    454c:	2009c054 	.word	0x2009c054
    4550:	2009c074 	.word	0x2009c074
    4554:	2009c094 	.word	0x2009c094
    4558:	00000043 	.word	0x00000043

0000455c <_global_impure_ptr>:
    455c:	10000020                                 ...

00004560 <_init>:
    4560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4562:	bf00      	nop
    4564:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4566:	bc08      	pop	{r3}
    4568:	469e      	mov	lr, r3
    456a:	4770      	bx	lr

0000456c <__init_array_start>:
    456c:	0000429d 	.word	0x0000429d

00004570 <__frame_dummy_init_array_entry>:
    4570:	00004139                                9A..

00004574 <_fini>:
    4574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4576:	bf00      	nop
    4578:	bcf8      	pop	{r3, r4, r5, r6, r7}
    457a:	bc08      	pop	{r3}
    457c:	469e      	mov	lr, r3
    457e:	4770      	bx	lr

00004580 <__fini_array_start>:
    4580:	00004111 	.word	0x00004111

00004584 <__fini_array_end>:
    4584:	00000000 	.word	0x00000000
