ARM GAS  /tmp/ccfpuLup.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"serial_fifo.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.fifo_init,"ax",%progbits
  19              		.align	2
  20              		.global	fifo_init
  21              		.thumb
  22              		.thumb_func
  24              	fifo_init:
  25              	.LFB0:
  26              		.file 1 "../common/serial_fifo.c"
   1:../common/serial_fifo.c **** /*
   2:../common/serial_fifo.c **** 	LPCUSB, an USB device driver for LPC microcontrollers	
   3:../common/serial_fifo.c **** 	Copyright (C) 2006 Bertrik Sikken (bertrik@sikken.nl)
   4:../common/serial_fifo.c **** 
   5:../common/serial_fifo.c **** 	Redistribution and use in source and binary forms, with or without
   6:../common/serial_fifo.c **** 	modification, are permitted provided that the following conditions are met:
   7:../common/serial_fifo.c **** 
   8:../common/serial_fifo.c **** 	1. Redistributions of source code must retain the above copyright
   9:../common/serial_fifo.c **** 	   notice, this list of conditions and the following disclaimer.
  10:../common/serial_fifo.c **** 	2. Redistributions in binary form must reproduce the above copyright
  11:../common/serial_fifo.c **** 	   notice, this list of conditions and the following disclaimer in the
  12:../common/serial_fifo.c **** 	   documentation and/or other materials provided with the distribution.
  13:../common/serial_fifo.c **** 	3. The name of the author may not be used to endorse or promote products
  14:../common/serial_fifo.c **** 	   derived from this software without specific prior written permission.
  15:../common/serial_fifo.c **** 
  16:../common/serial_fifo.c **** 	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  17:../common/serial_fifo.c **** 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  18:../common/serial_fifo.c **** 	OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  19:../common/serial_fifo.c **** 	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
  20:../common/serial_fifo.c **** 	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  21:../common/serial_fifo.c **** 	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  22:../common/serial_fifo.c **** 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  23:../common/serial_fifo.c **** 	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  24:../common/serial_fifo.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  25:../common/serial_fifo.c **** 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  26:../common/serial_fifo.c **** */
  27:../common/serial_fifo.c **** 
  28:../common/serial_fifo.c **** #include "type.h"
  29:../common/serial_fifo.c **** #include "serial_fifo.h"
  30:../common/serial_fifo.c **** 
  31:../common/serial_fifo.c **** void fifo_init(fifo_t *fifo, U8 *buf)
  32:../common/serial_fifo.c **** {
ARM GAS  /tmp/ccfpuLup.s 			page 2


  27              		.loc 1 32 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  40 0008 3960     		str	r1, [r7]
  33:../common/serial_fifo.c **** 	fifo->head = 0;
  41              		.loc 1 33 0
  42 000a 7B68     		ldr	r3, [r7, #4]
  43 000c 0022     		movs	r2, #0
  44 000e 1A60     		str	r2, [r3]
  34:../common/serial_fifo.c **** 	fifo->tail = 0;
  45              		.loc 1 34 0
  46 0010 7B68     		ldr	r3, [r7, #4]
  47 0012 0022     		movs	r2, #0
  48 0014 5A60     		str	r2, [r3, #4]
  35:../common/serial_fifo.c **** 	fifo->buf = buf;
  49              		.loc 1 35 0
  50 0016 7B68     		ldr	r3, [r7, #4]
  51 0018 3A68     		ldr	r2, [r7]
  52 001a 9A60     		str	r2, [r3, #8]
  36:../common/serial_fifo.c **** }
  53              		.loc 1 36 0
  54 001c 0C37     		adds	r7, r7, #12
  55              		.cfi_def_cfa_offset 4
  56 001e BD46     		mov	sp, r7
  57              		.cfi_def_cfa_register 13
  58              		@ sp needed
  59 0020 5DF8047B 		ldr	r7, [sp], #4
  60              		.cfi_restore 7
  61              		.cfi_def_cfa_offset 0
  62 0024 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE0:
  66 0026 00BF     		.section	.text.fifo_put,"ax",%progbits
  67              		.align	2
  68              		.global	fifo_put
  69              		.thumb
  70              		.thumb_func
  72              	fifo_put:
  73              	.LFB1:
  37:../common/serial_fifo.c **** 
  38:../common/serial_fifo.c **** 
  39:../common/serial_fifo.c **** BOOL fifo_put(fifo_t *fifo, U8 c)
  40:../common/serial_fifo.c **** {
  74              		.loc 1 40 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 16
  77              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccfpuLup.s 			page 3


  78              		@ link register save eliminated.
  79 0000 80B4     		push	{r7}
  80              		.cfi_def_cfa_offset 4
  81              		.cfi_offset 7, -4
  82 0002 85B0     		sub	sp, sp, #20
  83              		.cfi_def_cfa_offset 24
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
  86 0006 7860     		str	r0, [r7, #4]
  87 0008 0B46     		mov	r3, r1
  88 000a FB70     		strb	r3, [r7, #3]
  41:../common/serial_fifo.c **** 	int next;
  42:../common/serial_fifo.c **** 	
  43:../common/serial_fifo.c **** 	// check if FIFO has room
  44:../common/serial_fifo.c **** 	next = (fifo->head + 1) % VCOM_FIFO_SIZE;
  89              		.loc 1 44 0
  90 000c 7B68     		ldr	r3, [r7, #4]
  91 000e 1B68     		ldr	r3, [r3]
  92 0010 5A1C     		adds	r2, r3, #1
  93 0012 104B     		ldr	r3, .L6
  94 0014 1340     		ands	r3, r3, r2
  95 0016 002B     		cmp	r3, #0
  96 0018 03DA     		bge	.L3
  97 001a 013B     		subs	r3, r3, #1
  98 001c 63F07F03 		orn	r3, r3, #127
  99 0020 0133     		adds	r3, r3, #1
 100              	.L3:
 101 0022 FB60     		str	r3, [r7, #12]
  45:../common/serial_fifo.c **** 	if (next == fifo->tail) {
 102              		.loc 1 45 0
 103 0024 7B68     		ldr	r3, [r7, #4]
 104 0026 5A68     		ldr	r2, [r3, #4]
 105 0028 FB68     		ldr	r3, [r7, #12]
 106 002a 9A42     		cmp	r2, r3
 107 002c 01D1     		bne	.L4
  46:../common/serial_fifo.c **** 		// full
  47:../common/serial_fifo.c **** 		return FALSE;
 108              		.loc 1 47 0
 109 002e 0023     		movs	r3, #0
 110 0030 0AE0     		b	.L5
 111              	.L4:
  48:../common/serial_fifo.c **** 	}
  49:../common/serial_fifo.c **** 	
  50:../common/serial_fifo.c **** 	fifo->buf[fifo->head] = c;
 112              		.loc 1 50 0
 113 0032 7B68     		ldr	r3, [r7, #4]
 114 0034 9B68     		ldr	r3, [r3, #8]
 115 0036 7A68     		ldr	r2, [r7, #4]
 116 0038 1268     		ldr	r2, [r2]
 117 003a 1344     		add	r3, r3, r2
 118 003c FA78     		ldrb	r2, [r7, #3]
 119 003e 1A70     		strb	r2, [r3]
  51:../common/serial_fifo.c **** 	fifo->head = next;
 120              		.loc 1 51 0
 121 0040 7B68     		ldr	r3, [r7, #4]
 122 0042 FA68     		ldr	r2, [r7, #12]
 123 0044 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccfpuLup.s 			page 4


  52:../common/serial_fifo.c **** 	
  53:../common/serial_fifo.c **** 	return TRUE;
 124              		.loc 1 53 0
 125 0046 0123     		movs	r3, #1
 126              	.L5:
  54:../common/serial_fifo.c **** }
 127              		.loc 1 54 0
 128 0048 1846     		mov	r0, r3
 129 004a 1437     		adds	r7, r7, #20
 130              		.cfi_def_cfa_offset 4
 131 004c BD46     		mov	sp, r7
 132              		.cfi_def_cfa_register 13
 133              		@ sp needed
 134 004e 5DF8047B 		ldr	r7, [sp], #4
 135              		.cfi_restore 7
 136              		.cfi_def_cfa_offset 0
 137 0052 7047     		bx	lr
 138              	.L7:
 139              		.align	2
 140              	.L6:
 141 0054 7F000080 		.word	-2147483521
 142              		.cfi_endproc
 143              	.LFE1:
 145              		.section	.text.fifo_get,"ax",%progbits
 146              		.align	2
 147              		.global	fifo_get
 148              		.thumb
 149              		.thumb_func
 151              	fifo_get:
 152              	.LFB2:
  55:../common/serial_fifo.c **** 
  56:../common/serial_fifo.c **** 
  57:../common/serial_fifo.c **** BOOL fifo_get(fifo_t *fifo, U8 *pc)
  58:../common/serial_fifo.c **** {
 153              		.loc 1 58 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 16
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158 0000 80B4     		push	{r7}
 159              		.cfi_def_cfa_offset 4
 160              		.cfi_offset 7, -4
 161 0002 85B0     		sub	sp, sp, #20
 162              		.cfi_def_cfa_offset 24
 163 0004 00AF     		add	r7, sp, #0
 164              		.cfi_def_cfa_register 7
 165 0006 7860     		str	r0, [r7, #4]
 166 0008 3960     		str	r1, [r7]
  59:../common/serial_fifo.c **** 	int next;
  60:../common/serial_fifo.c **** 	
  61:../common/serial_fifo.c **** 	// check if FIFO has data
  62:../common/serial_fifo.c **** 	if (fifo->head == fifo->tail) {
 167              		.loc 1 62 0
 168 000a 7B68     		ldr	r3, [r7, #4]
 169 000c 1A68     		ldr	r2, [r3]
 170 000e 7B68     		ldr	r3, [r7, #4]
 171 0010 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccfpuLup.s 			page 5


 172 0012 9A42     		cmp	r2, r3
 173 0014 01D1     		bne	.L9
  63:../common/serial_fifo.c **** 		return FALSE;
 174              		.loc 1 63 0
 175 0016 0023     		movs	r3, #0
 176 0018 17E0     		b	.L10
 177              	.L9:
  64:../common/serial_fifo.c **** 	}
  65:../common/serial_fifo.c **** 	
  66:../common/serial_fifo.c **** 	next = (fifo->tail + 1) % VCOM_FIFO_SIZE;
 178              		.loc 1 66 0
 179 001a 7B68     		ldr	r3, [r7, #4]
 180 001c 5B68     		ldr	r3, [r3, #4]
 181 001e 5A1C     		adds	r2, r3, #1
 182 0020 0D4B     		ldr	r3, .L12
 183 0022 1340     		ands	r3, r3, r2
 184 0024 002B     		cmp	r3, #0
 185 0026 03DA     		bge	.L11
 186 0028 013B     		subs	r3, r3, #1
 187 002a 63F07F03 		orn	r3, r3, #127
 188 002e 0133     		adds	r3, r3, #1
 189              	.L11:
 190 0030 FB60     		str	r3, [r7, #12]
  67:../common/serial_fifo.c **** 	
  68:../common/serial_fifo.c **** 	*pc = fifo->buf[fifo->tail];
 191              		.loc 1 68 0
 192 0032 7B68     		ldr	r3, [r7, #4]
 193 0034 9B68     		ldr	r3, [r3, #8]
 194 0036 7A68     		ldr	r2, [r7, #4]
 195 0038 5268     		ldr	r2, [r2, #4]
 196 003a 1344     		add	r3, r3, r2
 197 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 198 003e 3B68     		ldr	r3, [r7]
 199 0040 1A70     		strb	r2, [r3]
  69:../common/serial_fifo.c **** 	fifo->tail = next;
 200              		.loc 1 69 0
 201 0042 7B68     		ldr	r3, [r7, #4]
 202 0044 FA68     		ldr	r2, [r7, #12]
 203 0046 5A60     		str	r2, [r3, #4]
  70:../common/serial_fifo.c **** 
  71:../common/serial_fifo.c **** 	return TRUE;
 204              		.loc 1 71 0
 205 0048 0123     		movs	r3, #1
 206              	.L10:
  72:../common/serial_fifo.c **** }
 207              		.loc 1 72 0
 208 004a 1846     		mov	r0, r3
 209 004c 1437     		adds	r7, r7, #20
 210              		.cfi_def_cfa_offset 4
 211 004e BD46     		mov	sp, r7
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 0050 5DF8047B 		ldr	r7, [sp], #4
 215              		.cfi_restore 7
 216              		.cfi_def_cfa_offset 0
 217 0054 7047     		bx	lr
 218              	.L13:
ARM GAS  /tmp/ccfpuLup.s 			page 6


 219 0056 00BF     		.align	2
 220              	.L12:
 221 0058 7F000080 		.word	-2147483521
 222              		.cfi_endproc
 223              	.LFE2:
 225              		.section	.text.fifo_avail,"ax",%progbits
 226              		.align	2
 227              		.global	fifo_avail
 228              		.thumb
 229              		.thumb_func
 231              	fifo_avail:
 232              	.LFB3:
  73:../common/serial_fifo.c **** 
  74:../common/serial_fifo.c **** 
  75:../common/serial_fifo.c **** int fifo_avail(fifo_t *fifo)
  76:../common/serial_fifo.c **** {
 233              		.loc 1 76 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 8
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238 0000 80B4     		push	{r7}
 239              		.cfi_def_cfa_offset 4
 240              		.cfi_offset 7, -4
 241 0002 83B0     		sub	sp, sp, #12
 242              		.cfi_def_cfa_offset 16
 243 0004 00AF     		add	r7, sp, #0
 244              		.cfi_def_cfa_register 7
 245 0006 7860     		str	r0, [r7, #4]
  77:../common/serial_fifo.c **** 	return (VCOM_FIFO_SIZE + fifo->head - fifo->tail) % VCOM_FIFO_SIZE;
 246              		.loc 1 77 0
 247 0008 7B68     		ldr	r3, [r7, #4]
 248 000a 1B68     		ldr	r3, [r3]
 249 000c 03F18002 		add	r2, r3, #128
 250 0010 7B68     		ldr	r3, [r7, #4]
 251 0012 5B68     		ldr	r3, [r3, #4]
 252 0014 D21A     		subs	r2, r2, r3
 253 0016 074B     		ldr	r3, .L17
 254 0018 1340     		ands	r3, r3, r2
 255 001a 002B     		cmp	r3, #0
 256 001c 03DA     		bge	.L15
 257 001e 013B     		subs	r3, r3, #1
 258 0020 63F07F03 		orn	r3, r3, #127
 259 0024 0133     		adds	r3, r3, #1
 260              	.L15:
  78:../common/serial_fifo.c **** }
 261              		.loc 1 78 0
 262 0026 1846     		mov	r0, r3
 263 0028 0C37     		adds	r7, r7, #12
 264              		.cfi_def_cfa_offset 4
 265 002a BD46     		mov	sp, r7
 266              		.cfi_def_cfa_register 13
 267              		@ sp needed
 268 002c 5DF8047B 		ldr	r7, [sp], #4
 269              		.cfi_restore 7
 270              		.cfi_def_cfa_offset 0
 271 0030 7047     		bx	lr
ARM GAS  /tmp/ccfpuLup.s 			page 7


 272              	.L18:
 273 0032 00BF     		.align	2
 274              	.L17:
 275 0034 7F000080 		.word	-2147483521
 276              		.cfi_endproc
 277              	.LFE3:
 279              		.section	.text.fifo_free,"ax",%progbits
 280              		.align	2
 281              		.global	fifo_free
 282              		.thumb
 283              		.thumb_func
 285              	fifo_free:
 286              	.LFB4:
  79:../common/serial_fifo.c **** 
  80:../common/serial_fifo.c **** 
  81:../common/serial_fifo.c **** int fifo_free(fifo_t *fifo)
  82:../common/serial_fifo.c **** {
 287              		.loc 1 82 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 8
 290              		@ frame_needed = 1, uses_anonymous_args = 0
 291 0000 80B5     		push	{r7, lr}
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 7, -8
 294              		.cfi_offset 14, -4
 295 0002 82B0     		sub	sp, sp, #8
 296              		.cfi_def_cfa_offset 16
 297 0004 00AF     		add	r7, sp, #0
 298              		.cfi_def_cfa_register 7
 299 0006 7860     		str	r0, [r7, #4]
  83:../common/serial_fifo.c **** 	return (VCOM_FIFO_SIZE - 1 - fifo_avail(fifo));
 300              		.loc 1 83 0
 301 0008 7868     		ldr	r0, [r7, #4]
 302 000a FFF7FEFF 		bl	fifo_avail
 303 000e 0346     		mov	r3, r0
 304 0010 C3F17F03 		rsb	r3, r3, #127
  84:../common/serial_fifo.c **** }
 305              		.loc 1 84 0
 306 0014 1846     		mov	r0, r3
 307 0016 0837     		adds	r7, r7, #8
 308              		.cfi_def_cfa_offset 8
 309 0018 BD46     		mov	sp, r7
 310              		.cfi_def_cfa_register 13
 311              		@ sp needed
 312 001a 80BD     		pop	{r7, pc}
 313              		.cfi_endproc
 314              	.LFE4:
 316              		.text
 317              	.Letext0:
 318              		.file 2 "../common/serial_fifo.h"
 319              		.file 3 "../common/lpcusb/target/type.h"
ARM GAS  /tmp/ccfpuLup.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial_fifo.c
     /tmp/ccfpuLup.s:19     .text.fifo_init:0000000000000000 $t
     /tmp/ccfpuLup.s:24     .text.fifo_init:0000000000000000 fifo_init
     /tmp/ccfpuLup.s:67     .text.fifo_put:0000000000000000 $t
     /tmp/ccfpuLup.s:72     .text.fifo_put:0000000000000000 fifo_put
     /tmp/ccfpuLup.s:141    .text.fifo_put:0000000000000054 $d
     /tmp/ccfpuLup.s:146    .text.fifo_get:0000000000000000 $t
     /tmp/ccfpuLup.s:151    .text.fifo_get:0000000000000000 fifo_get
     /tmp/ccfpuLup.s:221    .text.fifo_get:0000000000000058 $d
     /tmp/ccfpuLup.s:226    .text.fifo_avail:0000000000000000 $t
     /tmp/ccfpuLup.s:231    .text.fifo_avail:0000000000000000 fifo_avail
     /tmp/ccfpuLup.s:275    .text.fifo_avail:0000000000000034 $d
     /tmp/ccfpuLup.s:280    .text.fifo_free:0000000000000000 $t
     /tmp/ccfpuLup.s:285    .text.fifo_free:0000000000000000 fifo_free
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
